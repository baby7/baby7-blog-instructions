/*
 Navicat Premium Data Transfer

 Source Server         : 本地
 Source Server Type    : MySQL
 Source Server Version : 50732
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 50732
 File Encoding         : 65001

 Date: 18/01/2021 12:57:28
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

DROP DATABASE IF EXISTS `blog`;
CREATE DATABASE `blog` CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_general_ci';
USE `blog`;

-- ----------------------------
-- Table structure for blog
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `menu_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '菜单ID',
  `look_num` int(11) NULL DEFAULT 0 COMMENT '博客被访问次数',
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标题',
  `img` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '图片',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '内容',
  `introduce` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '介绍',
  `create_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 97 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '博客';

-- ----------------------------
-- Records of blog
-- ----------------------------
BEGIN;
INSERT INTO `blog` VALUES (1, '1103', 115, 'Java实现BP神经网络MNIST手写数字识别', 'https://media.baby7blog.com/Fq1uNYcAqQsPELjoG808WFjE0_oL', '> # Java实现BP神经网络MNIST手写数字识别\n\n## 一、神经网络的构建\n\n### (1)：构建神经网络层次结构\n\n由训练集数据可知，手写输入的数据维数为784维，而对应的输出结果为分别为0-9的10个数字，所以根据训练集的数据可知，在构建的神经网络的输入层的神经元的节点个数为784个，而对应的输出层的神经元个数为10个。隐层可选择单层或多层。\n\n![神经网络模式图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190410/1554900655848019877.png)\n\n### (2)：确定隐层中的神经元的个数\n\n因为对于隐层的神经元个数的确定目前还没有什么比较完美的解决方案，所以对此经过自己查阅书籍和上网查阅资料，有以下的几种经验方式来确定隐层的神经元的个数，方式分别如下所示：\n\n1) 一般取(输入+输出)/2\n\n2) 隐层一般小于输入层\n\n3）（输入层+1）/2\n\n4) log(输入层)\n\n5) log(输入层)+10\n\n实验得到以第五种的方式得到的测试结果相对较高。\n\n### (3)：设置神经元的激活函数\n\n在《机器学习》的书中介绍了两种比较常用的函数，分别是阶跃函数和Sigmoid函数。最后自己采用了后者函数。\n\n### (4)：初始化输入层和隐层之间神经元间的权值信息\n\n采用的是使用简单的随机数分配的方法,并且两层之间的神经元权值是通过二维数组进行保留，数组的索引就代表着两层对应的神经元的索引信息\n\n### (5)：初始化隐层和输出层之间神经元间的权值信息\n\n采用的是使用简单的随机数分配的方法,并且两层之间的神经元权值是通过二维数组进行保留，数组的索引就代表着两层对应的神经元的索引信息\n\n### (6)：读取CSV测试集表格信息，并加载到程序用数据保存，其中将每个维数的数据都换成了0和1的二进制数进行处理。\n\n### (7)：读取CSV测试集结果表格信息，并加载到程序用数据保存\n\n### (8)：计算输入层与隐层中隐层神经元的阈值\n\n这里主要是采用了下面的方法：\n\n```java\nSum=sum+weight[i][j] * layer0[i];\n```\n\n![S函数](https://media.baby7blog.com/ueditor/jsp/upload/image/20190421/1555818844139078885.png)\n\n参数的含义：将每个输入层中的神经元与神经元的权值信息weight[i][j]乘以对应的输入层神经元的阈值累加，然后再调用激活函数得到对应的隐层神经元的阈值。\n\n### (9)：计算隐层与输出层中输出层的神经元的阈值\n\n方法和上面的类似，只是相对应的把权值信息进行了修改即可。\n\n### (10)：计算误差逆传播（输出层的逆误差）\n\n采用书上P103页的方法（西瓜书）\n\n### (11)：计算误差传播（隐层的逆误差）\n\n采用书上P103页的方法（西瓜书）\n\n### (12)：更新各层神经元之间的权值信息\n\n```java\ndouble newVal = momentum * prevWeight[j][i] + eta * delta[i] * layer[j];\n```\n\n参数：其中设置momentum 为0.9，设置eta 为0.25，prevWeight[j][i]表示神经元之间的权值，layer[j]和delta[i]表示两层不同神经元的阈值。\n\n### (13)：循环迭代训练5次\n\n### (14)：输入测试集数据\n\n### (15)：输出测试集预测结果和实际结果进行比较，得到精确度\n\n此处放一个多隐层BP神经网络的类（自己写的，有错误请指出）：\n\n```java\n/**\n * BP神经网络类\n * 使用了附加动量法进行优化\n * 主要使用方法：\n *     初始化：   BP bp = new BP(new int[]{int,int*n,int})  //第一个int表示输入层，中间n个int表示隐藏层，最后一个int表示输出层\n *     训练： bp.train(double[],double[])               //第一个double[]表示输入，第二个double[]表示期望输出\n *     测试       int result = bp.test(double[])            //参数表示输入,返回值表示输出层最大权值\n *     另有设置学习率和动量参数方法\n */\nimport java.util.Random;\n \npublic class BP {\n    \n    private final double[][] layers;//输入层、隐含层、输出层\n    private final double[][] deltas;//每层误差\n    private final double[][][] weights;//权值\n    private final double[][][] prevUptWeights;//更新之前的权值信息\n    private final double[] target;   //预测的输出内容\n    \n    private double eta;        //学习率\n    private double momentum;    //动量参数\n    \n    private final Random random;  //主要是对权值采取的是随机产生的方法\n    \n    //初始化\n    public BP(int[] size, double eta, double momentum) {\n       int len = size.length;\n       //初始化每层\n       layers = new double[len][];\n       for(int i = 0; i<len; i++) {\n           layers[i] = new double[size[i] + 1];\n       }\n       //初始化预测输出\n        target = new double[size[len - 1] + 1];\n        \n       //初始化隐藏层和输出层的误差\n       deltas = new double[len - 1][];\n       for(int i = 0; i < (len - 1); i++) {\n           deltas[i] = new double[size[i + 1] + 1];\n       }\n       \n       //使每次产生的随机数都是第一次的分配，这是有参数和没参数的区别\n        random = new Random(100000);\n       //初始化权值\n       weights = new double[len - 1][][];\n       for(int i = 0; i < (len - 1); i++) {\n           weights[i] = new double[size[i] + 1][size[i + 1] + 1];\n       }\n       randomizeWeights(weights);\n       \n       //初始化更新前的权值\n       prevUptWeights = new double[len - 1][][];\n       for(int i = 0; i < (len - 1); i++) {\n           prevUptWeights[i] = new double[size[i] + 1][size[i + 1] + 1];\n       }\n       \n        this.eta = eta;             //学习率\n        this.momentum = momentum;   //动态量\n    }\n    \n    //随机产生神经元之间的权值信息  \n    private void randomizeWeights(double[][][] matrix) {\n        for (int i = 0, len = matrix.length; i != len; i++) {\n            for (int j = 0, len2 = matrix[i].length; j != len2; j++) {\n               for(int k = 0, len3 = matrix[i][j].length; k != len3; k++) {\n                   double real = random.nextDouble();    //随机分配着产生0-1之间的值  \n                   matrix[i][j][k] = random.nextDouble() > 0.5 ? real : -real;\n               }\n            }\n        }\n    }\n    \n    //初始化输入层，隐含层，和输出层  \n    public BP(int[] size) {\n        this(size, 0.25, 0.9);\n    }\n    \n    //训练数据\n    public void train(double[] trainData, double[] target) {\n       loadValue(trainData,layers[0]);       //加载输入的数据\n       loadValue(target,this.target);         //加载输出的结果数据\n        forward();                  //向前计算神经元权值(先算输入到隐含层的，然后再算隐含到输出层的权值)\n        calculateDelta();           //计算误差逆传播值 \n        adjustWeight();             //调整更新神经元的权值\n    }\n \n    //加载数据\n    private void loadValue(double[] value,double [] layer) {\n        if (value.length != layer.length - 1)\n            throw new IllegalArgumentException(\"Size Do Not Match.\");\n        System.arraycopy(value, 0, layer, 1, value.length);  //调用系统复制数组的方法(存放输入的训练数据)\n    }\n    \n    //向前计算(先算输入到隐含层的，然后再算隐含到输出层的权值)\n    private void forward() {\n       //计算隐含层到输出层的权值\n       for(int i = 0; i < (layers.length - 1); i++) {\n           forward(layers[i], layers[i+1], weights[i]);\n       } \n    }\n    \n    //计算每一层的误差(因为在BP中，要达到使误差最小)(就是逆传播算法，书上有P101)\n    private void calculateDelta() {\n        outputErr(deltas[deltas.length-1],layers[layers.length - 1],target);   //计算输出层的误差(因为要反过来算，所以先算输出层的)\n        \n        for(int i = (layers.length - 1); i > 1; i--) {\n            hiddenErr(deltas[i - 2/*输入层没有误差*/],layers[i - 1],deltas[i - 1],weights[i - 1]);   //计算隐含层的误差\n        }\n    }\n    \n     //更新每层中的神经元的权值信息\n    private void adjustWeight() {\n       for(int i = (layers.length - 1); i > 0; i--) {\n            adjustWeight(deltas[i - 1], layers[i - 1], weights[i - 1], prevUptWeights[i - 1]);\n       }\n    }\n    \n    //向前计算各个神经元的权值(layer0：某层的数据,layer1：下一层的内容，weight：某层到下一层的神经元的权值)\n    private void forward(double[] layer0, double[] layer1, double[][] weight) {\n        layer0[0] = 1.0;//给偏置神经元赋值为1（实际上添加了layer1层每个神经元的阙值）简直漂亮!!!\n        for (int j = 1, len = layer1.length; j != len; ++j) {\n            double sum = 0;//保存权值\n            for (int i = 0, len2 = layer0.length; i != len2; ++i) {\n               sum += weight[i][j] * layer0[i];\n            }\n            layer1[j] = sigmoid(sum);  //调用神经元的激活函数来得到结果(结果肯定是在0-1之间的)\n        }\n    }\n    \n    //计算输出层的误差(delte:误差，output:输出，target：预测输出)\n    private void outputErr(double[] delte, double[] output,double[] target) {\n        for (int idx = 1, len = delte.length; idx != len; ++idx) {\n            double o = output[idx];\n            delte[idx] = o * (1d - o) * (target[idx] - o);\n        }\n    }\n    \n    //计算隐含层的误差(delta:本层误差,layer：本层,delta1：下一层误差,weights：权值)\n    private void hiddenErr(double[] delta, double[] layer, double[] delta1, double[][] weights) {\n        for (int j = 1, len = delta.length; j != len; ++j) {\n            double o = layer[j];  //神经元权值\n            double sum = 0;\n            for (int k = 1, len2 = delta1.length; k != len2; ++k)  //由输出层来反向计算\n                sum += weights[j][k] * delta1[k];\n            delta[j] = o * (1d - o) * sum;\n        }\n    }\n    \n    //更新每层中的神经元的权值信息(这也就是不断的训练过程)\n    private void adjustWeight(double[] delta, double[] layer, double[][] weight, double[][] prevWeight) {\n        layer[0] = 1;\n        for (int i = 1, len = delta.length; i != len; ++i) {\n            for (int j = 0, len2 = layer.length; j != len2; ++j) {\n               //通过公式计算误差限=(动态量*之前的该神经元的阈值+学习率*误差*对应神经元的阈值)，来进行更新权值\n                double newVal = momentum * prevWeight[j][i] + eta * delta[i] * layer[j];\n                weight[j][i] += newVal;  //得到新的神经元之间的权值\n                prevWeight[j][i] = newVal;  //保存这一次得到的权值，方便下一次进行更新\n            }\n        }\n    }\n    \n    //我这里用的是sigmoid激活函数，当然也可以用阶跃函数，看自己选择吧 \n    private double sigmoid(double val) {\n        return 1d / (1d + Math.exp(-val));\n    }\n    \n    //测试神经网络\n    public int test(double[] inData) {\n        if (inData.length != layers[0].length - 1)\n            throw new IllegalArgumentException(\"Size Do Not Match.\");\n        System.arraycopy(inData, 0, layers[0], 1, inData.length);\n        forward();\n        return getNetworkOutput();\n    }\n    \n    //返回最后的输出层的结果\n    private int getNetworkOutput() {\n        int len = layers[layers.length - 1].length;\n        double[] temp = new double[len - 1];\n        for (int i = 1; i != len; i++)\n            temp[i - 1] = layers[layers.length - 1][i];\n        //获得最大权值下标\n        double max = temp[0];\n        int idx = -1;\n        for (int i = 0; i <temp.length; i++) {\n            if (temp[i] >= max) {\n                max = temp[i];\n                idx = i;\n            }\n        }\n        return idx;\n    }\n    \n    //设置学习率\n    public void setEta(double eta) {\n       this.eta = eta;\n    }\n    \n    //设置动量参数\n    public void setMomentum(double momentum){\n       this.momentum = momentum;\n    }\n}\n```\n\n## 二、系统架构\n\n由于BP神经网络训练过程时间较长，所以采用客户端服务器（C/S）的形式，在服务器进行训练，在客户端直接进行识别，使用套接字进行通讯。\n\n#### 服务器：\n\n![服务器](https://media.baby7blog.com/ueditor/jsp/upload/image/20190410/1554900655864047087.png)\n\n#### 客户端：\n\n![客户端](https://media.baby7blog.com/ueditor/jsp/upload/image/20190410/1554900655864011889.png)\n\n### 采用MVC架构：\n\n1. Model（模型）表示应用程序核心。\n\n2. View（视图）显示数据。\n\n3. Controller（控制器）处理输入。\n\n\n\nMNIST数字集经过整理存储在CSV文件中。\n\n以下是系统架构：\n\n![系统架构](https://media.baby7blog.com/ueditor/jsp/upload/image/20190410/1554908214616042777.png)\n\n源码我放在在了CSDN上，请移步CSDN下载（包含MNIST数字集，只要1积分哦）：\n\n[https://download.csdn.net/download/weixin_35706300/10618807](https://download.csdn.net/download/weixin_35706300/10618807)\n\n...现在似乎它自己在涨...我控制不了', 'Java实现BP神经网络，内含BP神经网络类，采用MNIST数据集，包含服务器和客户端程序，可在服务器训练后使客户端直接使用训练结果，界面有画板，可以手写数字', '2019-04-10 20:51:03', '2021-01-13 08:23:37'), (2, '1107', 14, 'C语言打水印', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554967637217065347.png', '> # C语言打水印\n\n## 一、预览\n1.准备两张图片\n\n![准备两张图片](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555127278572021815.png)\n\n2.合成结果\n\n![合成结果](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555127339946010969.png)\n\n## 二、代码\n```c\n#include <Windows.h>\n#include <stdio.h>\n#include <stdlib.h>\n \nunsigned char *pBmpBuf;//读入图像数据的指针\nint bmpWidth;//图像的宽\nint bmpHeight;//图像的高\nRGBQUAD *pColorTable;//颜色表指针\nint biBitCount;//图像类型，每像素位数\nchar readPath1[] = \"D:/project/devcpp/img/input1.BMP\";\nchar readPath2[]=\"D:/project/devcpp/img/input2.BMP\";//读入指定BMP文件进内存\nchar writePath[]=\"D:/project/devcpp/img/output.BMP\";\n \n//读取图片 \nint readBmp(char *bmpName){\n    FILE *fp=fopen(bmpName,\"rb\");//二进制读方式打开指定的图像文件\n    if(fp==0){\n       printf(\"打水印失败\\n\");\n       return 0;\n    }\n \n    fseek(fp, sizeof(BITMAPFILEHEADER),0);//跳过位图文件头结构BITMAPFILEHEADER\n    BITMAPINFOHEADER head;  //定义位图信息头结构变量，读取位图信息头进内存，存放在变量head中\n    fread(&head, sizeof(BITMAPINFOHEADER), 1,fp); \n \n    bmpWidth = head.biWidth;\n    bmpHeight = head.biHeight;\n    biBitCount = head.biBitCount;//获取图像宽、高、每像素所占位数等信息\n    int lineByte=(bmpWidth * biBitCount/8+3)/4*4;//定义变量，计算图像每行像素所占的字节数（必须是4的倍数）\n    \n    if(biBitCount==8){//灰度图像有颜色表，且颜色表表项为256\n       pColorTable=malloc(sizeof(RGBQUAD)*256); //申请颜色表所需要的空间，读颜色表进内存\n       fread(pColorTable,sizeof(RGBQUAD),256,fp);\n    }\n   pBmpBuf=malloc(sizeof(unsigned char)*lineByte * bmpHeight);//申请位图数据所需要的空间，读位图数据进内存\n    fread(pBmpBuf,1,lineByte * bmpHeight,fp);\n    fclose(fp);//关闭文件\n    return 1;\n}\n \n//保存图片 \nint saveBmp(char *bmpName, unsigned char *imgBuf, int width, int height, int biBitCount, RGBQUAD *pColorTable){\n    if(!imgBuf)//如果位图数据指针为0，则没有数据传入，函数返回\n       return 0;\n    int colorTablesize=0;//颜色表大小，以字节为单位，灰度图像颜色表为1024字节，彩色图像颜色表大小为0\n    if(biBitCount==8)\n       colorTablesize=1024;\n    int lineByte=(width * biBitCount/8+3)/4*4;//待存储图像数据每行字节数为4的倍数\n    FILE *fp=fopen(bmpName,\"wb\");//以二进制写的方式打开文件\n    if(fp==0){\n       printf(\"!!!!\\n\");\n       return 0;\n    }\n       \n    BITMAPFILEHEADER fileHead;//申请位图文件头结构变量，填写文件头信息\n    fileHead.bfType = 0x4D42;//bmp类型\n    fileHead.bfSize= sizeof(BITMAPFILEHEADER)+sizeof(BITMAPINFOHEADER)+colorTablesize+lineByte*height;//bfSize是图像文件4个组成部分之和\n    fileHead.bfReserved1 = 0;\n    fileHead.bfReserved2 = 0;\n    fileHead.bfOffBits=54+colorTablesize;//bfOffBits是图像文件前3个部分所需空间之和\n    fwrite(&fileHead, sizeof(BITMAPFILEHEADER),1, fp);//写文件头进文件\n    \n    BITMAPINFOHEADER head; //申请位图信息头结构变量，填写信息头信息\n    head.biBitCount=biBitCount;\n    head.biClrImportant=0;\n    head.biClrUsed=0;\n    head.biCompression=0;\n    head.biHeight=height;\n    head.biPlanes=1;\n    head.biSize=40;\n    head.biSizeImage=lineByte*height;\n    head.biWidth=width;\n    head.biXPelsPerMeter=0;\n    head.biYPelsPerMeter=0;\n    fwrite(&head, sizeof(BITMAPINFOHEADER),1, fp);//写位图信息头进内存\n    \n    if(biBitCount==8)//如果灰度图像，有颜色表，写入文件 \n       fwrite(pColorTable, sizeof(RGBQUAD),256, fp);\n    fwrite(imgBuf, height*lineByte, 1, fp);//写位图数据进文件\n    fclose(fp);//关闭文件\n     return 1;\n}\n \n \nint main(){\n    int o=0;//RGB计数器 \n    printf(\"BMP文件录入位置：\\n%s\\n%s\\n\\n\",readPath1,readPath2);\n    readBmp(readPath1);\n    unsigned char *pBmpBuf1=pBmpBuf;;//读入图像数据的指针\n    int bmpWidth1=bmpWidth;//图像的宽\n    int bmpHeight1=bmpHeight;//图像的高\n    RGBQUAD *pColorTable1=pColorTable;//颜色表指针\n    int biBitCount1=biBitCount;//图像类型，每像素位数\n    readBmp(readPath2);\n    unsigned char *pBmpBuf2=pBmpBuf;;//读入图像数据的指针\n    int bmpWidth2=bmpWidth;//图像的宽\n    int bmpHeight2=bmpHeight;//图像的高\n    RGBQUAD *pColorTable2=pColorTable;//颜色表指针\n    int biBitCount2=biBitCount;//图像类型，每像素位数\n    printf(\"第一张BMP:%d位 第二张BMP:%d位\\n\",biBitCount1,biBitCount2);\n \n    //循环变量，图像的坐标\n    int i,j;\n    //每行字节数\n    int lineByte1=(bmpWidth1*biBitCount1/8+3)/4*4;\n    int lineByte2=(bmpWidth2*biBitCount2/8+3)/4*4;\n     //循环变量，针对彩色图像，遍历每像素的三个分量\n    int k;\n    if(biBitCount1==8 && biBitCount2==8){//对于灰度图像\n       for(i=0;i<bmpHeight2;i++){\n           for(j=0;j<bmpWidth2;j++){\n              if(*(pBmpBuf2+i*lineByte2+j)!=0){\n                  *(pBmpBuf1+i*lineByte1+j)=*(pBmpBuf2+i*lineByte2+j);\n              }\n           }\n       }   \n    }\n    else if(biBitCount1==24 && biBitCount2==24){//彩色图像\n       for(i=0;i<bmpHeight2;i++){\n           for(j=0;j<bmpWidth2;j++){ \n              for(k=0,o=0;k<3;k++){\n                  if(*(pBmpBuf2+i*lineByte2+j*3+k)>5){//每像素RGB三个分量分别置0才变\n                     o++;\n                  }\n                  if(o==3){\n                     *(pBmpBuf1+i*lineByte1+j*3+0)=*(pBmpBuf2+i*lineByte2+j*3+0);\n                     *(pBmpBuf1+i*lineByte1+j*3+1)=*(pBmpBuf2+i*lineByte2+j*3+1);\n                     *(pBmpBuf1+i*lineByte1+j*3+2)=*(pBmpBuf2+i*lineByte2+j*3+2);\n                  }\n              }\n           }\n       }\n    }\n \n    if(saveBmp(writePath, pBmpBuf1, bmpWidth1, bmpHeight1, biBitCount1, pColorTable1)){\n       printf(\"打水印成功\\n\\n\");\n       printf(\"BMP文件保存位置：\\n%s\\n\",writePath);\n    }\n    else{\n       printf(\"打水印失败\");\n    } \n     //清除缓冲区，pBmpBuf和pColorTable是全局变量，在文件读入时申请的空间\n    free(pBmpBuf1);\n    free(pBmpBuf2);\n    if(biBitCount1==8)\n       free(pColorTable1);\n    if(biBitCount2==8)\n       free(pColorTable2);\n    return 0;\n}\n```', 'c语言实现打水印，合成两张图片，去除水印图片的黑色，将剩下的像素添加到原图片上', '2019-04-11 15:32:21', '2021-01-12 03:06:49'), (3, '1107', 12, 'Java实现打水印（文字水印，图片水印）', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554968461316046387.png', '> # Java实现打水印（文字水印，图片水印）\n\n## 一、 程序运行截图\n\n文字水印\n\n![文字水印](https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554968461316046387.png)\n\n图片水印\n\n![图片水印](https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554968461316037112.png)\n\n## 二、 加工结果\n\n文字水印结果\n\n![文字水印结果](https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554968461316008862.jpeg)\n\n图片水印结果\n\n![图片水印结果](https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554968461316029270.jpeg)\n\n## 三、 程序代码\n\n```java\nimport java.awt.AlphaComposite;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\n\npublic class ImageRemarkUtil {\n\n    private float alpha = 0.8f;//水印透明度\n    private int positionWidth = 100;//水印横向位置\n    private int positionHeight = 100;//水印纵向位置\n    private Font font = new Font(\"宋体\", Font.BOLD, 72);//水印文字字体\n    private Color color = Color.red;//水印文字颜色\n    \n    public ImageRemarkUtil(float alpha,int positionWidth,int positionHeight,Font font,Color color){\n        this.alpha = alpha;\n        this.positionWidth = positionWidth;\n        this.positionHeight = positionHeight;\n        this.font = font;\n        this.color = color;\n    }\n    \n    /**\n     * 给图片添加水印图片\n     * \n     * @param iconPath\n     *            水印图片路径\n     * @param srcImgPath\n     *            源图片路径\n     * @param targerPath\n     *            目标图片路径\n     * @param iconPath\n     *            水印图片路径\n     * @param srcImgPath\n     *            源图片路径\n     * @param targerPath\n     *            目标图片路径\n     * @param degree\n     *            水印图片旋转角度\n     */\n    public void markImageByIcon(String iconPath, String srcImgPath,\n            String targerPath, Integer degree) {\n        OutputStream os = null;\n        try {\n            Image srcImg = ImageIO.read(new File(srcImgPath));\n            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null),\n                    srcImg.getHeight(null), BufferedImage.TYPE_INT_RGB);\n            // 1、得到画笔对象\n            Graphics2D g = buffImg.createGraphics();\n            // 2、设置对线段的锯齿状边缘处理\n            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n            g.drawImage(\n                    srcImg.getScaledInstance(srcImg.getWidth(null),\n                            srcImg.getHeight(null), Image.SCALE_SMOOTH), 0, 0,\n                    null);\n            // 3、设置水印旋转\n            if (null != degree) {\n                g.rotate(Math.toRadians(degree),\n                        (double) buffImg.getWidth() / 2,\n                        (double) buffImg.getHeight() / 2);\n            }\n            // 4、水印图片的路径 水印图片一般为gif或者png的，这样可设置透明度\n            ImageIcon imgIcon = new ImageIcon(iconPath);\n            // 5、得到Image对象。\n            Image img = imgIcon.getImage();\n            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,\n                    alpha));\n            // 6、水印图片的位置\n            g.drawImage(img, positionWidth, positionHeight, null);\n            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));\n            // 7、释放资源\n            g.dispose();\n            // 8、生成图片\n            os = new FileOutputStream(targerPath);\n            ImageIO.write(buffImg, \"JPG\", os);\n            System.out.println(\"图片完成添加水印图片\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (null != os)\n                    os.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * 给图片添加水印文字\n     * @param logoText\n     * 			    水印文字\n     * @param srcImgPath\n     *            源图片路径\n     * @param targerPath\n     *            目标图片路径\n     * @param degree\n     *            水印图片旋转角度\n     */\n    public void markImageByText(String logoText, String srcImgPath,\n            String targerPath, Integer degree) {\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            // 1、源图片\n            Image srcImg = ImageIO.read(new File(srcImgPath));\n            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null),\n                    srcImg.getHeight(null), BufferedImage.TYPE_INT_RGB);\n            // 2、得到画笔对象\n            Graphics2D g = buffImg.createGraphics();\n            // 3、设置对线段的锯齿状边缘处理\n            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n            g.drawImage(\n                    srcImg.getScaledInstance(srcImg.getWidth(null),\n                            srcImg.getHeight(null), Image.SCALE_SMOOTH), 0, 0,\n                    null);\n            // 4、设置水印旋转\n            if (null != degree) {\n                g.rotate(Math.toRadians(degree),\n                        (double) buffImg.getWidth() / 2,\n                        (double) buffImg.getHeight() / 2);\n            }\n            // 5、设置水印文字颜色\n            g.setColor(color);\n            // 6、设置水印文字Font\n            g.setFont(font);\n            // 7、设置水印文字透明度\n            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,\n                    alpha));\n            // 8、第一参数->设置的内容，后面两个参数->文字在图片上的坐标位置(x,y)\n            g.drawString(logoText, positionWidth, positionHeight);\n            // 9、释放资源\n            g.dispose();\n            // 10、生成图片\n            os = new FileOutputStream(targerPath);\n            ImageIO.write(buffImg, \"JPG\", os);\n\n            System.out.println(\"图片完成添加水印文字\");\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (null != is)\n                    is.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            try {\n                if (null != os)\n                    os.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```', '文字水印可设置参数：水印文字，透明度，横向位置，纵向位置，旋转角度，字体，颜色 图片水印可设置参数：透明度，横向位置，纵向位置，旋转角度', '2019-04-11 15:43:20', '2021-01-12 03:06:53'), (4, '1107', 16, 'MFC桌面精灵（不规则窗体，天气预报）', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554968794740068792.png', '> # MFC桌面精灵（不规则窗体，天气预报）\n\n使用C++,采用MFC开发，启动后桌面会出现一个小人（《家庭教师》动漫中的里包恩）（此处是不规则窗体的应用），左键可以拖动，点击胸前的奶嘴可以弹出快捷启动页面，可以启动某些路径下的资源，点击右下角会弹出天气预报界面（此处采用天气API，详情见源码），包含今明天气温度和天气图标，程序是早年写的，代码风格可能不太好，见谅。\n\n以下是截图：\n\n![里包恩截图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554968794740068792.png)\n\n![主界面](https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554968794740079606.png)\n\n![天气截图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554968794740007945.png)\n\n## 一、MFC不规则窗口的实现方法\n\n首先设置对话框为无边框，然后自定义一个函数SteRegion实现将窗体不规则化（具体为不显示图片中特定像素，这里为黑色）并在OnInitDialog中调用，在OnPaint函数中设置对话框大小和位置，在OnCtlColor函数中画背景，最后在OnLButtonDown中发送一个消息实现单击拖动。\n\n![里包恩](https://media.baby7blog.com/ueditor/jsp/upload/image/20190428/1556460497404037810.jpg)\n\n![代码块1](https://media.baby7blog.com/ueditor/jsp/upload/image/20190428/1556460521982050800.jpg)\n\n![代码块2](https://media.baby7blog.com/ueditor/jsp/upload/image/20190428/1556460531076071227.jpg)\n\n![代码块3](https://media.baby7blog.com/ueditor/jsp/upload/image/20190428/1556460537795048313.jpg)\n\n![代码块4](https://media.baby7blog.com/ueditor/jsp/upload/image/20190428/1556460543842029993.jpg)\n\n![代码块5](https://media.baby7blog.com/ueditor/jsp/upload/image/20190428/1556460548310030507.jpg)\n\n## 二、MFC天气预报的实现方法\n\n第一步：通过CInternetSession类获得solson网的对应的城市天气信息。\n\n第二步：将获得的信息转为字符串。\n\n第三步：解析json格式的字符串，提取需要的信息。\n\n![天气](https://media.baby7blog.com/ueditor/jsp/upload/image/20190428/1556460638044022016.jpg)\n\n![代码块1](https://media.baby7blog.com/ueditor/jsp/upload/image/20190428/1556460643919036151.jpg)\n\n![代码块2](https://media.baby7blog.com/ueditor/jsp/upload/image/20190428/1556460650982090345.jpg)\n\n![代码块3](https://media.baby7blog.com/ueditor/jsp/upload/image/20190428/1556460656091079735.jpg)\n\n源码请移步CSDN下载：\n\n[https://download.csdn.net/download/weixin_35706300/11099608](https://download.csdn.net/download/weixin_35706300/11099608)', '使用C++,采用MFC开发，启动后桌面会出现一个小人（《家庭教师》动漫中的里包恩）（此处是不规则窗体的应用），左键可以拖动，点击胸前的奶嘴可以弹出快捷启动页面，可以启动某些路径下的资源，点击右下角会弹出天气预报界面，包含今明天气温度和天气图标', '2019-04-11 15:48:49', '2021-01-11 08:05:36'), (5, '1103', 13, 'Python 人脸识别（加圣诞帽等）', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554969011460048157.png', '> # Python 人脸识别（加圣诞帽等）\n\n## 一、 截图\n\n![结果截图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554969011460048157.png)\n\n## 二、代码\n\nMain.py（循环调用摄像头获取图像进行人脸识别，之后调用Image_processing.py进行处理）\n\n```\n# coding:utf8\nimport cv2\nimport image_processing\n\n\n# 识别\ndef recognition(image, focus):\n    # 创建 classifier\n    path = \"D:/soft/Anaconda/Lib/site-packages/cv2/data/\"\n    clf = cv2.CascadeClassifier(path + focus + \".xml\")\n    # 设定灰度\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    # 识别\n    faces = clf.detectMultiScale(\n        gray,\n        scaleFactor=1.1,\n        minNeighbors=10,\n        minSize=(30, 30),\n        flags=cv2.CASCADE_SCALE_IMAGE\n    )\n    # 给图像加点东西\n    for (x, y, w, h) in faces:\n        # cv2.circle(image, (x+w//2, y+h//2), w//2, (255, 0, 0), 2)     # 圆\n        # cv2.rectangle(image, (x, y), (x+w, y+h), (255, 0, 0), 2)      # 矩形\n        # image = image_processing.image_christmas_hat(image, x, y, w, h)  # 加个圣诞帽\n        image = image_processing.image_face(image, x, y, w, h)  # 换个笑脸\n        # image = image_processing.image_Kumamon(image, x, y, w, h)  # 换个熊本熊\n    return image\n\n\nif __name__ == \"__main__\":\n    cap = cv2.VideoCapture(0)               # 从摄像头中取得视频\n    # focus = \"haarcascade_eye\"             # 眼睛识别\n    # focus = \"haarcascade_fullbody\"        # 全身识别\n    focus = \"haarcascade_frontalface_alt\"   # 人脸识别\n    while cap.isOpened():\n        ret, frame = cap.read()             # 读取帧摄像头\n        if ret is True:\n            # 输出当前帧\n            frame = recognition(frame, focus)\n            frame = cv2.resize(frame, (0, 0), fx=1.5, fy=1.5, interpolation=cv2.INTER_NEAREST)\n            cv2.imshow(\'Face recognition\', frame)\n            # 键盘按 Q 退出\n            if (cv2.waitKey(1) & 0xFF) == ord(\'q\'):\n                break\n        else:\n            break\n    # 释放资源\n    cap.release()\n    cv2.destroyAllWindows()\n```\n\nImage_processing.py（根据人脸所在进行图像叠加，可以做出加圣诞帽等好玩的）\n\n```\n# coding:utf8\nimport cv2\n\n\n# 加个圣诞帽\ndef image_christmas_hat(img, x, y, w, h):\n    hat = cv2.imread(\'ChristmasHat.jpg\')  # 帽子透明图片\n    hat = cv2.resize(hat, (0, 0), fx=0.2, fy=0.2, interpolation=cv2.INTER_NEAREST)  # 稍微调整下大小\n    y = y-(h*3//4)\n    _hat = cv2.resize(hat, (w, h))\n    rows, cols, channels = _hat.shape\n    r, c, cs = img.shape\n    if y+rows > r or x+cols > c:\n        return img\n    roi = img[y:(y+rows), x:(x+cols)]   # 在原始图像中截取帽子图像大小的部分\n    img2gray = cv2.cvtColor(_hat, cv2.COLOR_BGR2GRAY)    # 将logo图像灰度化\n    ret, mask = cv2.threshold(img2gray, 250, 255, cv2.THRESH_BINARY)    # 将帽子灰度图二值化，将得到的图像赋值给mask，帽子部分的值为255，白色\n    mask_inv = cv2.bitwise_not(mask)    # 将mask按位取反，即白变黑，黑变白\n    img1_bg = cv2.bitwise_and(roi, roi, mask=mask)  # 将原始图像中截取的部分做处理，mask中黑色部分按位与运算，即保留黑色部分，保留除帽子位置外的部分\n    img2_fg = cv2.bitwise_and(_hat, _hat, mask=mask_inv)    # 将帽子图像中，mask_inv部分按位与运算，即保留黑色部分，保留logo\n    dst = cv2.add(img1_bg, img2_fg)     # 图像相加\n    img[y:(y+rows), x:(x+cols)] = dst   # 图像替换\n    return img\n\n\n# 替换人脸为笑哭表情\ndef image_face(img, x, y, w, h):\n    face = cv2.imread(\'xiaoku.jpg\')  # 笑哭脸透明图片\n    face = cv2.resize(face, (0, 0), fx=0.2, fy=0.2, interpolation=cv2.INTER_NEAREST)  # 稍微调整下大小\n    _face = cv2.resize(face, (w, h))\n    rows, cols, channels = _face.shape\n    r, c, cs = img.shape\n    if y+rows > r or x+cols > c:\n        return img\n    roi = img[y:(y+rows), x:(x+cols)]   # 在原始图像中截取表情图像大小的部分\n    img2gray = cv2.cvtColor(_face, cv2.COLOR_BGR2GRAY)    # 将logo图像灰度化\n    ret, mask = cv2.threshold(img2gray, 250, 255, cv2.THRESH_BINARY)    # 将表情灰度图二值化，将得到的图像赋值给mask，表情部分的值为255，白色\n    mask_inv = cv2.bitwise_not(mask)    # 将mask按位取反，即白变黑，黑变白\n    img1_bg = cv2.bitwise_and(roi, roi, mask=mask)  # 将原始图像中截取的部分做处理，mask中黑色部分按位与运算，即保留黑色部分，保留除表情位置外的部分\n    img2_fg = cv2.bitwise_and(_face, _face, mask=mask_inv)    # 将表情图像中，mask_inv部分按位与运算，即保留黑色部分，保留logo\n    dst = cv2.add(img1_bg, img2_fg)     # 图像相加\n    img[y:(y+rows), x:(x+cols)] = dst   # 图像替换\n    return img\n\n\n# 替换为熊本熊\ndef image_Kumamon(img, x, y, w, h):\n    Kumamon = cv2.imread(\'Kumamon.jpg\')  # 熊本熊透明图片\n    Kumamon = cv2.resize(Kumamon, (0, 0), fx=0.2, fy=0.2, interpolation=cv2.INTER_NEAREST)  # 稍微调整下大小\n    x = x - w//2\n    w = w * 2\n    h = h * 2\n    _Kumamon = cv2.resize(Kumamon, (w, h))\n    rows, cols, channels = _Kumamon.shape\n    r, c, cs = img.shape\n    if y+rows > r or x+cols > c:\n        return img\n    roi = img[y:(y+rows), x:(x+cols)]   # 在原始图像中截取熊本熊图像大小的部分\n    img2gray = cv2.cvtColor(_Kumamon, cv2.COLOR_BGR2GRAY)    # 将logo图像灰度化\n    ret, mask = cv2.threshold(img2gray, 252, 255, cv2.THRESH_BINARY)    # 将熊本熊灰度图二值化，将得到的图像赋值给mask，熊本熊部分的值为255，白色\n    mask_inv = cv2.bitwise_not(mask)    # 将mask按位取反，即白变黑，黑变白\n    img1_bg = cv2.bitwise_and(roi, roi, mask=mask)  # 将原始图像中截取的部分做处理，mask中黑色部分按位与运算，即保留黑色部分，保留除熊本熊位置外的部分\n    img2_fg = cv2.bitwise_and(_Kumamon, _Kumamon, mask=mask_inv)    # 将熊本熊图像中，mask_inv部分按位与运算，即保留黑色部分，保留logo\n    dst = cv2.add(img1_bg, img2_fg)     # 图像相加\n    img[y:(y+rows), x:(x+cols)] = dst   # 图像替换\n    return img\n```', '使用Python的cv2库进行识别，image_processing库进行图像处理，可以实现 实时的替换人脸', '2019-04-11 15:54:49', '2021-01-11 02:37:02'), (6, '1104', 22, 'Python 网易云音乐 歌单及MV下载器', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190412/1555066008664005192.png', '> # Python 网易云音乐 歌单及MV下载器\n\n注：此程序仅用于学习和研究\n\n![图标](https://media.baby7blog.com/ueditor/jsp/upload/image/20190412/1555066008664005192.png)\n\n## 一、运行截图\n\n![主界面](https://media.baby7blog.com/ueditor/jsp/upload/image/20190411/1554969813990049931.png)\n\n## 二、介绍\n\n输入网易云音乐的歌单URL即可下载歌曲及所关联的MV。（下载路径最后要有/）\n\n```python\nfrom tkinter import *\nimport requests\nfrom bs4 import BeautifulSoup\nimport random, math\nfrom Crypto.Cipher import AES\nimport base64\nimport codecs\nimport os\nimport urllib\nfrom lxml import html\netree = html.etree\n\n\nclass Spider(object):\n    def __init__(self):\n        self.headers = {\n                 \'User-Agent\': \'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\',\n                 \'Cookie\':\'_iuqxldmzr_=32; _ntes_nnid=8d4ef0883a3bcc9d3a2889b0bf36766a,1533782432391; _ntes_nuid=8d4ef0883a3bcc9d3a2889b0bf36766a; __utmc=94650624; WM_TID=GzmBlbRkRGQXeQiYuDVCfoEatU6VSsKC; playerid=19729878; __utma=94650624.1180067615.1533782433.1533816989.1533822858.9; __utmz=94650624.1533822858.9.7.utmcsr=cn.bing.com|utmccn=(referral)|utmcmd=referral|utmcct=/; WM_NI=S5gViyNVs14K%2BZoVerGK69gLlmtnH5NqzyHcCUY%2BiWm2ZaHATeI1gfsEnK%2BQ1jyP%2FROzbzDV0AyJHR4YQfBetXSRipyrYCFn%2BNdA%2FA8Mv80riS3cuMVJi%2BAFgCpXTiHBNHE%3D; WM_NIKE=9ca17ae2e6ffcda170e2e6ee84b674afedfbd3cd7d98b8e1d0f554f888a4abc76990b184badc4f89e7af8ece2af0fea7c3b92a91eba9b7ec738e8abdd2b741e986a1b7e87a8595fadae648b0b3bc8fcb3f8eafb69acb69818b97ccec5dafee9682cb4b98bb87d2e66eb19ba2acaa5bf3b6b7b1ae5a8da6ae9bc75ef49fb7abcb5af8879f87c16fb8889db3ec7cbbae97a4c566e992aca2ae4bfc93bad9b37aab8dfd84f8479696a7ccc44ea59dc0b9d7638c9e82a9c837e2a3; JSESSIONID-WYYY=sHwCKYJYxz6ODfURChA471BMF%5CSVf3%5CTc8Qcy9h9Whj6CfMxw4YWTMV7CIx5g6rqW8OBv04YGHwwq%2B%5CD1N61qknTP%2Fym%2BHJZ1ylSH1EabbQASc9ywIT8YvOr%2FpMgvmm1cbr2%2Bd6ssMYXuTlpOIrKqp%5C%2FM611EhmfAfU47%5CSQWAs%2BYzgY%3A1533828139236\'\n        }\n\n    def __get_songs(self, name):\n        d = \'{\"hlpretag\":\"<span class=\\\\\"s-fc7\\\\\">\",\"hlposttag\":\"</span>\",\"s\":\"%s\",\"type\":\"1\",\"offset\":\"0\",\"total\":\"true\",\"limit\":\"30\",\"csrf_token\":\"\"}\' % name\n        wyy = WangYiYun(d)    # 要搜索的歌曲名在这里\n        data = wyy.get_data()\n        url = \'https://music.163.com/weapi/cloudsearch/get/web?csrf_token=\'\n        response = requests.post(url, data=data, headers=self.headers).json()\n        return response[\'result\']\n\n    def __get_mp3(self, id):\n        d = \'{\"ids\":\"[%s]\",\"br\":320000,\"csrf_token\":\"\"}\' % id\n        wyy = WangYiYun(d)\n        data = wyy.get_data()\n        url = \'https://music.163.com/weapi/song/enhance/player/url?csrf_token=\'\n        response = requests.post(url, data=data, headers=self.headers).json()\n        return response[\'data\'][0][\'url\']\n\n    def __download_mp3(self, url, filename):\n        if os.path.exists(_path.get() + filename + \'.mp3\'):\n            return\n        if url is None:\n            print(filename + \" haven\'t download\")\n            return\n        \"\"\"下载mp3\"\"\"\n        abspath = os.path.abspath(\'.\')  # 获取绝对路径\n        os.chdir(abspath)\n        response = requests.get(url, headers=self.headers).content\n        path = _path.get() + filename\n        with open(_path.get() + filename + \'.mp3\', \'wb\') as f:\n            f.write(response)\n            print(\'下载完毕,可以在%s   路径下查看\' % path + \'.mp3\')\n\n    def __print_info(self, songs):\n        \"\"\"打印歌曲需要下载的歌曲信息\"\"\"\n        songs_list = []\n        for num, song in enumerate(songs):\n            print(num, \'歌曲名字：\', song[\'name\'], \'作者：\', song[\'ar\'][0][\'name\'])\n            songs_list.append((song[\'name\'], song[\'id\']))\n        return songs_list\n\n    def run(self):\n        while True:\n            name = input(\'请输入你需要下载的歌曲：\')\n            songs = self.__get_songs(name)\n            if songs[\'songCount\'] == 0:\n                print(\'没有搜到此歌曲，请换个关键字\')\n            else:\n                songs = self.__print_info(songs[\'songs\'])\n                num = input(\'请输入需要下载的歌曲，输入左边对应数字即可\')\n                url = self.__get_mp3(songs[int(num)][1])\n                if not url:\n                    print(\'歌曲需要收费，下载失败\')\n                else:\n                    filename = songs[int(num)][0]\n                    self.__download_mp3(url, filename)\n                flag = input(\'如需继续可以按任意键进行搜歌，否则按0结束程序\')\n                if flag == \'0\':\n                    break\n        print(songs)\n        print(url)\n        print(songs[int(num)][1])\n        print(\'程序结束！\')\n\n    def download_a_music(self, id, filename):\n        url = self.__get_mp3(id)\n        self.__download_mp3(url, filename)\n\n\nclass WangYiYun(object):\n    def __init__(self, d):\n        self.d = d\n        self.e = \'010001\'\n        self.f = \"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5a\" \\\n                 \"a76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46be\" \\\n                 \"e255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\"\n        self.g = \"0CoJUm6Qyw8W8jud\"\n        self.random_text = self.get_random_str()\n\n    # js中的a函数\n    def get_random_str(self):\n        str = \'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\'\n        res = \'\'\n        for x in range(16):\n            index = math.floor(random.random() * len(str))\n            res += str[index]\n        return res\n\n    def aes_encrypt(self, text, key):\n        iv = \'0102030405060708\'  # 偏移量\n        pad = 16 - len(text.encode()) % 16  # 使加密信息的长度为16的倍数，要不会报下面的错\n        # 长度是16的倍数还会报错，不能包含中文，要对他进行unicode编码\n        text = text + pad * chr(pad)  # Input strings must be a multiple of 16 in length\n        encryptor = AES.new(key, AES.MODE_CBC, iv)\n        msg = base64.b64encode(encryptor.encrypt(text))  # 最后还需要使用base64进行加密\n        return msg\n\n    # ras加密\n    def rsa_encrypt(self, value, text, modulus):\n        text = text[::-1]\n        rs = int(codecs.encode(text.encode(\'utf-8\'), \'hex_codec\'), 16) ** int(value, 16) % int(modulus, 16)\n        return format(rs, \'x\').zfill(256)\n\n    def get_data(self):\n        # 这个参数加密两次\n        params = self.aes_encrypt(self.d, self.g)\n        params = self.aes_encrypt(params.decode(\'utf-8\'), self.random_text)\n        enc_sec_key = self.rsa_encrypt(self.e, self.random_text, self.f)\n        return {\n            \'params\': params,\n            \'encSecKey\': enc_sec_key\n        }\n\n\nclass CloudMusicMV(object):\n    headers = {\n        \'Host\': \'music.163.com\',\n        \'Referer\': \'https://music.163.com/\',\n        \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0\'\n    }\n\n    def get_mv(self, url, file_name):\n        if os.path.exists(_path.get() + file_name + \'.mp4\'): return\n        headers = {\n            \'User - Agent\': \'Mozilla / 5.0(Windows NT 6.1;WOW64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 55.0.2883.87 Safari / 537.36\'\n        }\n        req = requests.get(url, headers=headers)\n        if not os.path.exists(_path.get()):\n            os.makedirs(_path.get())\n        os.chdir(_path.get())\n        with open(file_name+\'.mp4\', \'wb\') as file:\n            file.write(req.content)\n            file.close()\n        print(file_name+\' download ok\')\n\n    def get_msg(self, id):\n        req = requests.get(\'http://music.163.com/mv?id=\' + id, headers=self.headers)\n        html = etree.HTML(req.text)\n        file_name = html.xpath(\'//a[@id=\"j-sharedata\"]/@data-name\')[0]\n        url = html.xpath(\'//meta[@property=\"og:video\"]/@content\')[0]\n        url = urllib.parse.unquote(url)  # url解码\n        print(url)\n        return url, file_name\n\n    def get_mv_id(self, song_id):\n        req = requests.get(\'https://music.163.com/song?id=\' + song_id, headers=self.headers)\n        mv_ids = etree.HTML(req.text).xpath(\'//a[@title=\"播放mv\"]/@href\')\n        return mv_ids\n\n\ndef download():\n    url = entry.get()\n    new_url = url.replace(\'/#\', \'\')\n\n    header = {\n        \'Host\': \'music.163.com\',\n        \'Referer\': \'https://music.163.com/\',\n        \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0\'\n    }\n\n    res = requests.get(new_url, headers=header).text\n\n    r = BeautifulSoup(res, \"html.parser\")\n    music_dict = {}\n    result = r.find(\'ul\', {\'class\', \'f-hide\'}).find_all(\'a\')\n    spider = Spider()\n    cloudMusicMV = CloudMusicMV()\n    for music in result:\n        music_id = music.get(\'href\').strip(\'/song?id=\')\n        music_name = music.text\n        music_dict[music_id] = music_name\n    for song_id in music_dict:\n        msg[\"text\"] = \"正在下载音乐：%s\" % music_dict[song_id]\n        msg.update()\n        # 添加数据\n        spider.download_a_music(song_id, music_dict[song_id])\n        text.insert(END, \"音乐下载完成：%s\" % music_dict[song_id])\n        text.see(END)\n        text.update()\n        mv_ids = cloudMusicMV.get_mv_id(song_id)\n        if len(mv_ids) is not 0:\n            msg[\"text\"] = \"正在下载MV：%s\" % music_dict[song_id]\n            msg.update()\n            url, file_name = cloudMusicMV.get_msg(mv_ids[0][7:])\n            cloudMusicMV.get_mv(url, file_name)\n            text.insert(END, \"MV下载完成：%s\" % music_dict[song_id])\n            text.see(END)\n            text.update()\n\n\nroot = Tk()\nroot.title(\"网易云音乐及MV整合下载器——七仔\")\nroot.geometry(\"410x650+550+100\")\nlabel = Label(root, text=\"歌单URL\", font=(\'宋体\', 12))\nlabel.grid()\nentry = Entry(root, font=(\'微软雅黑\', 12))\nentry.grid(row=0, column=1, sticky=E+W)\nlabel = Label(root, text=\"下载路径\", font=(\'宋体\', 12))\nlabel.grid(row=1, column=0)\n_path = Entry(root, font=(\'微软雅黑\', 12))\n_path.grid(row=1, column=1, sticky=E+W)\nmsg = Label(root, text=\"未进行下载\", font=(\'宋体\', 12))\nmsg.grid(row=2, columnspan=2)\ntext = Listbox(root, font=(\"微软雅黑\", 12), width=45, height=23)\ntext.grid(row=3, columnspan=2)\nbutton = Button(root, text=\"开始下载\", font=(\"微软雅黑\", 10), command=download)\nbutton.grid(row=4, column=0)\nbutton1 = Button(root, text=\"退出\", font=(\"微软雅黑\", 10), command=root.quit)\nbutton1.grid(row=4, column=1)\nmsgs = Label(root, text=\"此系统仅供个人学习、研究之用，禁止非法传播或用于商业用途，\", font=(\'宋体\', 8))\nmsgs.grid(row=5, columnspan=2)\nmsgs = Label(root, text=\"请在下载24小时内删除\", font=(\'宋体\', 8))\nmsgs.grid(row=6, columnspan=2)\n\nentry.insert(0, \'https://music.163.com/#/playlist?id=2487763362\')\n_path.insert(0, \'E:\\\\my\\\\music\\\\J·Fla\\\\\')\n\nmainloop()\n```', '通过网易云API，根据歌单的ID即可下载全部歌曲，如果歌曲绑定了MV将会同时下载MV', '2019-04-11 16:06:20', '2021-01-11 15:07:55'), (7, '1101', 8, '部署个人网站步骤', 'https://media.baby7blog.com/Fgh-tWBmqrtB2BqO4J9nQzuk-rkH', '> # 部署个人网站步骤\n\n## 一、 让别人可以访问到你的网站\n\n#### （一）、首先你得租个服务器\n\n#### （二）、购买域名的同时顺便可以买个解析，不贵\n\n#### （三）、配置解析到你的ESC外网IP（在安全组打开80端口）\n\n<font color=red>【记录类型为A，主机记录填www，记录值填服务器外网IP，其余默认就行】</font>\n\n#### （四）、网站ICP备案，填写你的信息和网站信息\n\n<font color=red>【域名实名认证完成后，实名认证信息需要3-5个工作日入库（进入管局的数据库）。建议完成域名实名认证后，不要马上提交资料至管局审核，建议3-5个工作日后再提交订单。】</font>\n\n<font color=red>【个人网站命名要求：https://help.aliyun.com/knowledge_detail/36957.html】</font>（可能需要用到手机端的APP，拍照、证件照、从网站下载《个人网站备案承诺书》打印并填写信息拍照上传），大约一天内会有你购买域名的公司客服给你打电话，有错误就修改再次提交，没有错误人家就提交到所在地通信管理局，之后需要等挺久（二十天以内？），在这之前先把项目安装了。\n\n#### （五）、版权问题，不要使用未授权的字体、图片、肖像等。<font color=red>【微软雅黑需要商业授权】</font>[http://fonts.safe.360.cn/](http://fonts.safe.360.cn/)可以查询字体版权（不太全）\n\n#### （六）、在ICP备案完成后需要进行公安备案。\n\n## 二、 安装项目\n\n#### （一）、安装持久化数据库（MySQL、Oracle等），缓存数据库（Redis等）<font color=red>【确认项目的数据库密码和新数据库密码是否一致】</font>\n\n#### （二）、部署数据（例如运行SQL文件）\n\n#### （三）、安装JDK（确认版本，配置环境变量）\n\n#### （四）、安装服务器（Tomcat、Nginx等）\n\n#### （五）、将项目打成war包放在Tomcat的webapp文件夹下\n\n#### （六）、修改路径（Tomcat下conf文件夹的server.xml）<font color=red>【可以从访问时URL需要填写域名或IP/项目缩减到只用域名或IP】</font>\n\n1、修改tomcat http端口为80（因为默认是80端口，访问时可以不写）\n\n```xml\n<Connector port=\"80\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\"  URIEncoding=\"UTF-8\"/>\n```\n\n2、去除访问时的项目名\n\n在 <Host>  </Host>节点下增加一行\n\n```xml\n<Context path=\"\" docBase=\"../webapps/**\" debug=\"0\" reloadable=\"true\" />\n```\n\ndocBase：代表项目的绝对路径。也可以使用相对路径，<font color=red>**处填你的项目名</font>。\n\npath：代表访问时的项目名称,path留空代表访问域名后面不需要带项目的名称\n\ndebug是设定debug level, 0表示提供最少的信息，9表示提供最多的信息\n\n#### （七）、双击Tomcat bin文件夹下的startup.bat运行服务器\n\n## 三、在备案未完成之前可以输入ESC服务器外网IP进行访问\n\n自己整理的部署网站时的一些步骤，可能不太全，如果发现有错误或缺少步骤请与我联系，不要让别人被我带沟里。。。', '自己整理的部署网站时的一些步骤，可能不太全，如果发现有错误或缺少步骤请与我练习，不要让别人被我带沟里。。。', '2019-04-12 16:36:32', '2021-01-11 02:38:54'), (8, '1100', 17, '代码高亮插件：SyntaxHighlighter的简单使用', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555130191429019056.png', '> # 代码高亮插件：SyntaxHighlighter的简单使用\n\n![SyntaxHighlighter](https://media.baby7blog.com//ueditor/jsp/upload/image/20190413/1555130472790073738.png)\n\n## 一、 引入CSS文件\n\n![css文件列表](https://media.baby7blog.com//ueditor/jsp/upload/image/20190413/1555130191429085934.png)\n\n其中shCore.css是必须引用的，shCoreDefault.css和shThemeRDark.css是单选，是插件的效果比如暗风格和亮风格，当然还有其他的，可以去下。\n\n## 二、 引入JS文件\n\n![js文件列表](https://media.baby7blog.com//ueditor/jsp/upload/image/20190413/1555130191429019056.png)\n\n其中shAutoloader.js是必须引用的，其他的是多选，主要看你加载的页面有哪些代码。\n\n## 三、 有代码区的网页\n\n```html\n<pre class=\"brush:js;\">\n    alert(\"hello world\");\n</pre>\n```\n\n## 四、 SyntaxHighlighter的启动\n\n### （一）、一般使用\n\n```javascript\nSyntaxHighlighter.all();\n```\n\n### （二）、动态加载时\n\n```javascript\nSyntaxHighlighter.highlight();\n```\n\n## 五、 SyntaxHighlighter官网地址：\n[http://alexgorbatchev.com/SyntaxHighlighter](http://alexgorbatchev.com/SyntaxHighlighter)\n\n对了，双击代码区可以全选代码，之后可以复制', 'SyntaxHighlighter是一款代码高亮插件，支持多种语言、多种主题', '2019-04-13 12:39:05', '2021-01-11 02:39:20'), (9, '1100', 11, 'Juicer模板引擎', 'https://static.npmjs.com/58a19602036db1daee0d7863c94673a4.png', '> # Juicer模板引擎\n\n## 介绍：\n\nJuicer 是一个高效、轻量的前端 (Javascript) 模板引擎，使用 Juicer 可以是你的代码实现数据和视图模型的分离(MVC)。前端可以根据后台传回的json格式数据对网页进行渲染，速度也挺快。\n\n## 官网中文文档（很简洁易懂，非常好）：\n\n[https://www.npmjs.com/package/juicer](https://www.npmjs.com/package/juicer)\n\n由于是个Javascript模板引擎，所以很多东西得异步渲染，需要注意，例如SyntaxHighlighter这个我踩了个坑，第一次没出来就是因为没有异步加载。\n\n---\n\n我是分割线\n\n---\n\n崩了崩了！！！我不知道原来百度抓取一般不支持js生成的内容，我测试百度抓取结果抓取的是Juicer的代码，里面没有内容。这前后端分离做的舒舒服服的突然告诉我百度不能抓，难受了，没有解决办法的话只能改后端模板引擎了，转静态页面。', 'Juicer 是一个高效、轻量的前端 (Javascript) 模板引擎，使用 Juicer 可以是你的代码实现数据和视图模型的分离(MVC)', '2019-04-13 12:49:53', '2021-01-11 02:38:39'), (10, '1109', 10, '推荐的工具及网站', 'https://media.baby7blog.com/FkUCkNodSBEUIVu0m-KsHT6-hGWU', '> # 推荐的工具及网站\n\n### ___此文章会不定时更新，主要是推荐一些可能大家没用过的好用的工具或网站。___\n\n## 网站：\n\n<font size=5 color=#FF0000>ProcessOn</font>：ProcessOn是一个在线作图工具的聚合平台，它可以在线画流程图、思维导图、UI原型图、UML、网络拓扑图、组织结构图等等，您无需担心下载和更新的问题，不管Mac还是Windows，一个浏览器就可以随时随地的发挥创意，规划工作\n\n[https://www.processon.com](https://www.processon.com)\n\n我博客的一些图就是用这个做的：\n\n![博客架构图](https://media.baby7blog.com//ueditor/jsp/upload/image/20190504/1556973653639086488.png)\n\n<font size=5 color=#FF0000>ShowDoc</font>：一个非常适合IT团队的在线API文档、技术文档工具。可以用LandMark编辑技术文档、API文档等，很方便。\n\n[https://www.showdoc.cc](https://www.showdoc.cc)\n\n\n<font size=5 color=#FF0000>小森林搜索</font>：整合了影视、学术、图片、数据、电子书、BT、网盘等多种搜索引擎(似乎挂了)\n\n[http://hao.xsldh.com/search](http://hao.xsldh.com/search)\n\n## 工具：\n\n<font size=5 color=#FF0000>Stylus</font>：谷歌浏览器（Chrome）的一款插件，可以更改网页网页样式，也可以使用别人上传的样式，对常用网站有支持，例如百度、B站等。比如这样：\n\n![Stylus B站](https://media.baby7blog.com//ueditor/jsp/upload/image/20190505/1557010103067017180.png)\n\n这样：\n\n![Stylus 百度](https://media.baby7blog.com//ueditor/jsp/upload/image/20190505/1557010206724059592.png)\n\n<font size=5 color=#FF0000>天若OCR文字识别</font>：可以快捷键截屏识别文字，经常用到。\n\n<font size=5 color=#FF0000>TrafficMonitor</font>：可以显示CPU、内存、流量信息的小工具，可以放在桌面或者任务栏，我喜欢把这个放在任务栏，看着挺舒服。下面是截图：（我任务栏在左边）\n\n![TrafficMonitor](https://media.baby7blog.com//ueditor/jsp/upload/image/20190505/1557010511476001498.png)', '自己推荐的一些工具和网站，因为觉得用着挺好所以推荐给大家。（不定时更新）', '2019-04-13 15:20:17', '2021-01-12 02:53:57'), (11, '1109', 32, '帮助到我的文章及博客', 'https://media.baby7blog.com/FqGSq4663w9hOHUB8Cwo9YUzjV2_', '> # 帮助到我的文章及博客\n\n## 树莓派：\n\n> [把树莓派系统安装到U盘或移动硬盘上](http://www.nrjs.cn/ctt/11120021.html)\n> [树莓派安装OpenCV3完整过程](https://blog.csdn.net/wjycgl/article/details/55509480)\n\n## Python：\n> [lxml安装后无法import到etree模块](https://blog.csdn.net/klordy_123/article/details/82949757)\n> [如何下载网络视频.ts文件并且合并](https://www.jianshu.com/p/53f5fd4aa671)\n> [python多线程下载ts文件](http://www.cnblogs.com/chenlove/p/9518612.html)\n\n## C#：\n\n> [c# winform 窗口 拆分多个源代码文件](https://blog.csdn.net/c_fangfujiang/article/details/55504427)\n> [使用WinForm Chart控件 制作饼装，柱状，折线图](https://blog.csdn.net/dream2050csdn/article/details/53510340)\n> [c# excel转PDF](https://blog.csdn.net/chenqiangdage/article/details/20408731)\n> [c# listview导出excel文件](https://blog.csdn.net/hws1058648831a/article/details/9136317)\n\n## Java：\n\n> [使用idea2017搭建SSM框架](https://www.cnblogs.com/hackyo/p/6646051.html)\n> [Java实现注册邮箱激活验](https://blog.csdn.net/kenhins/article/details/17588019)\n> [如何让一段代码在 tomcat 启动时就被运行？](http://www.cnblogs.com/Payne-Wang/archive/2013/04/01/loadOnTomcatStartup.html)\n> [Intellij IDEA 中添加自定义代码提示](https://blog.csdn.net/liumengwei1/article/details/84304912)\n> [使用Jedis操作redis](https://www.cnblogs.com/relucent/p/4203190.html)\n> [springmvc文件上传下载简单实现案例(ssm框架使用)](https://blog.csdn.net/wjycgl/article/details/55509480)\n\n## JavaScript：\n\n> [针对文字加密的简单 JS 加密算法 --进制乱序法改良版](https://rubel.iteye.com/blog/904426)', '整理了一些帮助到我的文章及博客，因为确实帮到了我，所以想分享给大家', '2019-04-13 15:38:42', '2021-01-11 02:39:07'), (12, '1100', 18, 'UEditor的使用及Word的导入', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190504/1556972824317046630.png', '> # UEditor的使用及Word的导入\n\n## 介绍:\n\nUEditor是由百度web前端研发部开发所见即所得富文本web编辑器，具有轻量，可定制，注重用户体验等特点，开源基于MIT协议，允许自由使用和修改代码…\n\n## 网站：\n\n[https://ueditor.baidu.com/website/index.html](https://ueditor.baidu.com/website/index.html)\n\n## 版本：\n\n分为UEditor和UMeditor两个版本，UEditor是功能齐全的版本，UMeditor是简化版。此处提供一个封装UEditor后多了Word导入的版本（不是我写的，我在CSDN上找到的，只要1积分）：\n\n[https://download.csdn.net/download/thfengyuan/10567799](https://download.csdn.net/download/thfengyuan/10567799)\n\n## 安装：\n\n1、 将ueditor放入你的项目中\n\n2、 使用时引用\n\n```html\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"ueditor.config.js\"></script>\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"ueditor.all.js\"> </script>\n<!--建议手动加在语言，避免在ie下有时因为加载语言失败导致编辑器加载失败-->\n<!--这里加载的语言文件会覆盖你在配置项目里添加的语言类型，比如你在配置项目里配置的是英文，这里加载的中文，那最后就是中文-->\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"lang/zh-cn/zh-cn.js\"></script>\n```\n\n3、 然后对\n\n```html\n<script id=\"editor\" type=\"text/plain\"></script>\n```\n\n进行实例化：\n\n```javascript\nvar ue = UE.getEditor(\'editor\');\n```\n\n4、 修改jsp路径下的config.json文件，修改imageUrlPrefix为/加你的项目名\n\n![配置](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555142356669027709.png)\n\n4、 导入响应jar包或配置Maven，这个好像高版本需要jaxp的四个jar包，这是下载地址：\n\n[https://download.csdn.net/download/xuqiaojun210/2317769](https://download.csdn.net/download/xuqiaojun210/2317769)\n\n我以前下过，然后删了，然后csdn上面再下载居然还需要重新用积分下载。。。小伙伴们用积分下载了的东西不要删啊。。。\n\n运行截图：\n\n![截图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555142652698072373.png)', 'UEditor是一个富文本编辑器，这个集成word导入的更是方便（图片也可以导入）', '2019-04-13 16:02:01', '2021-01-11 07:49:09'), (13, '1107', 36, '六种设计模式结合的Java绘图板', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146348750008778.png', '> # 六种设计模式结合的Java绘图板\n\n## 部分截图：\n\n![主界面](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146348750008778.png)\n\n![保存文件](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146348750053601.png)\n\n![编辑颜色](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146348750054405.png)\n\n## 功能实现：（截图在功能区）\n\n1. 用户可以选择颜色、线型，或图形，绘制图形\n\n2. 也可以擦除所绘制的图形。\n\n3. 还可以输入文本信息等\n\n4. 用户绘制好的图形可以保存到文件，也可以读取文件中的图形 显示在界面上\n\n5. 提供撤销和重做功能\n\n### 1. 应用场景：\n\n绘图板实现铅笔、画刷、取色器、喷枪、橡皮、直线、多边形、矩形、椭圆、圆角矩形、打字的功能，实现了颜色选择，实现了撤销和重做，实现了图片保存、读取等功能。\n\n### 2. 设计模式：\n\n工厂模式、备忘录模式、单例模式、模板模式、迭代器模式、状态模式。\n\n1. 工厂模式：实现工具栏的各个工具。\n\n2. 备忘录模式：实现撤销和重做。\n\n3. 单例模式：确保只有一个备忘录的状态列表。\n\n4. 模板模式：创建颜色选择面板和工具栏面板。\n\n5. 迭代器模式：简化文件过滤器。\n\n6. 状态模式：实现菜单栏的撤销和重做的是否禁用。\n\n### 3. 实现代码：\n\n代码由java语言实现。\n\n## 一、需求分析\n\n&ensp;&ensp;&ensp;&ensp;工厂模式是一种创建型设计模式，采用工厂模式通过面向对象的手法，将所要创建的具体对象的创建工作延迟到了子类，从而提供了一种扩展的策略，较好的解决了这种紧耦合的关系。通过定义十一个具体工具的类来实现工具栏的各个功能。备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。该模式主要实现撤销和重做。单例模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。单例模式主要解决保证历史纪录的唯一性，节省内存。定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。此模式主要解决创建面板代码的复用问题。迭代器设计模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。该模式用来简化文件过滤器。对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。该模式用来实现控制菜单栏的撤销重做的是否禁用。\n\n## 二、设计模式类图\n\n根据需求分析，绘图板可以采用了六种设计模式，分别是工厂模式、备忘录模式、单例模式、模板模式、迭代器模式和状态模式。\n\n### 类图\n\n![类图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146367953015153.png)\n\n### （1） 工厂模式\n\n工厂模式是一种创建型设计模式，采用工厂模式通过面向对象的手法，将所要创建的具体对象的创建工作延迟到了子类，从而提供了一种扩展的策略，较好的解决了这种紧耦合的关系。通过定义十一个具体工具的类来实现工具栏的各个功能。模式类图如图2-1：\n\n![工厂模式](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146367953083480.jpeg)\n\n![工厂模式具体](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146367953051283.png)\n\n图2-1 工厂模式类图\n\n### （2）备忘录模式\n\n所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。该模式主要实现撤销和重做。模式类图如图2-2：\n\n![备忘录模式](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146367953081955.jpeg)\n\n![备忘录具体](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146367953099714.png)\n\n图2-2（b）备忘录模式类图\n\n### （3） 单例模式\n\n单例模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。单例模式主要解决保证历史纪录的唯一性，节省内存。模式类图如图2-3：\n\n![单例模式](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146367953081248.jpeg)\n\n![单例模式具体](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146367953047242.png)\n\n图2-3 单例模式类图\n\n### （4）模板模式\n\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。此模式主要解决创建面板代码的复用问题。模式类图如图2-4：\n\n![模板模式](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146373781027714.jpeg)\n\n![模板模式具体](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146373781012256.png)\n\n图2-4（a） 模板模式类图\n\n### （5）迭代器模式\n\n迭代器设计模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。该模式用来简化文件过滤器。模式类图如图2-5。\n\n![迭代器模式](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146373781001571.jpeg)\n\n![迭代器模式具体](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146373781081726.png)\n\n图2-5迭代器模式类图\n\n### （6）状态模式\n\n对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。该模式用来实现控制菜单栏的撤销重做的是否禁用。模式类图如图2-6。\n\n![状态模式](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146373781055047.png)\n\n![状态模式具体](https://media.baby7blog.com/ueditor/jsp/upload/image/20190413/1555146373781001502.png)\n\n图2-6状态模式类图\n\n\n## 三、代码应用\n\n![代码列表1](https://media.baby7blog.com/MyBlog/ueditor/jsp/upload/image/20190413/1555146484360011012.png)\n\n![代码列表2](https://media.baby7blog.com/MyBlog/ueditor/jsp/upload/image/20190413/1555146488313013513.png)\n\n### 1. 工厂模式\n\nTool抽象一个工具类，ToolFactory类来实例一个生产工具的工厂。工厂模式主要包含： PencilTool类、BrushTool类、EraserTool类、LineTool类、RectTool类、PolygonTool类、RoundTool类、RoundRectTool类、AtomizerTool类、ColorPickedTool类、TextTool类用来实现各种工具。\n\n### 2. 备忘录模式\n\n备忘录模式使用三个类 Memento、Originator 和 CareTaker。Memento 包含了要被恢复的对象的状态。Originator 创建并在 Memento 对象中存储状态。Caretaker 对象负责从 Memento 中恢复对象的状态。最终实现撤销和重做。\n\n### 3. 单例模式\n\nCareTaker类实现了单例模式，其内部维护了一个图片列表，为了节省内存资源，使用了单例模式。\n\n### 4. 模板模式\n\n创建一个定义操作的 MyPanel抽象类，其中，模板方法设置为 final，这样它就不会被重写。ColorPanel和 ToolPanel是扩展了 MyPanel的实体类，它们重写了抽象类的方法。实现创建颜色选择面板和工具栏面板。\n\n### 5. 迭代器模式\n\n迭代器模式主要包含;迭代器角色(Iterator)，定义遍历元素所需要的方法。具体迭代器角色(ConcreteIterator)，实现迭代器接口中定义的方法，完成集合的迭代;容器角色(List)，定义集合可以进行的操作;具体容器角色(ConcreteAggregate)，就是抽象容器的具体实现类。用来简化文件过滤。\n\n### 6. 状态模式\n\n状态模式主要包含：State类(状态接口),Context类(具体环境),StartState类,MiddleState类,EndState类。用来实现菜单栏的撤销和重做的是否禁用。\n\n源码请移步CSDN下载：\n\n[https://download.csdn.net/download/weixin_35706300/11099426](https://download.csdn.net/download/weixin_35706300/11099426)', 'Java绘图板使用的设计模式有：工厂模式、备忘录模式、单例模式、模板模式、迭代器模式、状态模式', '2019-04-13 17:10:20', '2021-01-11 02:37:45');
INSERT INTO `blog` VALUES (14, '1100', 8, '音乐播放器插件', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190513/1557755571328051252.jpg', '> # 音乐播放器插件\n\n## 一代版本：\n\n来自小伟博客：http://www.mlwei.com/1440.html\n\n歌单来源：QQ音乐\n\n歌单歌手：J·Fla\n\nPS：但是似乎并不稳定，设置了不自动播放有时候进去还是自动播放。\n\n\n## 二代版本：\n\n使用APlayer作为博客的音乐播放器插件（APlayer GitHub地址：[https://github.com/MoePlayer/APlayer](https://github.com/MoePlayer/APlayer)）\n\n但是需要自己写音乐的标题、作者、播放地址、封面和歌词。我使用了python3爬取的网易云的歌单信息，但是音乐地址隔一段时间会过期，所以我写了个定时爬取歌单信息保存到.json中，博客打开时会获取这个json文件以取得歌单信息。\n\nCloudMusicList.py\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport random, math\nfrom Crypto.Cipher import AES\nimport base64\nimport codecs\nimport json\nimport time\nfrom lxml import html\n\netree = html.etree\n\n\nclass Spider(object):\n    def __init__(self):\n        self.headers = {\n                 \'User-Agent\': \'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\',\n                 \'Cookie\':\'_iuqxldmzr_=32; _ntes_nnid=8d4ef0883a3bcc9d3a2889b0bf36766a,1533782432391;\'\n                          \'ntes_nuid=8d4ef0883a3bcc9d3a2889b0bf36766a;\'\n                          \'utmc=94650624; WM_TID=GzmBlbRkRGQXeQiYuDVCfoEatU6VSsKC; playerid=19729878;\'\n                          \'utma=94650624.1180067615.1533782433.1533816989.1533822858.9;\'\n                          \'utmz=94650624.1533822858.9.7.utmcsr=cn.bing.com|utmccn=(referral)|utmcmd=referral|utmcct=/;\'\n                          \'WM_NI=S5gViyNVs14K%2BZoVerGK69gLlmtnH5NqzyHcCUY%2BiWm2ZaHATeI1gfsEnK%2BQ1jyP%2FROzbzDV0AyJ\'\n                          \'HR4YQfBetXSRipyrYCFn%2BNdA%2FA8Mv80riS3cuMVJi%2BAFgCpXTiHBNHE%3D; WM_NIKE=9ca17ae2e6ffcda1\'\n                          \'70e2e6ee84b674afedfbd3cd7d98b8e1d0f554f888a4abc76990b184badc4f89e7af8ece2af0fea7c3b92a91eb\'\n                          \'a9b7ec738e8abdd2b741e986a1b7e87a8595fadae648b0b3bc8fcb3f8eafb69acb69818b97ccec5dafee9682cb\'\n                          \'4b98bb87d2e66eb19ba2acaa5bf3b6b7b1ae5a8da6ae9bc75ef49fb7abcb5af8879f87c16fb8889db3ec7cbbae\'\n                          \'97a4c566e992aca2ae4bfc93bad9b37aab8dfd84f8479696a7ccc44ea59dc0b9d7638c9e82a9c837e2a3; JSES\'\n                          \'SIONID-WYYY=sHwCKYJYxz6ODfURChA471BMF%5CSVf3%5CTc8Qcy9h9Whj6CfMxw4YWTMV7CIx5g6rqW8OBv04YGH\'\n                          \'wwq%2B%5CD1N61qknTP%2Fym%2BHJZ1ylSH1EabbQASc9ywIT8YvOr%2FpMgvmm1cbr2%2Bd6ssMYXuTlpOIrKqp%5\'\n                          \'C%2FM611EhmfAfU47%5CSQWAs%2BYzgY%3A1533828139236\'\n        }\n\n    def __get_mp3(self, id):\n        d = \'{\"ids\":\"[%s]\",\"br\":320000,\"csrf_token\":\"\"}\' % id\n        wyy = WangYiYun(d)\n        data = wyy.get_data()\n        url = \'https://music.163.com/weapi/song/enhance/player/url?csrf_token=\'\n        response = requests.post(url, data=data, headers=self.headers).json()\n        return response[\'data\'][0][\'url\']\n\n    def download_a_music(self, id):\n        #这里的url是真实的歌词页面\n        url = \"http://music.163.com/api/song/lyric?\"+\"id=\"+str(id)+\"&lv=1&kv=1&tv=-1\"\n        html = requests.post(url)\n        json_obj = html.text\n        #歌词是一个json对象 解析它\n        j = json.loads(json_obj)\n        try:\n            lyric = j[\'lrc\'][\'lyric\']\n        except KeyError:\n            lyric = \"无歌词\"\n        url = self.__get_mp3(id)\n        return url, lyric\n\n\nclass WangYiYun(object):\n    def __init__(self, d):\n        self.d = d\n        self.e = \'010001\'\n        self.f = \"00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5a\" \\\n                 \"a76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46be\" \\\n                 \"e255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7\"\n        self.g = \"0CoJUm6Qyw8W8jud\"\n        self.random_text = self.get_random_str()\n\n    # js中的a函数\n    def get_random_str(self):\n        str = \'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\'\n        res = \'\'\n        for x in range(16):\n            index = math.floor(random.random() * len(str))\n            res += str[index]\n        return res\n\n    def aes_encrypt(self, text, key):\n        iv = \'0102030405060708\'  # 偏移量\n        pad = 16 - len(text.encode()) % 16  # 使加密信息的长度为16的倍数，要不会报下面的错\n        # 长度是16的倍数还会报错，不能包含中文，要对他进行unicode编码\n        text = text + pad * chr(pad)  # Input strings must be a multiple of 16 in length\n        encryptor = AES.new(key, AES.MODE_CBC, iv)\n        msg = base64.b64encode(encryptor.encrypt(text))  # 最后还需要使用base64进行加密\n        return msg\n\n    # ras加密\n    def rsa_encrypt(self, value, text, modulus):\n        text = text[::-1]\n        rs = int(codecs.encode(text.encode(\'utf-8\'), \'hex_codec\'), 16) ** int(value, 16) % int(modulus, 16)\n        return format(rs, \'x\').zfill(256)\n\n    def get_data(self):\n        # 这个参数加密两次\n        params = self.aes_encrypt(self.d, self.g)\n        params = self.aes_encrypt(params.decode(\'utf-8\'), self.random_text)\n        enc_sec_key = self.rsa_encrypt(self.e, self.random_text, self.f)\n        return {\n            \'params\': params,\n            \'encSecKey\': enc_sec_key\n        }\n\n\ndef music_msg(song_id, name, artist, cover):\n    spider = Spider()\n    url, lyric = spider.download_a_music(song_id)\n    lyric = lyric.replace(\'\"\', \"“\")\n    # 带歌词的歌单信息\n    music_one_json = \'{\"name\":\"\' + name + \'\",\"artist\":\"\' + artist + \'\",\"url\":\"\' + url + \'\",\"cover\":\"\' + cover + \'\",\"lrc\":\"\' + lyric + \'\"},\'\n    # 不带歌词的\n    # music_one_json = \'{\"name\":\"\' + name + \'\",\"artist\":\"\' + artist + \'\",\"url\":\"\' + url + \'\",\"cover\":\"\' + cover + \'\"},\'\n    return music_one_json\n\n\ndef get_music_json():\n    url = \'https://music.163.com/#/playlist?id=2487763362\'\n    new_url = url.replace(\'/#\', \'\')\n    header = {\n        \'Host\': \'music.163.com\',\n        \'Referer\': \'https://music.163.com/\',\n        \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) \'\n                      \'Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0\'\n    }\n    res = requests.get(new_url, headers=header).text\n    r = BeautifulSoup(res, \"html.parser\")\n    music_dict = {}\n    result = r.find(\'ul\', {\'class\', \'f-hide\'}).find_all(\'a\')\n    for music in result:\n        music_id = music.get(\'href\').strip(\'/song?id=\')\n        music_name = music.text\n        music_dict[music_id] = music_name\n    music_json = \"[\"\n    try:\n        for song_id in music_dict:\n            music_json += music_msg(song_id, music_dict[song_id], \"J·Fla\", \"http://p4.music.126.net/79vdQ-WExvH5f_h3GvXcXQ==/109951163694979815.jpg?param=200y200\")\n    except Exception as e:\n       print(e)\n    return music_json[:-1] + \"]\"\n\n\ndef main():\n    while True:\n        music_json = get_music_json().replace(\"\\n\", \"\\\\n\")\n        with open(\'music.json\', \'w\',encoding=\'utf8\') as fw:\n            fw.write(music_json)\n        print(music_json)\n        music_json = \"\"\n        time.sleep(600)  # 十分钟更新一次\n\n\nif __name__ == \'__main__\':\n    main()\n```\n\n会发现我偷了个懒，歌曲的演唱者一直没变，实际上这整个歌单全都是J·Fla小姐姐一个人唱的\n\n后来我发现在服务器上爬虫挺占CPU的。。。毕竟服务器不怎么好，有时间得改一改\n\n![CPU负载图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557669625683028526.png)\n\n## 现版本：\n\n由于上个版本非常占CPU，所以放弃，究其原因是为了防止过期所以定时爬取更新音乐播放链接，这个方法不可取，但是又不能在服务器上去播放音乐，毕竟服务器的带宽也不怎么宽裕。\n\n一个办法是将静态音乐文件放在七牛云存储上，七牛云的速度比我的服务器快多了，带宽也大。\n\n具体的操作是：\n\n> 1.修改上版本代码将音乐文件下载到本地\n\n> 2.将音乐上传到七牛云的对象空间\n\n> 3.修改上版本代码生成一个包含歌词等信息的JSON文件放在七牛云/服务器，此处要注意将音乐播放地址改为七牛云的音乐外链\n\n结束，消除了定时爬取音乐链接的CPU消耗，也没有增加对服务器的带宽占用，满意\n![满意](http://img.baidu.com/hi/jx2/j_0003.gif)', '这款播放器界面简洁优雅，功能强大，直接调用QQ音乐歌曲或歌单ID自动加载歌曲列表', '2019-04-13 17:29:55', '2021-01-11 02:37:19'), (15, '1101', 17, '在SSM中使用Redis实现高并发抢座', 'https://static.open-open.com/news/uploadImg/20160618/20160618093614_122.png', '> # 在SSM中使用Redis实现高并发抢座\n\n## 一、 Redis的配置\n\nMaven配置：\n\n```xml\n<!-- Redis -->\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>2.9.0</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.data</groupId>\n    <artifactId>spring-data-redis</artifactId>\n    <version>1.8.4.RELEASE</version>\n</dependency>\n```\n\nspring-redis.xml配置文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:cache=\"http://www.springframework.org/schema/cache\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\n                        http://www.springframework.org/schema/context\n                        http://www.springframework.org/schema/context/spring-context-4.2.xsd\n                        http://www.springframework.org/schema/cache\n                        http://www.springframework.org/schema/cache/spring-cache-4.2.xsd\">\n \n \n    <!-- 加载Properties文件 -->\n    <bean id=\"redisProperties\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n        <property name=\"locations\">\n            <list>\n                <value>classpath:redis.properties</value>\n            </list>\n        </property>\n        <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\" />\n    </bean>\n \n    <!-- redis 相关配置 -->\n    <bean id=\"poolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n        <property name=\"maxIdle\" value=\"$ {redis.maxIdle}\" />\n        <property name=\"maxWaitMillis\" value=\"$ {redis.maxWait}\" />\n        <property name=\"testOnBorrow\" value=\"$ {redis.testOnBorrow}\" />\n    </bean>\n \n    <bean id=\"jedisConnectionFactory\" class=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"\n          p:host-name=\"$ {redis.host}\" p:port=\"$ {redis.port}\" p:password=\"$ {redis.pass}\" p:pool-config-ref=\"poolConfig\"/>\n \n    <bean id=\"redisTemplate\" class=\"org.springframework.data.redis.core.StringRedisTemplate\">\n        <property name=\"connectionFactory\" ref=\"jedisConnectionFactory\"/>\n        <!-- 序列化方式 建议key/hashKey采用StringRedisSerializer。 -->\n        <property name=\"keySerializer\">\n            <bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\"/>\n        </property>\n        <property name=\"hashKeySerializer\">\n            <bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\"/>\n        </property>\n        <property name=\"valueSerializer\">\n            <bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n        </property>\n        <property name=\"hashValueSerializer\">\n            <bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\"/>\n        </property>\n    </bean>\n \n</beans>\n```\n\nredis.properties文件：\n\n```properties\n# Redis settings\n# server IP\nredis.host=127.0.0.1\n# server port\nredis.port=6379\n# server pass\nredis.pass=\n# use dbIndex\nredis.database=0\n# 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例\nredis.maxIdle=300\n# 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间(毫秒)，则直接抛出JedisConnectionException；\nredis.maxWait=3000\n# 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的\nredis.testOnBorrow=true\n# 编码\nredis.charset=GBK\n```\n\n## 二、 在服务器启动前加载用户信息到Redis\n\n### （一）、此处实现了在服务器启动之前先加载用户信息到Redis，这里提供实现方法：\n\n1.新建初始化类并完成加载代码\n\n```java\nimport javax.servlet.http.HttpSessionEvent;\nimport javax.servlet.http.HttpSessionListener;\n \npublic class Init implements HttpSessionListener {\n \n    static {\n        //此处是你需要提前运行的代码\n    }\n \n    @Override\n    public void sessionCreated(HttpSessionEvent arg0) {}\n \n    @Override\n    public void sessionDestroyed(HttpSessionEvent arg0) {}\n}\n```\n\n2.在web.xml配置类路径\n\n```xml\n<listener>\n        <listener-class>edu.options.init.Init</listener-class>\n</listener>\n```\n\n## （二）、实现思路\n\n### 一、使用JDBC查询用户信息的用户名密码/密码MD5值（两个字段可以作为键值），此处不再赘述。\n\n### 二、使用Jedis加载到Redis（此处提供简单的操作）：\n\n```java\ntry {\n    // 连接Redis\n    Jedis jedis = new Jedis(\"127.0.0.1\", 6379);\n    // 清空Redis\n    jedis.flushAll();\n    for (int i = 1; i <= SEAT_SIZE; i++) {\n        jedis.hset(\"options_\" + i, \"stock\", \"1\");\n        jedis.hset(\"options_\" + i, \"unit_amount_\" + i, \"1\");\n    }\n    jedis.hset(\"options_all\", \"all\", SEAT_SIZE + \"\");\n    // 获取学生信息并存储到Redis\n    Map<String, String> numberAndNames = getStudents();\n    Set<String> s = numberAndNames.keySet();\n    for(String number : s){\n        // 根据得到的键，获取对应的值\n        String name = numberAndNames.get(number);\n        jedis.hset(number, \"DNUI\", name);\n    }\n    // 从resource/time.txt将抢座时间加载到Redis\n    String[] times = Tools.getFile(\"resource/time.csv\").split(\",\");\n    jedis.hset(\"startTime\", \"TIME\", times[0]);\n    jedis.hset(\"endTime\", \"TIME\", times[1]);\n    jedis.hset(\"createTime\", \"TIME\", times[2]);\n} catch (Exception e) {\n    e.printStackTrace();\n}\n```\n\n 这里我存储的是学生学号及姓名。\n\n## 三、具体调用\n\n### （一）、此处实现了从resources文件夹出导入Lua脚本，这样可以方便编辑并可以方便以后的改动。这里提供一个函数，可以实现从资源文件夹加载文件（部署到服务器上也可以受用）：\n\n```java\n/**\n* 获取资源文件\n* @param fileName 文件名\n* @return 文件内容\n*/\npublic static String getFile(String fileName){\n    InputStream inputStream = Tools.class.getClassLoader().getResourceAsStream(fileName);\n    ByteArrayOutputStream result = new ByteArrayOutputStream();\n    byte[] buffer = new byte[1024];\n    int length;\n    String str = \"\";\n    try {\n        if (inputStream != null) {\n            while ((length = inputStream.read(buffer)) != -1) {\n                result.write(buffer, 0, length);\n            }\n            inputStream.close();\n            str = result.toString(StandardCharsets.UTF_8.name());\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return str;\n}\n```\n\n使用时可以这样获取Lua代码：\n\n```java\nString luaCode = getFile(“resource/options.lua”);\n```\n\n### （二）、Lua文件的编写：\n\n```lua\nlocal listKey = \'options_list_\'..KEYS[1]\nlocal options = \'options_\'..KEYS[1]\nlocal stock = tonumber(redis.call(\'hget\', options, \'stock\'))\nif stock <= 0 then return 0 end --没有座位或座位已被抢完\nstock = stock -1\nredis.call(\'hset\', options, \'stock\', tostring(stock))\nredis.call(\'rpush\', listKey, ARGV[1])\nlocal all = tonumber(redis.call(\'hget\', \'options_all\', \'all\'))\nall = all -1\nredis.call(\'hset\', \'options_all\', \'all\', tostring(all))\nif all == 0 then return 2 end --成功抢座并且座位已被抢空\nreturn 1\n```\n\n这是我参考一个抢票系统改的，有不足请指出\n\n### （三）、Lua文件的使用：\n\n```java\n@Autowired\nprivate RedisTemplate redisTemplate;\n// 加载Lua脚本\nprivate static final String SCRIPT = Tools.getFile(\"lua/options.lua\");\n// 在缓存LUA脚本后，使用该变量保存Redis返回的32位的SHA1编码，使用它去执行缓存的LUA脚本\nprivate String SHA1 = null;\npublic String options(long seatNumber, long number){\n    String args = number + \"-\" + System.currentTimeMillis();\n    Long result;\n    // 获取底层Redis操作对象\n    Jedis jedis = (Jedis) redisTemplate.getConnectionFactory().getConnection().getNativeConnection();\n    try {\n        // 如果脚本没有加载过，那么进行加载，这样就会返回一个sha1编码\n        if (SHA1 == null) {\n            SHA1 = jedis.scriptLoad(SCRIPT);\n        }\n        // 执行脚本，返回结果\n        Object res = jedis.evalsha(SHA1, 1, seatNumber + \"\", args);\n        result = (Long) res;\n        if(result == 2){\n            // 设置结束时间为当前时间\n            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n            String nowTime = format.format(new Date());\n            jedis.hset(\"endTime\", \"TIME\", nowTime);\n            // 保存数据到数据库\n            this.redisOptionsService.saveRedisOptions();\n        }\n        if(result > 0){\n            // 删除Redis列表\n            jedis.del(number + \"\");\n            SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SSS\");// 设置日期格式\n            System.out.println(\n                    \"学号为\" + number + \"的同学在\" + df.format(new Date()) + \"的时间抢到\" + seatNumber + \"座位\");\n            return \"成功占据座位\";\n        }\n    } finally {\n        // 确保jedis顺利关闭\n        if (jedis != null && jedis.isConnected()) {\n            jedis.close();\n        }\n    }\n    return \"此座位已被占据\";\n}\n```\n\n### （四）、抢座完成后的保存：可以看到当抢座完成后会调用this.redisOptionsService.saveRedisOptions();进行数据持久化存储。\n\n这里是大部分实现代码：\n\n```java\n@Autowired\nprivate RedisTemplate redisTemplate = null; // RedisTemplate工具类\n@Async\npublic void saveRedisOptions(){\n    System.err.println(\"开始保存数据\");\n    Long start = System.currentTimeMillis();\n    List<Seat> seatList = new ArrayList<>();\n    for (long i = 1; i <= SEAT_NUM; i++) {\n        seatList.add(getSeatByRedis(i));\n    }\n    int count = executeBatch(seatList);\n    Long end = System.currentTimeMillis();\n    System.err.println(\"保存数据结束，耗时\" + (end - start) + \"毫秒，共\" + count + \"条记录被保存。\");\n}\n\n/**\n    * 获取座位信息(单个座位信息)\n    * @param seatId 座位id\n    * @return 单个座位信息\n    */\n@SuppressWarnings(\"unchecked\")\nprivate Seat getSeatByRedis(Long seatId) {\n    // 获取列表操作对象\n    BoundListOperations ops = redisTemplate.boundListOps(PREFIX + seatId);\n    List userIdList = ops.range(0, 1);\n    // 保存红包信息\n    String args = userIdList.get(0).toString();\n    String[] arr = args.split(\"-\");\n    long numberId = Long.parseLong(arr[0]);\n    long time = Long.parseLong(arr[1]);\n    // 生成抢红包信息\n    Seat seat = new Seat();\n    seat.setSeatnumber(seatId);\n    seat.setNumber(numberId);\n    seat.setTime(new Timestamp(time));\n    User user = this.userDao.findByNumber(numberId);\n    seat.setName(user.getName());\n    seat.setDepartment(user.getDepartment());\n    seat.setSex(user.getSex());\n    return seat;\n}\n```\n\n__注意__：saveRedisOptions()前使用了@Async注解进行异步调用来不阻塞响应。\n\nexecuteBatch()是个调用数据库存储的函数。', '在SSM中使用Redis实现高并发抢座，写了大概需要的过程，大家可以借鉴借鉴', '2019-04-14 21:34:29', '2021-01-11 02:37:17'), (16, '1100', 14, '七牛云融合CDN加速', 'https://www.qiniu.com/assets/banner/banner-cdn-right-zh-fc67ff6b66e30168d1865163cb9a9294af40308741cd39d3eb8e83b40e71a82c.png', '> # 七牛云融合CDN加速\n\n## 一、介绍\n\nCDN的全称是Content Delivery Network，即内容分发网络。CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。\n\n七牛CDN是在传统CDN基础上实现的对数据网络加速进一步优化的融合管理服务。融合优质节点,可监控,智能调度,为用户提供连续,稳定快速的内容分发服务。\n\n## 二、实现方法\n\n七牛云的用户拥有10G的对象存储空间及http流量，将二级域名绑定到对象空间上，这样就可以通过二级域名访问对象存储空间的内容。设置镜像存储，源站资源（文件/图片等）根据初次访问自动同步到七牛云存储，数据平滑迁移。可使用绑定的自定义域名访问镜像存储的源站资源。(https要收费，详情见[https://www.qiniu.com/prices?source=fusion](https://www.qiniu.com/prices?source=fusion))\n\n![架构](https://media.baby7blog.com/ueditor/jsp/upload/image/20190503/1556851396656026882.png)\n\n## 三、具体实现\n\n### 1.创建对象存储空间\n\n### 2.绑定二级域名到对象存储空间（[https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name](https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name)）\n\n### 3.比如我的域名是baby7blog.com，二级域名可以是*.baby7blog.com，*处可以是一串英文，可以自己定义，然后在域名服务商处（阿里云或别的）配置域名解析，详情参见上面链接。\n\n### 4.在镜像存储中设置镜像源，比如：[http://www.baby7blog.com/](http://www.baby7blog.com/)，详情见[https://developer.qiniu.com/kodo/kb/1376/seven-cattle-image-storage-instruction-manuals](https://developer.qiniu.com/kodo/kb/1376/seven-cattle-image-storage-instruction-manuals)\n\n### 5.访问网站\n\n### 6.这时对象存储空间应该有一些资源存到了里面，再次访问的速度就会快很多。', '七牛CDN是在传统CDN基础上实现的对数据网络加速进一步优化的融合管理服务。融合优质节点,可监控,智能调度,为用户提供连续,稳定快速的内容分发服务。', '2019-05-02 07:03:16', '2021-01-11 02:39:11'), (17, '1100', 11, '在我的网站上使用Nginx', 'https://media.baby7blog.com/Fs6miUWXBT1kHs4L3cmd_yVznutS', '> # 在我的网站上使用Nginx\n\n## 一、介绍\n\nNginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好(百度百科)\n\n## 二、实现方法\n\n![架构](https://media.baby7blog.com/ueditor/jsp/upload/image/20190503/1556855092787008117.png)\n\n### 1、负载均衡方式\n\n|轮询|默认方式|\n|-|-|-|\n|weight|权重方式|\n|ip_hash|依据ip分配方式|\n|least_conn|最少连接方式|\n|fair（第三方）|响应时间方式|\n|url_hash（第三方）|依据URL分配方式|\n\n### 2、缓存\n\n为静态资源开启缓存能够较少服务器带宽的消耗。\n\n### 3、文件服务器\n\n实现动静分离。\n\n### 4、Web防火墙\n\n加固Web应用程序，抵御例如SQL侵入等攻击。\n\n### 5、SSL\n\n将合格的SSL证书配置在服务器中即可使用https访问网站。\n\n## 三、具体实现\n### 1、负载均衡方式\n\n由于我的两个Web服务器的性能并不相同，所以我选择了加权轮询的方式，就是上面列表中的权重方式。\n\n### 2、缓存\n\n缓存有很多种，要想实现网站的快速访问，缓存必不可少，Nginx默认支持缓存，在配置文件中加上路径和相应的数据即可。详情见（[https://www.jianshu.com/p/6db58cce7c8d](https://www.jianshu.com/p/6db58cce7c8d)）\n\n### 3、文件服务器\n\n我的个人网站实现了动静分离，静态资源保存在文件服务器中，静态资源分为两部分，一部分是服务器部署时就存在的文件，另一部分是我随时可能更新修改的图片。实际上使用Tomcat实现，使用Nginx的请求转发转发端口，之所以要转发是因为要实现网站全部请求为https。\n\n### 4、Web防火墙\n\n实际上由于种种原因我还没有实现，这里只是先放着，后面会加上的。\n\n### 5、SSL\n\nSSL证书配置在Nginx中，网站的入口为Nginx服务器，Nginx转发https请求为http到各个tomcat上。', 'Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强', '2019-05-03 03:48:17', '2021-01-11 02:39:09'), (18, '1101', 14, '七仔的博客架构', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190503/1556857224358060666.png', '> # 七仔的博客架构\n\n## 一、博客架构图\n\n![架构图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190503/1556857224358060666.png)\n\n## 二、具体介绍\n\n### （一）、Web服务器框架\n\n采用SSM（Spring MVC + Spring + MyBatis）的架构，整合三个框架开发\n\n#### 1、Spring \n\nSpring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。 简单来说，Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。\n\n#### 2、SpringMVC     \n\nSpring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring MVC 分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。\n\n#### 3、MyBatis\n\nMyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。MyBatis是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAO）MyBatis 消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的 XML或注解用于配置和原始映射，将接口和 Java 的POJOs（Plain Old Java Objects，普通的 Java对象）映射成数据库中的记录\n\n### （二）、数据库主主备份\n\n下面是一幅介绍MySQL主从备份过程的图：\n\n![主从备份](http://media.baby7blog.com/ueditor/jsp/upload/image/20190503/1556857759011055496.jpg)\n\n主从备份分成三步：\n\n1. master将改变记录到二进制日志(binary log)中（这些记录叫做二进制日志事件，binary log events）；\n\n2. slave将master的binary log events拷贝到它的中继日志(relay log)；\n\n3. slave重做中继日志中的事件，将改变反映它自己的数据。\n\n而主主备份就是将主从配置倒过来再配置一遍，这样便可以实现MySQL双机热备份。\n\n### （三）、七牛云融合CDN加速\n详情见（[https://www.baby7blog.com/myBlog?id=16](https://www.baby7blog.com/myBlog?id=16)）\n\n### （四）、Nginx的配置\n详情见（[https://www.baby7blog.com/myBlog?id=17](https://www.baby7blog.com/myBlog?id=17)）\n\n### （五）、UEditor的使用及Word的导入\n详情见（[https://www.baby7blog.com/myBlog?id=12](https://www.baby7blog.com/myBlog?id=12)）', '七仔的博客使用SSM架构，redis缓存，nginx负载均衡，动静分离，MySQL主主备份，CDN加速等技术，实现更快的访问网站。', '2019-05-03 04:37:45', '2021-01-12 13:47:30'), (19, '1104', 10, 'Scrapy实战：单页列表爬取', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190509/1557403517447021492.png', '> # Scrapy实战：单页列表爬取\n\npython课的作业，挺久没用Scrpay了，正好趁这个机会再熟悉熟悉。\n\n## 题目：\n\n爬取网页信息，网址为：http://47.104.173.82/neu_emotion/Home/index/showPartData.html\n\n要求：爬取信息如下图红色框内所示，包括（序号，音频编号，专家ID，专家名，感受，音频URL），根据爬取信息自行设计MySql数据库表，并将爬取信息存储数据库。\n\n## 分析：\n\n![列表截图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190509/1557403482602051022.png)\n\n![html结构截图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190509/1557403517447021492.png)\n\n通过分析可以得到列表中有几百条信息，每条信息在一个class为table  table-striped的<table>中，<table>中有七条信息，前六条是我们需要的，前四条都是相同类型的<b>，所以可以用差不多的XPath表达式，只需要更改数组的下标，第五条是在多条<option>中选择带selected的，最后是在<audio>标签中获取src属性。\n\n使用//*[@class=\"table  table-striped\"]获取这几百条<table>，然后./tbody/tr/td[1]/b/text()中更改下标可以取得前四条信息，./tbody/tr/td/select/option[@selected]/text()可以获得被选中的信息，最后./tbody/tr/td/audio/@src获取路径信息。\n\n## 过程：\n\n### 数据库设计：\n\n![数据库设计](https://media.baby7blog.com/ueditor/jsp/upload/image/20190509/1557404771167019459.png)\n\n前四个为整形，剩下三个为varchar\n\n创建Scrpay项目：\n\n```linux\n$ scrapy startproject grade\n$ cd grade\n$ scrapy genspider basic web\n```\n\n首先是items.py\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# http://doc.scrapy.org/en/latest/topics/items.html\n\nfrom scrapy.item import Item, Field\n\n\nclass GradeItem(Item):\n    Id = Field()            # 序号\n    AudioId = Field()       # 音频编号\n    ExpertId = Field()      # 专家ID\n    ExpertName = Field()    # 专家名\n    Feel = Field()          # 感受\n    AudioURL = Field()      # 音频URL\n    pass\n```\n\n爬取的信息是这六个\n\n然后是爬虫的核心：basic.py\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom grade.items import GradeItem\n\n\nclass BasicSpider(scrapy.Spider):\n    name = \"basic\"\n    allowed_domains = [\"\'web\'\"]\n    start_urls = (\n        \'http://47.104.173.82/neu_emotion/Home/index/showPartData.html\',\n    )\n\n    def parse(self, response):\n        \"\"\" This function parses a property page\n        @url http://movie.douban.com/subject/26683723\n        @return items 1\n        @scrapes name average director screenwriter star genre runtime initialReleaseDate summary\n        \"\"\"\n\n        for each in response.xpath(\'//*[@class=\"table  table-striped\"]\'):\n            item = GradeItem()\n            item[\'Id\'] = each.xpath(\"./tbody/tr/td[1]/b/text()\").extract()[0]                              # 序号\n            item[\'AudioId\'] = each.xpath(\"./tbody/tr/td[2]/b/text()\").extract()[0]                         # 音频编号\n            item[\'ExpertId\'] = each.xpath(\"./tbody/tr/td[3]/b/text()\").extract()[0]                        # 专家ID\n            item[\'ExpertName\'] = each.xpath(\"./tbody/tr/td[4]/b/text()\").extract()[0]                      # 专家名\n            item[\'Feel\'] = each.xpath(\"./tbody/tr/td/select/option[@selected]/text()\").extract()[0]        # 感受\n            item[\'AudioURL\'] = each.xpath(\"./tbody/tr/td/audio/@src\").extract()[0]                         # 音频URL\n            yield item\n```\n\n接下来是将爬取的信息保存到MySQL中：pipelines.py\n\n```python\n# -*- coding: utf-8 -*-\nimport pymysql\nfrom scrapy.conf import settings\n\n\nclass GradePipeline(object):\n    def process_item(self, item, spider):\n        host = settings[\'MYSQL_HOST\']\n        user = settings[\'MYSQL_USER\']\n        psd = settings[\'MYSQL_PASSWORD\']\n        db = settings[\'MYSQL_DB\']\n        c = settings[\'CHARSET\']\n        con = pymysql.connect(host=host, user=user, passwd=psd, db=db, charset=c)\n        cur = con.cursor()\n        sql = \"INSERT INTO test VALUES(%s,%s,%s,%s,%s,%s)\"\n        item_list = [item[\'Id\'].replace(\"序号:\", \"\"), item[\'AudioId\'].replace(\"#\", \"\").replace(\"音频编号\", \"\"),\n                     item[\'ExpertId\'].replace(\"专家ID#\", \"\"), item[\'ExpertName\'].replace(\"专家名字_\", \"\"), item[\'Feel\'],\n                     item[\'AudioURL\']]\n        cur.execute(sql, item_list)\n        con.commit()\n        cur.close()\n        con.close()\n        return item\n```\n\n其中的数据库连接信息我放在了settings.py中，后面就是个插入SQL语句，在插入之前去掉多余的信息\n\n最后是配置文件settings.py\n\n```python\nBOT_NAME = \'grade\'\n\nSPIDER_MODULES = [\'grade.spiders\']\nNEWSPIDER_MODULE = \'grade.spiders\'\n\n\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n\n# Mysql数据库的配置信息\nMYSQL_HOST = \'127.0.0.1\'\nMYSQL_DB = \'pythonscrapy\'       # 数据库名字\nMYSQL_USER = \'root\'             # 数据库账号\nMYSQL_PASSWORD = \'你自己的密码\'         # 数据库密码\nMYSQL_PORT = 3306               # 数据库端口\nCHARSET = \'utf8\'                # 格式\n\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = {\n    \"User-Agent\": \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;\",\n    \'Accept\': \'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\'\n}\n\n# Configure item pipelines\n# See http://scrapy.readthedocs.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = {\n    \'grade.pipelines.GradePipeline\': 300,\n}\n```\n\nROBOTSTXT_OBEY = False是为了不遵守爬虫协议![啦啦啦](http://img.baidu.com/hi/jx2/j_0013.gif)，后面的grade.pipelines.GradePipeline代表pipelines.py中的GradePipeline，当爬虫爬取到信息后会调用GradePipeline的process_item保存。', '爬取信息如下图红色框内所示，包括（序号，音频编号，专家ID，专家名，感受，音频URL），根据爬取信息自行设计MySql数据库表，并将爬取信息存储数据库。', '2019-05-09 12:18:48', '2021-01-11 02:39:27'), (20, '1104', 22, 'Scrapy实战：双向爬取（豆瓣电影Top250）', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190513/1557729875653001252.jpg', '> # Scrapy实战：双向爬取（豆瓣电影Top250）\n\n需要爬取的信息：豆瓣电影排行的前250名\n\n爬取网页：[https://movie.douban.com/top250](https://movie.douban.com/top250)\n\n分析：\n\nTop排行页上部分\n\n![Top排行页上部分](http://media.baby7blog.com/ueditor/jsp/upload/image/20190510/1557448496900014751.png)\n\nTop排行页下部分\n\n![Top排行页下部分](http://media.baby7blog.com/ueditor/jsp/upload/image/20190510/1557448533556001986.png)\n\n电影详情页：\n\n![Top排行页下部分](http://media.baby7blog.com/ueditor/jsp/upload/image/20190510/1557448518478076491.png)\n\n我们想爬取的信息：电影名,海报,评分,导演,编剧,主演,类型,片长,首次上映日期,简介\n\n## 思路：\n\n由于Top250页每页只有25条，另外电影信息在列表页中才有，所以需要进行双向爬取，在索引页中爬取信息是横向爬取，在分页中爬取下一页是纵向爬取。\n\n## 过程：\n\n要爬取的信息：items.py\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nfrom scrapy.item import Item, Field\n\n\nclass DoubanItem(Item):\n    # DouBan Movies\n    name = Field()                  # 电影名\n    image_url = Field()             # 海报\n    average = Field()               # 评分\n    director = Field()              # 导演\n    screenwriter = Field()          # 编剧\n    star = Field()                  # 主演\n    genre = Field()                 # 类型\n    runtime = Field()               # 片长\n    initialReleaseDate = Field()    # 首次上映日期\n    summary = Field()               # 简介\n```\n\n爬虫核心：basic.py\n\n```python\nimport scrapy\nfrom urllib.parse import urljoin\nfrom scrapy.loader import ItemLoader\nfrom douban.items import DoubanItem\nfrom scrapy.loader.processors import MapCompose, Join\nfrom scrapy.http import Request\n\n\nclass BasicSpider(scrapy.Spider):\n    name = \"basic\"\n    allowed_domains = [\"web\"]\n    start_urls = (\n        \'https://movie.douban.com/top250\',\n    )\n\n    def parse(self, response):\n        next_selector = response.xpath(\'//span[@class=\"next\"]/a/@href\')\n        for url in next_selector.extract():\n            yield Request(urljoin(response.url, url), dont_filter=True)\n\n        item_selector = response.xpath(\'//div[@class=\"hd\"]/a/@href\')\n        for url in item_selector.extract():\n            yield Request(urljoin(response.url, url), callback=self.parse_item, dont_filter=True)\n\n\n    def parse_item(self, response):\n        \"\"\" This function parses a property page\n        @url http://movie.douban.com/subject/26683723\n        @return items 1\n        @scrapes name average director screenwriter star genre runtime initialReleaseDate summary\n        \"\"\"\n\n        item_loader = ItemLoader(item=DoubanItem(), response=response)\n\n        item_loader.add_xpath(\'name\', \'//*[@property=\"v:itemreviewed\"]/text()\')                                 # 电影名\n        item_loader.add_xpath(\'image_url\', \'//*[@rel=\"v:image\"]/@src\')                                          # 海报\n        item_loader.add_xpath(\'average\', \'//*[@property=\"v:average\"]/text()\')                                   # 评分\n        item_loader.add_xpath(\'director\', \'//div[@id =\"info\"]/span[1]/span[@class=\"attrs\"]/a/text()\')           # 导演\n        item_loader.add_xpath(\'screenwriter\', \'//div[@id =\"info\"]/span[2]/span[@class=\"attrs\"]/a/text()\',\n                              Join())                                                                           # 编剧\n        item_loader.add_xpath(\'star\', \'//div[@id =\"info\"]/span[@class=\"actor\"]/span[@class=\"attrs\"]/a/text()\',\n                              Join())                                                                           # 主演\n        item_loader.add_xpath(\'genre\', \'//*[@property=\"v:genre\"]/text()\',\n                              Join())                                                                           # 类型\n        item_loader.add_xpath(\'runtime\', \'//*[@property=\"v:runtime\"]/text()\')                                   # 片长\n        item_loader.add_xpath(\'initialReleaseDate\', \'//*[@property=\"v:initialReleaseDate\"]/text()\')             # 上映年限\n        item_loader.add_xpath(\'summary\', \'//*[@property=\"v:summary\"]//text()\',\n                              MapCompose(lambda i: i.replace(\' \', \'\')),\n                              MapCompose(lambda i: i.replace(\'\\n\', \'\')),\n                              MapCompose(lambda i: i.replace(\'\\u3000\', \'\')),\n                              Join())                                                                           # 简介\n\n        return item_loader.load_item()\n```\n\n可以清楚的看到双向爬取的过程：next_selector是下一页的url，item_selector是列表中每条的url跳转\n\n保存文件的：pipelines.py\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don\'t forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\n\nimport pymysql\nfrom scrapy.conf import settings\n\nclass DoubanPipeline(object):\n    def process_item(self, item, spider):\n        host = settings[\'MYSQL_HOST\']\n        user = settings[\'MYSQL_USER\']\n        psd = settings[\'MYSQL_PASSWORD\']\n        db = settings[\'MYSQL_DB\']\n        c = settings[\'CHARSET\']\n        con = pymysql.connect(host=host, user=user, passwd=psd, db=db, charset=c)\n        cur = con.cursor()\n        sql = (\"insert into movie(name, image_url, average, director, screenwriter, star, genre, runtime, initialReleaseDate, summary) \"\n             \"values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\")\n        list = [item[\'name\'], item[\'image_url\'], item[\'average\'], item[\'director\'], item[\'screenwriter\'],\n            item[\'star\'], item[\'genre\'], item[\'runtime\'], item[\'initialReleaseDate\'], item[\'summary\']]\n        cur.execute(sql, list)\n        con.commit()\n        cur.close()\n        con.close()\n        return item\n```\n\n配置文件：settings.py\n\n```python\nBOT_NAME = \'douban\'\n\nSPIDER_MODULES = [\'douban.spiders\']\nNEWSPIDER_MODULE = \'douban.spiders\'\n\n# 文件编码格式\nFEED_EXPORT_ENCODING = \'utf-8\'\n\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n#USER_AGENT = \'douban (+http://www.yourdomain.com)\'\nUSER_AGENT = \'Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0\'\n\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\nCONCURRENT_REQUESTS = 10\n\n# Mysql数据库的配置信息\nMYSQL_HOST = \'127.0.0.1\'\nMYSQL_DB = \'douban\'             # 数据库名字\nMYSQL_USER = \'root\'             # 数据库账号\nMYSQL_PASSWORD = \'你数据库的密码\'         # 数据库密码\nMYSQL_PORT = 3306               # 数据库端口\nCHARSET = \'utf8\'                # 格式\n\n\n# 当使用pipeline保存抓取内容时，需要设置相应的pipeline类\nITEM_PIPELINES = {\n    \'douban.pipelines.DoubanPipeline\': 300,\n}\n```', '爬取豆瓣电影排行的前250名，要爬取的信息有电影名,海报,评分,导演,编剧,主演,类型,片长,首次上映日期,简介', '2019-05-10 00:47:16', '2021-01-11 02:38:01'), (22, '1108', 16, '树莓派相关：MagicMirror²的安装', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190610/1560126831432033200.jpg', '> # 树莓派相关：MagicMirror²的安装\n\n![MagicMirror²](http://media.baby7blog.com/ueditor/jsp/upload/image/20190513/1557730157993018419.png)\n\n介绍：MagicMirror²是一个开源的魔镜项目，软件大概原理就是一个Web页面，然后全屏，黑色底色，硬件原理就是在原子镜后面放一个屏幕，黑色底色不透光然后就可以实现这种效果：\n\n![镜子](http://media.baby7blog.com/ueditor/jsp/upload/image/20190511/1557563146595059353.png)\n\n接下来是MagicMirror²的安装过程\n\n1.下载并安装最新的Node.js版本\n\n```linux\ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\nsudo apt install -y nodejs\n```\n\n2.克隆存储库并检查主分支\n\n```linux\ngit clone https://github.com/MichMich/MagicMirror\n```\n\n3.创建一个可用的配置：\n\n```linux\ncd MagicMirror/config\ncp config.js.sample config.js\ncd $HOME/MagicMirror\n```\n\n4.安装淘宝npm镜像，我试了很久，原生的npm似乎不能安装成功\n\n```linux\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\ncnpm install\ncnpm start\n```', 'MagicMirror²是一个开源的魔镜项目，软件大概原理就是一个Web页面，然后全屏，黑色底色，硬件原理就是在原子镜后面放一个屏幕', '2019-05-11 08:31:01', '2021-01-11 02:37:40'), (23, '1109', 14, 'Intellij IDEA插件及快捷操作分享', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557646293798067134.gif', '> # Intellij IDEA插件及快捷操作分享\n\n## 插件安装方式：\n\nCtrl+Alt+S打开Settings->Plugins->Marketlace，然后输入插件名回车\n\n## 插件：\n\n### 一、<font size=4 color=DeepSkyBlue>Background Image Plus</font>\n\n可以更改Intellij IDEA背景的插件，安装后View->Set Background Image后输入背景文件路径即可\n\n![IDEA Background Image Plus 截图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557645626407065427.png)\n\n![IDEA Background Image Plus 主界面](https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557646826236005631.png)\n\n\n### 二、<font size=4 color=DeepSkyBlue>Nyan progress bar</font>\n\n可以把进度条换成彩虹喵的插件，安装即可使用\n\n![IDEA Nyan progress bar 截图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557646087048059859.png)\n\n![IDEA Nyan progress bar 主界面](https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557646080814080272.png)\n\n### 三、<font size=4 color=DeepSkyBlue>activate-power-mode</font>或者<font size=4 color=DeepSkyBlue>Power mode II</font>\n\n曾经很流行的炸裂式编程，类似这样子，非常酷炫，但是并不建议长时间安装，这个抖起来晃的头晕![再见](http://img.baidu.com/hi/jx2/j_0008.gif)\n\n![IDEA 炸裂式编程](https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557646293798067134.gif)\n\n### 四、<font size=4 color=DeepSkyBlue>Grep Console</font>\n\n可以改变控制台日志颜色的插件，在控制台右键->Show Grep Console Statistics in Console打开Grep Console，在下方的Highlighting & Folding的Expression是选择关键字，.*表示任何字符，Backgr...表示背景色，Foregro...表示前景色\n\n![IDEA Grep Console 截图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557646520392009709.png)\n\n![IDEA Grep Console 主界面](https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557646656939015912.png)\n\n### 五、<font size=4 color=DeepSkyBlue>Lombok</font>\n\n写JavaWeb程序时经常要写Bean，虽然IDEA已经提供了快捷键添加get和set，但是还是要按很多下快捷键，而且如果Bean中的属性有更改还得删除再增加set和get，及其麻烦， Lombok则为我们解决了这些问题，使用了lombok的注解(@Setter,@Getter,@ToString,@@RequiredArgsConstructor,@EqualsAndHashCode或@Data)之后，就不需要编写或生成getter等方法，很大程度上减少了代码量，而且减少了代码维护的负担。 \n\n安装后需要在maven的pom.xml中增加依赖\n\n```xml\n<!-- Lombok注解生成set、get、toString -->\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>1.18.0</version>\n    <scope>provider</scope>\n</dependency>\n```\n\n然后在Bean前增加注解即可\n\n```java\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport java.util.Date;\n\n@Getter\n@Setter\n@ToString\npublic class User {\n\n    private long id;\n    private String email;\n    private String password;\n    private String username;\n    private String role;\n    private int status;\n    private Date regTime;\n    private String regIp;\n\n}\n```\n\n### 六、<font size=4 color=DeepSkyBlue>Key promoter X</font>\n\n可以在你用鼠标操作的时候看有没有相应的快捷键，有的话给你提示，并且统计点击了多少次，熟悉快捷键后可以关闭这个插件\n\n以前叫Key promoter，现在新版加了个X，显示的信息多了些，也更好看了\n\n### 七、<font size=4 color=DeepSkyBlue>CodeGlance</font>\n\n在VS Code里面发现的功能，后来发现IDEA中也有这个代码缩略图插件，比进度条好用![好](http://img.baidu.com/hi/jx2/j_0003.gif)\n\n![IDEA CodeGlance](https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557647903019053589.png)\n\n### 八、<font size=4 color=DeepSkyBlue>Rainbow Brackets</font>\n\n![IDEA Rainbow Brackets](https://media.baby7blog.com/ueditor/jsp/upload/image/20190512/1557648268093083392.png)\n\n一个彩色的括号插件，不只是()，xml或者html里的<>也会变成彩虹的颜色\n\n### 九、<font size=4 color=DeepSkyBlue>Translation</font>\n\n见名知其意，就是个翻译的插件，选择单词(ctrl+w快捷选择)后Ctrl+Shift+Y可以翻译，Ctrl+Shift+X可以选择再替换，我在使用的时候经常要鼠标选词，所以比较常单手使用Ctrl+Shift+X去翻译，不替换就行\n\n### 十、<font size=4 color=DeepSkyBlue>CamelCase</font>\n\n驼峰命名法插件，内置多种命名法，在选择的名字上Shift+Alt+U即可换一种命名法。\n\n### 十一、<font size=4 color=DeepSkyBlue>Maven Helper</font>\n\n可以用列表（All Dependencies as List）和树形（All Dependencies as Tree）查看Maven的包信息，还可以查看包冲突（Conflicts），在pom.xml的左下角选择Dependency Analyzer即可打开。\n\n### 十二、<font size=4 color=DeepSkyBlue>JRebel and XRebel for Intellij</font>\n\n极其强大的热部署插件，然而强大都是有代价的，JRebel是个商用软件，一般情况下价格比IDEA编译器的价格都贵。。。以前个人开发者免费，现在不给用了，只能买，有时候会打个折\n\n以前叫JRebel，现在改了名字，多了个XRebel，这个可以实时分析显示性能，不过我还没用过这个功能\n\n### 十三、<font size=4 color=DeepSkyBlue>One Dark theme</font>\n\n一个主题插件，安装后可以在setting->Appearance & Behavior->Appearance->Theme中选择新出现的主题\n\n### 十四、<font size=4 color=DeepSkyBlue>stackoverflow</font>\n\n这个插件安装后选中一段文字（比如错误信息），右键secrch stackoverflow直接就可以打开谷歌进行搜索，加快改bug效率\n\n### 十五、<font size=4 color=DeepSkyBlue>MyBatisX</font>\n\n这个插件安装后支持在Mapper类和xml文件之间跳转，可以精确到函数\n\n### 十六、<font size=4 color=DeepSkyBlue>MyBatis Log Plugin</font>\n\n可以根据日志中打印出来的Mybatis日志生成SQL语句，然后可以复制在数据库执行看看为什么出错，现在对开源版对新版本IDEA似乎兼容性不太好，有需要的可以去MyBatis Log Plugin买，一年二三十块钱\n\n### 十七、<font size=4 color=DeepSkyBlue>.ignore</font>\n\n可以在git提交时忽略不必要提交的文件\n\n### 十八、<font size=4 color=DeepSkyBlue>GenerateAllSetter</font>\n\n一键调用一个对象的所有的set方法，列出来，在填入model信息时方便很多\n\n![IDEA GenerateAllSetter](https://img-blog.csdnimg.cn/20190311101429436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjI1NTU4,size_16,color_FFFFFF,t_70)\n\n### 十九、<font size=4 color=DeepSkyBlue>String Manipulation</font>\n\n字符串转换工具，快捷键是Alt + m，可以切换规则样式（camelCase, hyphen-lowercase, HYPHEN-UPPERCASE, snake_case, SCREAMING_SNAKE_CASE, dot.case, words lowercase, Words Capitalized, PascalCase）\n\n## 快捷操作：\n\n快速补全，例如：\n\nfor循环：\n\n```java\nint n = 5;\nn.fori\n```\n\n这时候按回车即可生成\n\n```java\nint n=5;\nfor (int i = 0; i < n; i++) {\n    \n}\n```\n\nforeach循环：\n\n```java\nint[] a = {};\na.for\n```\n\n这时候按回车即可生成\n\n```java\nint[] a = {};\nfor (int i : a) {\n    \n}\n```\n\n', '几个Intellij IDEA插件和快捷操作的分享，后续我如果再遇到好的插件或学习到快捷操作会再更新', '2019-05-12 08:11:54', '2021-01-11 17:26:09'), (24, '1100', 16, '炫酷的博客背景', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190514/1557845162323072001.png', '> # 炫酷的博客背景\n\n看看博客周围，游动的点连成线，构成一幅动态的背景![努力](http://img.baidu.com/hi/jx2/j_0003.gif)（现在可能看不到，有可能切换到别的特效了）\n\n![特效截图](https://media.baby7blog.com/ueditor/jsp/upload/image/20190514/1557845162323072001.png)\n\n## 原理：\n\n使用JavaScript实现，生成150个点，然后使用嵌套的for循环来判断每两个点之间是否需要连线以及连线的透明度。\n\n这是基本原理，后面我又改了一版是因为占用CPU有点高，改到了每秒30帧，现在在我的电脑上运行可以降到10%的CPU利用率，之前是30%![拍头](http://img.baidu.com/hi/jx2/j_0012.gif)\n\n代码：\n\n```javascript\nconst canvas = document.getElementById(\"myCanvas\");\ncanvas.width = document.documentElement.clientWidth;\ncanvas.height = document.documentElement.clientHeight;\nconst ctx = canvas.getContext(\"2d\");\n\n//创建小球的构造函数\nfunction Ball() {\n   this.x = randomNum(3, canvas.width - 3);\n   this.y = randomNum(3, canvas.height - 3);\n   this.r = randomNum(1, 3);\n   this.color = \"rgb(0,0,0)\";\n   //小球速度\n   this.speedX = randomNum(-3, 3) * 0.6;\n   this.speedY = randomNum(-3, 3) * 0.6;\n}\n\nBall.prototype = {\n      //绘制小球\n      draw: function() {\n         ctx.beginPath();\n         ctx.globalAlpha = 0.4;\n         ctx.fillStyle = this.color;\n         ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2);\n         ctx.fill();\n      },\n      //小球移动\n      move: function() {\n         this.x += this.speedX;\n         this.y += this.speedY;\n         //为了合理性,设置极限值\n         if (this.x <= 3 || this.x > canvas.width - 3) {\n            this.speedX *= -1;\n         }\n         if (this.y <= 3 || this.y >= canvas.height - 3) {\n            this.speedY *= -1;\n         }\n      }\n};\n//存储所有的小球  \nconst balls = [];\n//创建n个小球  \nconst n = 150;\nfor (let i = 0; i < n; i++) {\n   const ball = new Ball();\n   balls.push(ball);  \n}\n\nmain();\nfunction main() {\n   //电脑才有特效\n   if(canvas.width > 1000){\n      let step = (timestamp, elapsed) => {\n         //一秒30帧\n         if (elapsed > 1000 / 30) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            //小球与小球之间自动画线\n            drawLine();\n            elapsed = 0\n         }\n\n         window.requestAnimationFrame(\n            _timestamp => step(_timestamp, elapsed + _timestamp - timestamp)\n         )\n      };\n      window.requestAnimationFrame(timestamp => step(timestamp, 0))\n   }\n}\n\n//添加鼠标移动事件  \n//记录鼠标移动时的mouseX坐标  \nlet mouseX;\nlet mouseY;\ncanvas.onmousemove = function(e) {\n   const ev = event || e;\n   mouseX = ev.offsetX;\n   mouseY = ev.offsetY;\n};\n\n//判断是否划线  \nfunction drawLine() {\n   let distance;\n   for (let i = 0; i < balls.length; i++) {\n      balls[i].draw();\n      balls[i].move();\n      for (let j = 0; j < balls.length; j++) {\n         if (i !== j) {\n            distance = Math.sqrt(Math.pow((balls[i].x - balls[j].x), 2) + Math.pow((balls[i].y - balls[j].y), 2));\n            if (distance < 130) {\n               ctx.beginPath();\n               ctx.moveTo(balls[i].x, balls[i].y);\n               ctx.lineTo(balls[j].x, balls[j].y);\n               ctx.strokeStyle = \"rgba(0,0,0,\" + (1 - distance / 130) + \")\";\n               ctx.stroke();\n            }\n         }\n      }\n   }  \n}\n\n//随机函数  \nfunction randomNum(m, n) {\n   return Math.floor(Math.random() * (n - m + 1) + m);\n}\n```\n\nhtml中要加一个canvas\n\n```html\n<canvas class=\"background\" id=\"myCanvas\"></canvas>\n```\n\n还有引用\n\n```html\n<script src=\"js/background.js\"></script>\n```\n\n再加个css样式\n\n```css\n/*背景*/\n.background{\n   position:fixed;\n   z-index:-1;\n}\n```\n\n就可以看到酷炫的粒子背景啦![上升](http://img.baidu.com/hi/jx2/j_0006.gif)', '使用JavaScript实现，生成150个点，然后使用嵌套的for循环来判断每两个点之间是否需要连线以及连线的透明度', '2019-05-14 14:49:15', '2021-01-11 02:39:13'), (25, '1101', 19, 'Spring MVC实现微信小程序登录流程', 'https://p.qpic.cn/pic_wework/3685288192/9f993793ca07f7b6a9f4359d7ba58998ced701fabcda2bdf/0', '> # Spring MVC实现微信小程序登录流程\n\n## 流程说明：\n\n1.小程序调用 wx.qy.login() 获取 临时登录凭证code ，并回传到服务商服务器。\n\n2.服务商服务器以code换取 用户唯一标识 userid 、用户所在企业corpid 和 会话密钥 session_key。\n\n此步骤以后服务商后台可以根据用户标识来生成自定义登录态，用于后续业务逻辑中前后端交互时识别用户身份。\n\n![流程](https://media.baby7blog.com/ueditor/jsp/upload/image/20190605/1559733008279096724.png)\n\nSpring MVC实现登录流程：\n\n微信小程序的首页需要实现该流程\n\n```javascript\nvar that = this;\n// 登录\nwx.login({\n    success: function (res) {\n        if (res.code) {\n        wx.request({\n            url: app.globalData.path + \"ConferenceNotes/login\",\n            data: {\n            code: res.code\n            },\n            method: \"POST\",\n            header: {\n            \'content-type\': \'application/json\',\n            },\n            success: function (res) {\n            var token = res.data;\n            wx.getUserInfo({\n                success: res => {\n                // 保存用户信息到服务端\n                wx.request({\n                    url: app.globalData.path + \"ConferenceNotes/getUserInfo?new_key=\" + token + \"&email=\" + that.data.email,\n                    data: res,\n                    method: \"POST\",\n                    header: {\n                    \'Authorization\': \'Bearer \' + token,\n                    \'content-type\': \'application/json\',\n                    },\n                    success: function (res) {\n                        //res.data应该有你返回的服务器对用户唯一标识（不是openID）\n                    },\n                    fail: function (error) {\n                    console.log(\"error:\" + error);\n                    }\n                })\n\n                // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回\n                // 所以此处加入 callback 以防止这种情况\n                if (app.userInfoReadyCallback) {\n                    app.userInfoReadyCallback(res)\n                }\n                }\n            })\n\n            },\n            fail: function (error) {\n            console.log(error);\n            }\n        })\n        } else {\n        console.log(\"error code \" + res.errMsg);\n        }\n    }\n})\n```\n\nSpring MVC响应login请求：\n\n```java\n/**\n * 登录\n */\n@ResponseBody\n@RequestMapping(\"/login\")\npublic void login(HttpServletResponse response,@RequestBody Code codeObject) throws IOException {\n    response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    String code = codeObject.getCode();\n    String new_key = this.userService.getNewKey(code);\n    response.getWriter().write(new_key);\n    response.getWriter().close();\n}\n```\n\n调用Service层的函数：\n\n```java\n/**\n * 获取新的key，此key保存5分钟\n */\npublic String getNewKey(String code){\n    String url = \"https://api.weixin.qq.com/sns/jscode2session?appid=wx0805ed56c68e316b&secret=\"\n            + \"41f765c3adc892684c5a7ccb378e6c3a&js_code=\" + code + \"&grant_type=authorization_code\";\n    JSONObject jsonObject = JSON.parseObject( UrlUtil.sendPost( url,\"\" ));\n    String openid = (String) jsonObject.get(\"openid\");\n    String session_key = (String) jsonObject.get(\"session_key\");\n    //根据openid和session_key计算出来个值保存到reids并设置5分钟的过期时间\n    String new_key = DigestUtils.md5DigestAsHex((openid + session_key).getBytes());\n    this.jedis.hset(new_key, \"NEW\", session_key);\n    this.jedis.expire(new_key, 300);//5分钟过期\n    return new_key;\n}\n```\n\n这里我使用Redis进行保存，并设置5分钟的过期时间\n\n```java\n/**\n * 获取用户信息\n */\n@ResponseBody\n@RequestMapping(\"/getUserInfo\")\npublic void test(HttpServletRequest request, HttpServletResponse response,@RequestBody UserData userData) throws IOException {\n    request.setCharacterEncoding(\"UTF-8\");\n    response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    String new_key = request.getParameter(\"new_key\");\n    String email = request.getParameter(\"email\");\n    Message message = this.userService.getUserInfo(new_key, email, userData);\n    ObjectMapper mapper = new ObjectMapper();\n    response.getWriter().write(mapper.writeValueAsString(message));\n    response.getWriter().close();\n}\n```\n\n继续响应getUserInfo请求\n\n```java\n@Override\npublic Message getUserInfo(String new_key, String email, UserData userData) {\n    Message message = new Message();\n    if(new_key != null && !new_key.equals(\"\")){\n        String session_key = this.jedis.hget(new_key, \"NEW\");\n        if(session_key != null && !session_key.equals(\"\")){\n            this.jedis.hdel(new_key, \"NEW\");\n            String iv = userData.getIv();\n            String encryptedData = userData.getEncryptedData();\n            JSONObject userInfoJSON = getUserInfoJSON(encryptedData, session_key, iv);\n            if(userInfoJSON != null){\n                UserInfo userInfo = JSON.parseObject(userInfoJSON.toJSONString(),UserInfo.class);\n                userInfo.setAvatarUrl(userInfoJSON.getString(\"avatarUrl\"));\n                userInfo.setEmail(\"\");\n                if(email == null || email.equals(\"\")){\n                    UserInfo userInfo1 = this.userDao.selectUser(userInfo.getOpenId());\n                    if(userInfo1 == null){\n                        message.setMessage(\"no email\");\n                    }\n                    else{\n                        userInfo = userInfo1;\n                        message.setMessage(userInfo1.getEmail());\n                    }\n\n                }\n                else {\n                    userInfo.setEmail(email);\n                    message.setMessage(email);\n                }\n                System.out.println(\"before:\" + userInfo.toString());\n                userInfo = login(userInfo);\n                System.out.println(\"next:\" + userInfo.toString());\n                message.setState(\"success\");\n                message.setCode(userInfo.getId().toString());\n            }else {\n                message.setMessage(\"getUserInfo Algorithm error\");\n            }\n        }else {\n            message.setMessage(\"no session_key\");\n        }\n    }else {\n        message.setMessage(\"no new_key\");\n    }\n    return message;\n}\n```\n\n实际上我这个写的很不好，后面会再修改\n\n调用了三个函数\n\nlogin：\n\n```java\nprivate UserInfo login(UserInfo userInfo){\n    UserInfo userInfo_r = this.userDao.selectUser(userInfo.getOpenId());\n    if(userInfo_r == null)\n        this.userDao.insertUser(userInfo);\n    else{\n        this.userDao.updateUser(userInfo);\n        userInfo.setId(userInfo_r.getId());\n    }\n    return userInfo;\n}\n```\n\ngetUserInfoJson：\n\n```java\n/**\n * 获取UserInfo信息\n */\nprivate JSONObject getUserInfoJSON(String encryptedData, String sessionkey, String iv){\n    byte[] dataByte = Base64.decode(encryptedData);     //被加密的数据\n    byte[] keyByte = Base64.decode(sessionkey);         //加密秘钥\n    byte[] ivByte = Base64.decode(iv);                  //偏移量\n    try {\n        // 如果密钥不足16位，那么就补足.  这个if 中的内容很重要\n        int base = 16;\n        if (keyByte.length % base != 0) {\n            int groups = keyByte.length / base + 1;\n            byte[] temp = new byte[groups * base];\n            Arrays.fill(temp, (byte) 0);\n            System.arraycopy(keyByte, 0, temp, 0, keyByte.length);\n            keyByte = temp;\n        }\n        // 初始化\n        Security.addProvider(new BouncyCastleProvider());\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\",\"BC\");\n        SecretKeySpec spec = new SecretKeySpec(keyByte, \"AES\");\n        AlgorithmParameters parameters = AlgorithmParameters.getInstance(\"AES\");\n        parameters.init(new IvParameterSpec(ivByte));\n        cipher.init(Cipher.DECRYPT_MODE, spec, parameters);// 初始化\n        byte[] resultByte = cipher.doFinal(dataByte);\n        if (null != resultByte && resultByte.length > 0) {\n            String result = new String(resultByte, StandardCharsets.UTF_8);\n            return JSONObject.parseObject(result);\n        }\n    } catch (NoSuchAlgorithmException | InvalidParameterSpecException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | NoSuchProviderException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n```\n\n还有一个是从数据库调数据的，这里就不展示了\n\n我写这篇文章主要是给你们一个大概的流程和思路，里面的有些通用函数可以拿去用，但是最好不要照搬我的所有代码，因为时间紧，所以代码质量不怎么地，后面会继续修改更新博客的。', 'Spring MVC实现微信小程序登录流程', '2019-06-03 06:31:21', '2021-01-11 02:39:05');
INSERT INTO `blog` VALUES (26, '1104', 6, 'Scrapy豆瓣整站爬虫', 'https://media.baby7blog.com/FseS4wB5iYauqeMr3yfuN2zzeJRF', '> # Scrapy豆瓣整站爬虫\n\n## 分析：\n\n豆瓣的分类有这些\n\n![豆瓣分类截图](https://media.baby7blog.com//ueditor/jsp/upload/image/20190609/1560040556601041175.png)\n\n其中读书、电影、音乐、同城的四个分类信息较多、维度较全，我们今天就来爬取这四个分类下的数据\n\n### 豆瓣电影：\n\n豆瓣电影下的分类导航是最全的，默认选择全部\n\n![豆瓣电影1](https://media.baby7blog.com//ueditor/jsp/upload/image/20190604/1559655544696086351.png)\n\n拉到下面点击更多\n\n![豆瓣电影2](https://media.baby7blog.com//ueditor/jsp/upload/image/20190604/1559655587586099145.png)\n\n在F12开发者工具可以看到\n\n![F12开发者工具](https://media.baby7blog.com//ueditor/jsp/upload/image/20190604/1559655653897051116.png)\n\n一共出来了21条请求，其中20条是图片，第一条是返回的json数据\n\n![返回数据](https://media.baby7blog.com//ueditor/jsp/upload/image/20190604/1559655735037008313.png)\n\n分析这条GET请求\n\n[https://movie.douban.com/j/new_search_subjects?sort=U&range=0,10&tags=&start=20](https://movie.douban.com/j/new_search_subjects?sort=U&range=0,10&tags=&start=20)\n\nrange经测试并没有什么用![惊讶](http://img.baidu.com/hi/jx2/j_0004.gif)，后面的start可以按20的倍数增长\n\n不过json数据并不是很全，所以需要进每条的详情页也就是\n\n![url](https://media.baby7blog.com//ueditor/jsp/upload/image/20190604/1559656107126040428.png)\n\nhttps://movie.douban.com/subject/1292720\n\n![电影详情](https://media.baby7blog.com//ueditor/jsp/upload/image/20190604/1559656136610032279.png)\n\n在详情页可以采集到比较详细的数据\n\n我们可以这样设计需要采集的数据\n\n![需要采集的数据](https://media.baby7blog.com//ueditor/jsp/upload/image/20190604/1559656219109013581.png)\n\n经过测试发现有的电影并没有详情页，所以需要将之前的json数据放进去，毕竟也是有点信息的，为了偷懒，我设计爬虫为两次爬取，每次注释一部分代码运行\n\n### 豆瓣读书：\n\n豆瓣读书按标签可以得到排行（[https://book.douban.com/tag/%E5%B0%8F%E8%AF%B4?start=980&type=T](https://book.douban.com/tag/%E5%B0%8F%E8%AF%B4?start=980&type=T)）替换标签就可以\n\n![豆瓣读书](https://media.baby7blog.com//ueditor/jsp/upload/image/20190609/1560040880177080557.png)\n\n全部标签页为（[https://book.douban.com/tag/](https://book.douban.com/tag/)）\n\n需要注意的是页数显示382页\n\n![页数](https://media.baby7blog.com//ueditor/jsp/upload/image/20190609/1560040923973020411.png)\n\n实际上在页数等于51页（也就是数据量等于1000）的时候，豆瓣就会显示\n\n![没有找到](https://media.baby7blog.com//ueditor/jsp/upload/image/20190609/1560041017645092459.png)\n\n很迷![擦汗](http://img.baidu.com/hi/jx2/j_0009.gif)\n\n操作依据上面电影的双向爬取来就行\n\n需要注意的是详情在html显示是酱紫：\n\n![html结果](https://media.baby7blog.com//ueditor/jsp/upload/image/20190609/1560041187034036475.png)\n\n信息不在标签里![拍头](http://img.baidu.com/hi/jx2/j_0012.gif)\n\n我的处理方法是将整个的 __\"\".join()__ 放在一个字符串里，然后正则表达式 __作者:(.+?)出版社:__ 就可以提取出来中间的信息\n\n豆瓣音乐和豆瓣同城的分析和上面的差不多，这里就不分析了\n\n## 代码：\n\n具体的源码我会放在最下面，这里讲解一下怎么将这四个爬虫放在一个项目里\n\n首先是Items.py\n\n```python\n# -*- coding: utf-8 -*-\n\nfrom scrapy.item import Item, Field\n\n\nclass DoubanVideoItem(Item):\n    id = Field()                    # 在豆瓣的ID\n    name = Field()                  # 电影名\n    image_url = Field()             # 海报\n    director = Field()              # 导演\n    screenwriter = Field()          # 编剧\n    star = Field()                  # 主演\n    genre = Field()                 # 类型\n    runtime = Field()               # 片长\n    initialReleaseDate = Field()    # 首次上映日期\n    summary = Field()               # 简介\n    average_count = Field()         # 评价数量\n    average = Field()               # 评分\n    star_1 = Field()                # 一星占比\n    star_2 = Field()                # 二星占比\n    star_3 = Field()                # 三星占比\n    star_4 = Field()                # 四星占比\n    star_5 = Field()                # 五星占比\n\n\nclass DoubanBookItem(Item):\n    id = Field()                    # 在豆瓣的ID\n    name = Field()                  # 书名\n    image_url = Field()             # 封面\n    author = Field()                # 作者\n    press = Field()                 # 出版社\n    year = Field()                  # 出版年\n    pages = Field()                 # 页数\n    price = Field()                 # 定价\n    bindinglayout = Field()         # 装帧\n    series = Field()                # 丛书\n    ISBN = Field()                  # ISBN\n    summary = Field()               # 简介\n    average_count = Field()         # 评价数量\n    average = Field()               # 评分\n    star_1 = Field()                # 一星占比\n    star_2 = Field()                # 二星占比\n    star_3 = Field()                # 三星占比\n    star_4 = Field()                # 四星占比\n    star_5 = Field()                # 五星占比\n    \n    ...下面的差不多\n```\n\n然后在setting.py中设置\n\n```python\nITEM_PIPELINES = {\n    \'DouBanAll.pipelines.DoubanVideoPipeline\': 100,\n    \'DouBanAll.pipelines.DoubanBookPipeline\': 200,\n    \'DouBanAll.pipelines.DoubanMusicPipeline\': 300,\n    \'DouBanAll.pipelines.DoubanLocationPipeline\': 400,\n}\n```\n\n然后每新建一个爬虫，就在spiders目录下     scrapy genspider 爬虫名 web            一个新的爬虫名.py\n\n爬虫中需要添加\n\n```python\ncustom_settings = {\n    \'ITEM_PIPELINES\' : {\'DouBanAll.pipelines.DoubanVideoPipeline\': 100}\n}\n```\n\n来区分\n\n然后运行爬虫时:\n```linux\nscrapy crawl 爬虫名\n```\n\n## 源代码：\n\n[点击此处下载](https://media.baby7blog.com//DouBanAll.zip)\n', 'Scrapy豆瓣整站爬虫，爬取豆瓣下电影、读书、音乐、同城四个分类的数据并保存到MySQL，文末有源码', '2019-06-04 13:56:39', '2021-01-11 02:39:16'), (27, '1104', 6, '豆瓣电影分析', 'https://media.baby7blog.com/ueditor/jsp/upload/image/20190609/1560072180710081520.png', '> # 豆瓣电影分析\n\n依据上一篇[Scrapy豆瓣整站爬虫](https://www.baby7blog.com/myBlog?id=26)中的电影数据进行分析\n\n首先分析时长、评分、评论数量之间的关系：\n\n![关系1](https://media.baby7blog.com//ueditor/jsp/upload/image/20190609/1560071924352011463.png)\n\n![关系2](https://media.baby7blog.com//ueditor/jsp/upload/image/20190609/1560071930446043457.png)\n\n![关系3](https://media.baby7blog.com//ueditor/jsp/upload/image/20190609/1560071935540037319.png)\n\n可以分析得：\n\n当电影时长和评分越高，评论数量相对越多\n\n但时长和评分没有什么关系\n\n接下来是电影类型的数量分析\n\n![分析](https://media.baby7blog.com//ueditor/jsp/upload/image/20190609/1560072084132009406.png)\n\n可以看到剧情片一马当先，戏剧和动作紧随其后\n\n最后是评分星级的比例：\n\n![星级比例](https://media.baby7blog.com//ueditor/jsp/upload/image/20190609/1560072180710081520.png)\n\n一星二星只占11.8%，其余的多评四星，或在上下浮动\n\n源码：\n\n```python\nimport pymysql\nimport pandas as pd\nfrom pandas import DataFrame\nimport matplotlib.pyplot as plt\nfrom pylab import mpl\nmpl.rcParams[\'font.sans-serif\'] = [\'SimHei\']\n\n\n# 从MySQL导入数据\ncon = pymysql.connect(host=\'127.0.0.1\', user=\'root\', passwd=\'root\', db=\'python\', charset=\'utf8\')\ncur = con.cursor()\ndf = pd.read_sql(\'SELECT * FROM doubanvideo WHERE \'\n                 \'genre != \"\" AND \'\n                 \'runtime != \"\" AND \'\n                 \'average_count != \"\" \'\n                 \'AND average != \"\" AND \'\n                 \'star_1 != \"\" AND \'\n                 \'star_2 != \"\" AND \'\n                 \'star_3 != \"\" AND \'\n                 \'star_4 != \"\" AND \'\n                 \'star_5 != \"\";\', con=con)\ncon.close()\n\n# 时长和评论数量之间的关系\ndf[\'runtime\'] = df[\'runtime\'].str.replace(r\'( *)分钟(.*)\', \"\")\ndf[\'runtime\'] = df[\'runtime\'].str.replace(r\'[a-zA-Z]+:( *)\', \"\")\nframe = DataFrame(df)\nfig,ax = plt.subplots()\nax.scatter(frame[\'runtime\'], frame[\'average_count\'])\nax.set_xlabel(\'runtime\')\nax.set_ylabel(\'average_count\')\nplt.show()\nplt.close()\n\n\n# 时长和评分之间的关系\ndf[\'runtime\'] = df[\'runtime\'].str.replace(r\'( *)分钟(.*)\', \"\")\ndf[\'runtime\'] = df[\'runtime\'].str.replace(r\'[a-zA-Z]+:( *)\', \"\")\nframe = DataFrame(df)\nfig,ax = plt.subplots()\nax.scatter(frame[\'runtime\'], frame[\'average\'])\nax.set_xlabel(\'runtime\')\nax.set_ylabel(\'average\')\nplt.show()\nplt.close()\n\n\n# 评分和评论数量之间的关系\nframe = DataFrame(df)\nfig,ax = plt.subplots()\nax.scatter(frame[\'average\'], frame[\'average_count\'])\nax.set_xlabel(\'average\')\nax.set_ylabel(\'average_count\')\nplt.show()\nplt.close()\n\n# 电影类型的柱形图\ntypes = {}\nframe = DataFrame(df)\nfor genre in frame[\'genre\']:\n    strs = genre.split(\" \")\n    for s in strs:\n        if types.get(s) is None:\n            types[s] = 1\n        else:\n            types[s] += 1\nblist = []                                              # 定义两个列表\nclist = []\nlist = sorted(types.items(), key=lambda item: item[1])  # 得到的是一个list,list中的元素是tuple\nfor i in list:\n    blist.append(i[0])                                  # 把元组中的第一个值添加到blist列表中\n    clist.append(i[1])                                  # 把元组中的第二个值添加到clist列表中\nplt.rcParams[\'figure.figsize\'] = (10.0, 4.0)            # 设置figure_size尺寸\nplt.bar(range(len(blist)), clist, tick_label=blist)     # 第一个参数为x轴元素的个数，第二个元素为y轴的值，第三个元素为x轴各元    素的值\nplt.show()\n\n\n# 五个评价等级的比例，数据库星级顺序反了。。。\nstar_1 = DataFrame(df[\'star_5\'].str.replace(r\'%\', \"\"), dtype=\'float\').mean()\nstar_2 = DataFrame(df[\'star_4\'].str.replace(r\'%\', \"\"), dtype=\'float\').mean()\nstar_3 = DataFrame(df[\'star_3\'].str.replace(r\'%\', \"\"), dtype=\'float\').mean()\nstar_4 = DataFrame(df[\'star_2\'].str.replace(r\'%\', \"\"), dtype=\'float\').mean()\nstar_5 = DataFrame(df[\'star_1\'].str.replace(r\'%\', \"\"), dtype=\'float\').mean()\nlabels = \'1 star\', \'2 star\', \'3 star\', \'4 star\', \'5 star\'\nsizes = [star_1, star_2, star_3, star_4, star_5]\nexplode = (0, 0, 0, 0, 0)\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct=\'%1.1f%%\', shadow=True, startangle=90)\nax1.axis(\'equal\')\nplt.show()\n```', '分析了豆瓣电影数据并进行可视化，分析的数据有评论数量、评分、时长、电影类型、评分星级', '2019-06-09 09:25:37', '2021-01-11 02:39:24'), (31, '1101', 9, 'MySQL相邻去重', 'https://media.baby7blog.com/FnSlmyqDHaPkAldqx9xvI8wkmEql', '> # MySQL相邻去重\n\n```SQL\nSELECT room\nFROM bracelet_info AS table1\nWHERE table1.room != \n(\n  SELECT table2.room\n  FROM bracelet_info AS table2\n  WHERE table1.uid < table2.uid\n  ORDER BY table2.uid\n  LIMIT 1\n)\nOR NOT EXISTS \n(\n  SELECT *\n  FROM bracelet_info AS table3\n  WHERE table1.uid < table3.uid\n)\n```\n\n出处找不到了', '/***************MySQL相邻去重****************/', '2019-11-03 11:36:14', '2021-01-11 02:39:29'), (37, '1101', 14, 'Java程序解析yml文件报错解决', 'https://media.baby7blog.com/FoYxbrqn3DYT3IPqyQr5GQ6JO4ss', '> # Java程序解析yml文件报错解决\r\n## bug关键字：java.nio.charset.MalformedInputException: Input length = 1\r\n\r\n## 过程：\r\n>运行报错说解析yml文件出现问题，不能正常解析，这个项目是我用Git Clone下来的，在别的电脑上都能跑的通，hosts文件配置也没有问题，但是就是这台电脑上运行不了\r\n经过求助大佬，经过很长时间的找bug，最后发现是idea的setting中的项目编码有问题，我的IDEA以前设置过，忘了改回来，现在是GBK，应该改成UTF-8\r\n\r\n\r\n## 解决：\r\n>File --> Settings --> Editor --->File Encodings   ，将所有的格式都转成utf-8格式\r\n<img src=\"http://test.baby7blog.com/1573786138972325861\" width=\"90%\">\r\n\r\n\r\n<a>引用：https://blog.csdn.net/qq_36125733/article/details/81741233</a>', 'java.nio.charset.MalformedInputException: Input length = 1', '2019-11-14 15:34:47', '2021-01-11 02:39:01'), (39, '1100', 10, '基于谷歌/火狐无头浏览器模式解决Vue的SEO问题', 'https://media.baby7blog.com/Fr9_iufjOcnPNk0QdHDAb71WrdTu', '> # 基于谷歌/火狐无头浏览器模式解决Vue的SEO问题\r\n\r\n启发来自冷子欲的文章: [基于Vue SEO的四种方案](https://segmentfault.com/a/1190000019623624?utm_source=tag-newest)，感谢作者的分享。\r\n\r\n在他的文章里【使用Phantomjs针对爬虫做处理】对于已经开发完成的单页面Vue项目是很好的选择，但是我用Phantomjs安装完后不能正常工作，另外“PhantomJS宣布终止开发”，所以选择弃用Phantomjs转用其他的方案代替。\r\n\r\nPhantomjs的本质是一个无头浏览器，我了解到谷歌和火狐都有无头浏览器模式，所以想到使用python调用浏览器来实现返回渲染好的html页面。\r\n\r\n下面是我设计的流程图\r\n\r\n![flow 流程图](http://test.baby7blog.com/1573800191913237035 \"基于谷歌/火狐无头浏览器模式解决Vue的SEO问题\")\r\n\r\n下面是具体的流程，在流程开始之前要安装Nginx、火狐/谷歌、Nodejs、python环境，安装及使用这里就不赘述了：\r\n\r\n## 1.Nginx做转发\r\n\r\n在Nginx的配置文件里的http区块加转发地址:\r\n```Nginx\r\nupstream spider_server {\r\n    server localhost:3000;\r\n}\r\n```\r\n在http区块->server区块->location区块里加判断:\r\n```Nginx\r\nif ($http_user_agent ~* \"Baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator|bingbot|Sosospider|Sogou Pic Spider|Googlebot|360Spider\") {\r\n    proxy_pass  http://spider_server;\r\n}\r\n```\r\n这样便实现了对百度或其余的爬虫转发到3000端口，3000端口是node.js程序监听的地址，可以自己设置。\r\n\r\n## 2.使用node.js调用python爬虫\r\n\r\n创建server.js文件并运行\r\n```javascript\r\n// ExpressJS调用方式\r\nvar express = require(\'express\');\r\nvar app = express();\r\n\r\n// 引入NodeJS的子进程模块\r\nvar child_process = require(\'child_process\');\r\nvar iconv = require(\'iconv-lite\');\r\n\r\napp.get(\'*\', function(req, res) {\r\nres.writeHead(200, {\'Content-Type\': \'text/html; charset=utf-8\'});\r\n    //url\r\n    var url = req.protocol + \'://\'+ req.hostname + req.originalUrl;\r\n\r\n    // 预渲染后的页面字符串容器\r\n    var content = \'\';\r\n\r\n    // 开启一个python子进程\r\n    var firefox = child_process.spawn(\'python\', [\'firefox.py\', url]);\r\n\r\n    // 设置stdout字符编码\r\n    //firefox.stdout.setEncoding(\'utf8\');\r\n\r\n    // 监听python的stdout，并拼接起来\r\n    firefox.stdout.on(\'data\', function(data){\r\n        //content += data.toString();\r\n        content += iconv.decode(new Buffer(data, \'binary\'), \'gb2312\');\r\n    });\r\n\r\n\r\n    // 捕获标准错误输出并将其打印到控制台 \r\n    firefox.stderr.on(\'data\', function (data) { \r\n        console.log(\'standard error output:\\n\' + data); \r\n    }); \r\n\r\n    // 监听子进程退出事件\r\n    firefox.on(\'exit\', function(code){\r\n        switch (code){\r\n            case 1:\r\n                console.log(\'load error\');\r\n                res.write(\'加载失败\');\r\n                break;\r\n            case 2:\r\n                console.log(\'timeout: \'+ url);\r\n                res.write(\'time out\');\r\n                break;\r\n            default:\r\n                //console.log(content);\r\n                res.write(content);\r\n                break;\r\n        }\r\n         res.end();\r\n    });\r\n\r\n});\r\n\r\napp.listen(3000, function () {\r\n  console.log(\'Spider app listening on port 3000!\');\r\n});\r\n```\r\n这里的3000便是Nginx转发的端口。\r\n\r\n## 3.使用python调用谷歌/火狐浏览器获得渲染数据\r\n\r\n这里使用python调用火狐浏览器获取渲染数据\r\n```python\r\nfrom selenium.webdriver.firefox.options import Options\r\nfrom selenium import webdriver\r\nimport sys\r\n\r\n# print(sys.argv[1])\r\n\r\n# url = \'https://www.baby7blog.com\'\r\njs_delStyle = \"var elems = document.getElementsByTagName(\'style\');\" \\\r\n              \"for(var i = 0; i < elems.length; i++){elems[i].parentNode.removeChild(elems[i]);}\"\r\n#\r\noptions = Options()\r\noptions.add_argument(\'--headless\')  # 无界面\r\noptions.set_preference(\'permissions.default.image\', 2)  # 不加载图片\r\nbrowser = webdriver.Firefox(options=options)  # 打开浏览器\r\nbrowser.get(url=sys.argv[1])  # 请求\r\nbrowser.execute_script(js_delStyle)\r\nprint(browser.page_source.encode(\'GBK\',\'ignore\').decode(\'GBk\'))  # 输出\r\nbrowser.close()  # 关闭浏览器\r\nbrowser.quit()  # # 杀死chrome浏览器的连接桥(chromedriver)的进程\r\n```\r\n可以看到使用了无头、无界面、不加载图片的浏览器模式，并且请求后对html做了处理，删除了不必要的<style>标签，大家可以自己做其他的处理。', '基于谷歌/火狐无头浏览器模式解决Vue的SEO问题', '2019-11-15 15:05:03', '2021-01-11 02:37:47'), (41, '1101', 9, 'python自动判断Maven依赖', 'https://media.baby7blog.com/FkemCPTkOuBMMvwQvfsmHpW_1qK7', '> # python自动判断Maven依赖\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\"\"\"\n    naee    自动判断Maven依赖\n    by      陈思奇\n    time    2019.9.9\n    methods 填写好下方的项目绝路路径和groupId运行后复制运行结果粘贴到excel即可\n\"\"\"\nimport os.path\nfrom xml.dom.minidom import parse\n\nProjectPath = \"D:\\project\\java\\IntelliJ\\cathayfuture\"                               # 一定要写绝对路径\nyourGroupId = \"com.baokang\"                                                         # 要判断的groupId\n\nexcelPast = \'服务名\\t依赖\\n\'\nrootDir = os.path.abspath(ProjectPath)\nfor parent, dirnames, filenames in os.walk(rootDir):\n    for filename in filenames:\n        if \"pom.xml\" == filename:\n            pathfile = os.path.join(parent, filename)                               # 获得pom文件路径\n            DOMTree = parse(pathfile)\n            project = DOMTree.documentElement                                       # project节点\n            dependencies = project.getElementsByTagName(\'dependencies\')             # dependencies节点列表\n            if dependencies.length == 0:\n                continue\n            dependencyList = dependencies[0].getElementsByTagName(\'dependency\')     # dependency节点列表\n            dependencyStr = \'\'\n            for dependency in dependencyList:\n                groupId = dependency.getElementsByTagName(\'groupId\')[0]             # groupId节点\n                if groupId.firstChild.data == yourGroupId:                          # 判断是否为该groupId\n                    dependencyStr += \\\n                        dependency.getElementsByTagName(\'artifactId\')[0].firstChild.data + \'\\n\'     # excel字符串拼接\n            if dependencyStr != \'\':\n                dependencyStr = dependencyStr[:len(dependencyStr) - 1]                              # excel粘贴格式原因\n                excelPast += parent[parent.rfind(\"\\\\\") + 1:] + \"\\t\\\"\" + dependencyStr + \"\\\"\\n\"      # excel字符串拼接\nprint(excelPast)\n```', 'python自动判断Maven依赖', '2019-11-15 17:44:49', '2021-01-11 05:54:27'), (43, '1113', 16, '记一次服务器疑似watchbog挖矿病毒入侵', 'https://media.baby7blog.com/FvsqLovMu9AVStVmfJFQpF96iteq', '> # 记一次服务器疑似watchbog挖矿病毒入侵\n\n## 发现\n网站崩溃，查询发现是后台服务无法请求到，继续查发现全部的微服务都挂了，所以在华为云重新部署，但是部署失败，服务无法启动，使用ssh连接手动测试启动后发现还是不行\n## 排查\n经过查询日志发现无法连接到mysql，我的服务地址是使用hosts维护的，使用\n```ssh\nvim /etc/hosts\n```\n命令发现hosts文件之前的hosts均被清空，多了两个不是我自己配置的host\n```hosts\n0.0.0.0 pastebin.com\n0.0.0.0 onion.to\n```\n经过搜索引擎发现似乎是watchbog挖矿病毒导致的，使用top命令没有发现cpu使用率高的，但是云服务监控的cpu在不停的变动\n修改hosts后不长的时间又会被修改回来\n使用\n```linux\ncrontab -l\n```\n发现有定时任务，但是着急就没有继续查，直接重装封端口了\n\n## 原因\n前几天想在本地使用Redis Desktop Manager可视化工具连接服务器的redis，所以设置了redis的远程连接和6379端口，还为了方便没有设置密码，心太大了/(ㄒoㄒ)/~~，导致6379端口被注入脚本，导致网站崩溃\n\n## 解决\n因为服务器上没有什么东西，所以使用云服务商的重装功能重装了系统，再重新安装了jdk和redis，然后关闭了不必要的端口如6379', '网站崩溃，查询发现是后台服务无法请求到，继续查发现全部的微服务都挂了，所以在华为云重新部署，但是部署失败，服务无法启动，使用ssh连接手动测试启动后发现还是不行', '2019-11-19 11:49:50', '2021-01-11 02:39:18'), (45, '1113', 26, 'CentOS部署JDK、Tomcat、Redis', 'https://media.baby7blog.com/FjFCU6-pYmeKjvja2tOxzEwmitwx', '> # CentOS部署JDK、Tomcat、Redis\n## JDK和Tomcat\n1.首先要有一个华为云DevCloud账号\n2.创建仓库然后创建部署任务\n3.创建主机组、一个主机（填你的服务器）\n4.在其中选择JDK安装\n5.添加一个Tomcat安装\n6.执行\n## Redis\n1.下载安装包\n```linux\nwget http://download.redis.io/releases/redis-4.0.2.tar.gz\n```\n2.解压并安装\n```linux\ntar xzf redis-4.0.2.tar.gz\ncd redis-4.0.2\nmake\nmake install\n```\n3.更改配置文件\n```linux\nvim redis.conf\n```\n将里面的daemonize从no修改为yes\n\n4.启动\n```linux\n/usr/local/bin/redis-server /root/redis-4.0.2/redis.conf\n```\n停止\n```linux\n/usr/local/bin/redis-cli SHUTDOWN\n```\n\n参考:[CentOS下Redis的安装](https://www.cnblogs.com/renzhicai/p/7773080.html)', '使用华为云进行JDK和Tomcat的安装，手动安装redis', '2019-11-20 16:10:18', '2021-01-11 02:38:59'), (47, '1113', 15, 'Nginx的配置使用', 'https://media.baby7blog.com/Fs6miUWXBT1kHs4L3cmd_yVznutS', '> # Nginx的配置使用\n\n### https的配置\n首先去申请一个ssl证书并下载相关的文件：pem和key\n然后配置443端口转发到相应的端口\n```nginx\n    # HTTPS server\n    # https访问\n    server {\n        listen       443 ssl;\n        server_name  你的域名;\n        ssl on;\n        root html;\n        index index.html index.htm;\n\n        ssl_certificate      pem地址;\n        ssl_certificate_key  key地址;\n\n        ssl_session_timeout  5m;\n\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers  on;\n\n        location / {\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_pass   转发地址如http://127.0.0.1:8003;\n        }\n    }\n```\n### 强制使用https访问\n就是如果访问端口是http就重定向到https，这里强制80端口使用https访问\n```nginx\n    # HTTP server\n    # 重定向到https\n    server {\n        listen       80;\n        server_name  你的域名;\n        return      301 https://$server_name$request_uri;\n    }\n```\n### 开启GZIP\n在http区块下添加如下代码\n```nginx\n    #开启gzip\n    gzip  on;\n    #低于1kb的资源不压缩\n    gzip_min_length 1k;\n    #压缩级别【1-9】，越大压缩率越高，同时消耗cpu资源也越多，建议设置在4左右。\n    gzip_comp_level 4;\n    #需要压缩哪些响应类型的资源，多个空格隔开。\n    gzip_types text/plain application/javascript application/x-javascript text/javascript text/xml text/css;\n    #配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低>版本不支持）\n    gzip_disable \"MSIE [1-6]\\.\";\n    #是否添加“Vary: Accept-Encoding”响应头\n    gzip_vary on;\n```\n### 区分爬虫进行转发\n在location区块下添加如下代码\n```nginx\nif ($http_user_agent ~* \"Baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator|bingbot|Sosospider|Sogou Pic Spider|Googlebot|360Spider\") {\n    proxy_pass  要转发的地址;\n}\n```\n### location的判断\n判断文件\n```nginx\nlocation ~* .jpg|.png|.gif|.jpeg|.html|.js|.css|.ico$ {}\n```\n判断服务\n```nginx\nlocation ~* ^/(auth|admin|code|gen|actuator|monitor|mp|daemon|job|tx|pay|act|blog) {}\n```\n### 开启缓存\n```nginx\nproxy_cache_path 本地缓存路径 levels=1:2 keys_zone=cachedata:10m max_size=10g inactive=60m use_temp_path=off;\nserver {\n　　# ...\n　　location / {\n　　　　proxy_cache cachedata;\n　　　　proxy_pass 要转发的地址;\n　　}\n}\n```', 'https的配置、强制使用https访问、开启GZIP、location的判断、开启缓存', '2019-11-20 16:57:23', '2021-01-12 13:45:22'), (49, '1101', 25, 'IDEA中git的操作', 'https://media.baby7blog.com/Fj12b-shJGsu3j14vl78m2asAn9q', '> # IDEA中git的操作\n### 安装git\n\n> 1.下载:可以去git的[官网](https://git-scm.com/downloads)下载\n> 2.安装\n> 3.配置环境变量:\n\n在系统变量的Path中添加git的安装目录再加\\cmd即可\n\n### IDEA配置git\nctrl+alt+s打开Settings，搜索git，然后在第一行的Path to Git executable中选择git的目录\\bin\\git.exe即可\n\n### 从在线git仓库clone/下载项目\n有两种下载方式，我一般是选择https的下载方式，输入用户名密码后让idea记住。\n\n> 1.IDEA的开始界面或者VCS\n> 2.Checkout from Version Control\n> 3.git\n> 4.输入https的url和项目放置路径\n> 5.输入用户名密码并点击clone\n\n### 提交和更新\n在左下角的Version Control中可以看到更改的文件，可以长按ctrl并用鼠标左键选择你要提交的那些文件，选完后点击左侧的绿色√来commit到本地仓库，这里如果想要回退可以看下面一个操作，commit后要提交到线上仓库需要点击VCS->Git->Push来提交。\n\n更新是VCS->Updata Project，如果没有冲突就可以直接合并，有冲突的话需要在冲突的文件手动选择合并。\n\n### 本地回退\n在commit但没有push到线上的情况下可以选择本地回退，VSC->Git->reset head打开窗口，其中的To Commit是重点：\n\n> 退回到上一次提交：HEAD^\n> 退回到2次提交之前：HEAD~2\n> 退回到指定的版本：HEAD ~id号\n\n\n### 切换分支\n在右下角[GIT:分支名(一般开始是Master)]的分支里选择你要切换的分支点击Checkout即可\n\n### 合并分支\nDevelop分支合并到Master分支上：首先切换到Master分支上，在Dev分支上点击Merge into Current即可\n\n### 提交规范化\n> #### type：用于说明commit的类别，规定为如下几种\nfeat：新增功能；\nfix：修复bug；\ndocs：修改文档；\nrefactor：代码重构，未新增任何功能和修复任何bug；\nbuild：改变构建流程，新增依赖库、工具等（例如webpack修改）；\nstyle：仅仅修改了空格、缩进等，不改变代码逻辑；\nperf：改善性能和体现的修改；\nchore：非src和test的修改；\ntest：测试用例的修改；\nci：自动化流程配置修改；\nrevert：回滚到上一个版本；\n> #### scope：【可选】用于说明commit的影响范围\n> #### subject：commit的简要说明，尽量简短', '安装git、IDEA配置git、从在线git仓库clone/下载项目、提交和更新、本地回退、切换分支、合并分支', '2019-11-24 19:00:41', '2021-01-12 13:44:28'), (53, '1101', 63, 'Phoenix查询优化(千万数据0.1秒查询)', 'https://media.baby7blog.com/FpkcVHtbpTJuPoMdMHoMz87LxQQ7', '> # Phoenix查询优化(千万数据0.1秒查询)\n\n> ### 版本信息\n> Phoenix: 5.0\n> HBase:2.0\n> Zookeeper:3.4.12\n\n### 优化过程\n二级索引是关键，首先是创建索引，创建索引之前需要配置一些东西\n\n在每一个RegionServer的hbase-site.xml中加入如下的属性：\n```XML\n<property>\n  <name>hbase.regionserver.wal.codec</name>\n  <value>org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec</value>\n</property>\n<property>\n  <name>hbase.region.server.rpc.scheduler.factory.class</name>\n  <value>org.apache.hadoop.hbase.ipc.PhoenixRpcSchedulerFactory</value>\n  <description>Factory to create the Phoenix RPC Scheduler that uses separate queues for index and metadata updates</description>\n</property>\n<property>\n  <name>hbase.rpc.controllerfactory.class</name>\n  <value>org.apache.hadoop.hbase.ipc.controller.ServerRpcControllerFactory</value>\n  <description>Factory to create the Phoenix RPC Scheduler that uses separate queues for index and metadata updates</description>\n</property>\n<property>\n  <name>hbase.coprocessor.regionserver.classes</name>\n  <value>org.apache.hadoop.hbase.regionserver.LocalIndexMerger</value>\n</property>\n```\n在每一个Master的hbase-site.xml中加入如下的属性：\n```XML\n<property>\n  <name>hbase.master.loadbalancer.class</name>\n  <value>org.apache.phoenix.hbase.index.balancer.IndexLoadBalancer</value>\n</property>\n<property>\n  <name>hbase.coprocessor.master.classes</name>\n  <value>org.apache.phoenix.hbase.index.master.IndexMasterObserver</value>\n</property>\n```\n接下来看这个查询语句\n```SQL\nSELECT MAX(create_time) AS \"createTime\",student_id AS \"studentID\"\nFROM bracelet_info\nWHERE student_id = \'111\' and create_time >= 1575388800000\ngroup by student_id;\n```\n这条查询语句需要两个筛选，创建一个对应的组合二级索引：\n```SQL\ncreate index idx_bracelet_info_student_id_time on bracelet_info(student_id,create_time desc);\n```\n接下来查看语句运行效率，这里增加了一个Hint，略微增加速度\n```Linux\n0: jdbc:phoenix:************:****> SELECT /*+ INDEX(bracelet_info idx_bracelet_info_student_id_time) */\n. . . . . . . . . . . . . . . . .> MAX(create_time) AS \"createTime\"\n. . . . . . . . . . . . . . . . .> ,student_id AS \"studentID\"\n. . . . . . . . . . . . . . . . .> FROM bracelet_info\n. . . . . . . . . . . . . . . . .> WHERE student_id = \'111\'\n. . . . . . . . . . . . . . . . .> and create_time >= 1575388800000\n. . . . . . . . . . . . . . . . .> group by student_id;\n+----------------+------------+\n|   createTime   | studentID  |\n+----------------+------------+\n| 1575428753262  | 111        |\n+----------------+------------+\n1 row selected (0.098 seconds)\n```\n千万级数据下查询效果很不错\n\n这里附加一条删除二级索引的语句\n```SQL\ndrop index idx_bracelet_info_student_id_time ON bracelet_info;\n```', 'Phoenix查询优化(千万数据0.1秒查询)Phoenix: 5.0,HBase:2.0,Zookeeper:3.4.12', '2019-12-04 11:22:05', '2021-01-12 09:09:14'), (55, '1101', 26, 'Java获取零点时间戳踩坑记录', 'https://media.baby7blog.com/FkMz9abn2NcayM_92-YspXIZouUr', '> # Java获取零点时间戳踩坑记录\n\n开始时是使用下面这种方式\n```Java\nlong now = System.currentTimeMillis();\nnow/(1000*3600*24)*(1000*3600*24)-TimeZone.getDefault().getRawOffset();\n```\n后来发现不对劲，查出来是前一天的时间戳，我以为少了一天，就加了一天\n```Java\nnow/(1000*3600*24)*(1000*3600*24)-TimeZone.getDefault().getRawOffset() + 24*60*60*1000;\n```\n后面又不对，最后发现在每天的00:00到08:00之间查出来是前一天的时间，之所以是八点似乎是跟东八区的时间有关系\n下面是解决方案\n```Java\nnow - (now + TimeZone.getDefault().getRawOffset()) % (1000 * 3600 * 24);\n```', 'Java获取零点时间戳踩坑记录，每天零点到八点间为前一天零电脑', '2019-12-06 18:01:00', '2021-01-12 05:35:49'), (59, '1104', 39, 'Pyhton3爬取全国航班信息', 'https://media.baby7blog.com/FtlXhSAkdSe-hZOVlogwiSaae-07', '> # Pyhton3爬取全国航班信息\n\n## 起因\n快过年了，要回家过年啊。。但是机票太贵，买不起啊。。。\n\n## 想法\n可以查询到家的航班有哪些，找到每个城市最便宜的，然后看看去那个城市火车要多久，整一整可以便宜很多\n\n## 说做就做\n找了个现成的爬虫修改，原爬虫链接：[python爬虫——爬取携程机票信息](https://blog.csdn.net/weixin_42109012/article/details/96423081)\n\n## 结果源代码\n```python\nimport json\n\nimport requests\n\n# 城市字典\ncityDict={\"YIE\":\"阿尔山\",\"AKU\":\"阿克苏\",\"RHT\":\"阿拉善右旗\",\"AXF\":\"阿拉善左旗\",\"AAT\":\"阿勒泰\",\"NGQ\":\"阿里\",\"MFM\":\"澳门\"\n,\"AQG\":\"安庆\",\"AVA\":\"安顺\",\"AOG\":\"鞍山\",\"RLK\":\"巴彦淖尔\",\"AEB\":\"百色\",\"BAV\":\"包头\",\"BSD\":\"保山\",\"BHY\":\"北海\",\"BJS\":\"北京\"\n,\"DBC\":\"白城\",\"NBS\":\"白山\",\"BFJ\":\"毕节\",\"BPL\":\"博乐\",\"CKG\":\"重庆\",\"BPX\":\"昌都\",\"CGD\":\"常德\",\"CZX\":\"常州\"\n,\"CHG\":\"朝阳\",\"CTU\":\"成都\",\"JUH\":\"池州\",\"CIF\":\"赤峰\",\"SWA\":\"潮州\",\"CGQ\":\"长春\",\"CSX\":\"长沙\",\"CIH\":\"长治\",\"CDE\":\"承德\"\n,\"CWJ\":\"沧源\",\"DAX\":\"达州\",\"DLU\":\"大理\",\"DLC\":\"大连\",\"DQA\":\"大庆\",\"DAT\":\"大同\",\"DDG\":\"丹东\",\"DCY\":\"稻城\",\"DOY\":\"东营\"\n,\"DNH\":\"敦煌\",\"DAX\":\"达县\",\"LUM\":\"德宏\",\"EJN\":\"额济纳旗\",\"DSN\":\"鄂尔多斯\",\"ENH\":\"恩施\",\"ERL\":\"二连浩特\",\"FUO\":\"佛山\"\n,\"FOC\":\"福州\",\"FYJ\":\"抚远\",\"FUG\":\"阜阳\",\"KOW\":\"赣州\",\"GOQ\":\"格尔木\",\"GYU\":\"固原\",\"GYS\":\"广元\",\"CAN\":\"广州\",\"KWE\":\"贵阳\"\n,\"KWL\":\"桂林\",\"HRB\":\"哈尔滨\",\"HMI\":\"哈密\",\"HAK\":\"海口\",\"HLD\":\"海拉尔\",\"HDG\":\"邯郸\",\"HZG\":\"汉中\",\"HGH\":\"杭州\",\"HFE\":\"合肥\"\n,\"HTN\":\"和田\",\"HEK\":\"黑河\",\"HET\":\"呼和浩特\",\"HIA\":\"淮安\",\"HJJ\":\"怀化\",\"TXN\":\"黄山\",\"HUZ\":\"惠州\",\"JXA\":\"鸡西\",\"TNA\":\"济南\"\n,\"JNG\":\"济宁\",\"JGD\":\"加格达奇\",\"JMU\":\"佳木斯\",\"JGN\":\"嘉峪关\",\"SWA\":\"揭阳\",\"JIC\":\"金昌\",\"KNH\":\"金门\",\"JNZ\":\"锦州\"\n,\"CYI\":\"嘉义\",\"JHG\":\"景洪\",\"JSJ\":\"建三江\",\"JJN\":\"晋江\",\"JGS\":\"井冈山\",\"JDZ\":\"景德镇\",\"JIU\":\"九江\",\"JZH\":\"九寨沟\",\"KHG\":\"喀什\"\n,\"KJH\":\"凯里\",\"KGT\":\"康定\",\"KRY\":\"克拉玛依\",\"KCA\":\"库车\",\"KRL\":\"库尔勒\",\"KMG\":\"昆明\",\"LXA\":\"拉萨\",\"LHW\":\"兰州\",\"HZH\":\"黎平\"\n,\"LJG\":\"丽江\",\"LLB\":\"荔波\",\"LYG\":\"连云港\",\"LPF\":\"六盘水\",\"LFQ\":\"临汾\",\"LZY\":\"林芝\",\"LNJ\":\"临沧\",\"LYI\":\"临沂\",\"LZH\":\"柳州\"\n,\"LZO\":\"泸州\",\"LYA\":\"洛阳\",\"LLV\":\"吕梁\",\"JMJ\":\"澜沧\",\"LCX\":\"龙岩\",\"NZH\":\"满洲里\",\"LUM\":\"芒市\",\"MXZ\":\"梅州\",\"MIG\":\"绵阳\"\n,\"OHE\":\"漠河\",\"MDG\":\"牡丹江\",\"MFK\":\"马祖\" ,\"KHN\":\"南昌\",\"NAO\":\"南充\",\"NKG\":\"南京\",\"NNG\":\"南宁\",\"NTG\":\"南通\",\"NNY\":\"南阳\"\n,\"NGB\":\"宁波\",\"NLH\":\"宁蒗\",\"PZI\":\"攀枝花\",\"SYM\":\"普洱\",\"NDG\":\"齐齐哈尔\",\"JIQ\":\"黔江\",\"IQM\":\"且末\",\"BPE\":\"秦皇岛\",\"TAO\":\"青岛\"\n,\"IQN\":\"庆阳\",\"JUZ\":\"衢州\",\"RKZ\":\"日喀则\",\"RIZ\":\"日照\",\"SYX\":\"三亚\",\"XMN\":\"厦门\",\"SHA\":\"上海\",\"SZX\":\"深圳\",\"HPG\":\"神农架\"\n,\"SHE\":\"沈阳\",\"SJW\":\"石家庄\",\"TCG\":\"塔城\",\"HYN\":\"台州\",\"TYN\":\"太原\",\"YTY\":\"泰州\",\"TVS\":\"唐山\",\"TCZ\":\"腾冲\",\"TSN\":\"天津\"\n,\"THQ\":\"天水\",\"TGO\":\"通辽\",\"TEN\":\"铜仁\",\"TLQ\":\"吐鲁番\",\"WXN\":\"万州\",\"WEH\":\"威海\",\"WEF\":\"潍坊\",\"WNZ\":\"温州\",\"WNH\":\"文山\"\n,\"WUA\":\"乌海\",\"HLH\":\"乌兰浩特\",\"URC\":\"乌鲁木齐\",\"WUX\":\"无锡\",\"WUZ\":\"梧州\",\"WUH\":\"武汉\",\"WUS\":\"武夷山\",\"SIA\":\"西安\",\"XIC\":\"西昌\"\n,\"XNN\":\"西宁\",\"JHG\":\"西双版纳\",\"XIL\":\"锡林浩特\",\"DIG\":\"香格里拉(迪庆)\",\"XFN\":\"襄阳\",\"ACX\":\"兴义\",\"XUZ\":\"徐州\",\"HKG\":\"香港\"\n,\"YNT\":\"烟台\",\"ENY\":\"延安\",\"YNJ\":\"延吉\",\"YNZ\":\"盐城\",\"YTY\":\"扬州\",\"LDS\":\"伊春\",\"YIN\":\"伊宁\",\"YBP\":\"宜宾\",\"YIH\":\"宜昌\"\n,\"YIC\":\"宜春\",\"YIW\":\"义乌\",\"INC\":\"银川\",\"LLF\":\"永州\",\"UYN\":\"榆林\",\"YUS\":\"玉树\",\"YCU\":\"运城\",\"ZHA\":\"湛江\",\"DYG\":\"张家界\"\n,\"ZQZ\":\"张家口\",\"YZY\":\"张掖\",\"ZAT\":\"昭通\",\"CGO\":\"郑州\",\"ZHY\":\"中卫\",\"HSN\":\"舟山\",\"ZUH\":\"珠海\",\"WMT\":\"遵义(茅台)\",\"ZYI\":\"遵义(新舟)\"}\n# 要排除的城市\nexcludeCitys = [\'乌鲁木齐\',\'克拉玛依\',\'吐鲁番\',\'哈密\',\'昌吉\',\'阜康\',\'米泉\',\'博乐\',\'库尔勒\',\'阿克苏\',\'阿图什\',\'喀什\',\'和田\',\'奎屯\',\n           \'伊宁\',\'塔城\',\'乌苏\',\'阿勒泰\',\'库车\']\nurl = \"https://flights.ctrip.com/itinerary/api/12808/products\"\nheaders = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0\",\n    \"Referer\": \"https://flights.ctrip.com/itinerary/oneway/bjs-sha?date=2019-07-18\",\n    \"Content-Type\": \"application/json\"\n    # 此处可以增加cookies\n}\n\n\n# 获取这个城市当天最便宜的航班\ndef getCheapFlight(dcity, acity, date):\n    request_payload = {\n        \"flightWay\": \"Oneway\",\n        \"classType\": \"ALL\",\n        \"hasChild\": False,\n        \"hasBaby\": False,\n        \"searchIndex\": 1,\n        \"airportParams\": [\n            {\"dcity\": dcity, \"acity\": acity, \"dcityname\": cityDict[dcity], \"acityname\": cityDict[acity],\n             \"date\": date, \"dcityid\": 1, \"acityid\": 2}\n        ]\n    }\n    # post请求\n    response = requests.post(url, data=json.dumps(request_payload), headers=headers).text\n    # 很多航班信息在此分一下\n    routeList = json.loads(response).get(\'data\').get(\'routeList\')\n    # 航班信息列表\n    cheapFlight = {}\n    # 依次读取每条信息\n    if routeList is None: return {}\n    for route in routeList:\n        # 判断是否有信息，有时候没有会报错\n        if len(route.get(\'legs\')) == 1:\n            legs = route.get(\'legs\')\n            flight = legs[0].get(\'flight\')\n            # 提取想要的信息\n            airlineName = flight.get(\'airlineName\')                                         # 航空公司\n            flightNumber = flight.get(\'flightNumber\')                                       # 航班号\n            departureDate = flight.get(\'departureDate\')                                     # 起飞时间\n            arrivalDate = flight.get(\'arrivalDate\')                                         # 到达时间\n            departureCityName = flight.get(\'departureAirportInfo\').get(\'cityName\')          # 起飞城市\n            departureAirportName = flight.get(\'departureAirportInfo\').get(\'airportName\')    # 起飞机场\n            arrivalCityName = flight.get(\'arrivalAirportInfo\').get(\'cityName\')              # 到达城市\n            arrivalAirportName = flight.get(\'arrivalAirportInfo\').get(\'airportName\')        # 到达机场\n            price = legs[0].get(\'cabins\')[0].get(\'price\').get(\'price\')                      # 航班价格\n            # 选出最便宜的航班\n            if (\'price\' not in cheapFlight) or (price < cheapFlight[\'price\']):\n                cheapFlight[\'airlineName\'] = airlineName\n                cheapFlight[\'flightNumber\'] = flightNumber\n                cheapFlight[\'departureDate\'] = departureDate\n                cheapFlight[\'arrivalDate\'] = arrivalDate\n                cheapFlight[\'departureCityName\'] = departureCityName\n                cheapFlight[\'departureAirportName\'] = departureAirportName\n                cheapFlight[\'arrivalCityName\'] = arrivalCityName\n                cheapFlight[\'arrivalAirportName\'] = arrivalAirportName\n                cheapFlight[\'price\'] = price\n    return cheapFlight\n\n\n# 开始\nif __name__ == \"__main__\":\n    # 重点城市\n    endCity = \'URC\'\n    # 航班日期\n    time = \'2020-01-20\'\n    cityList = list(cityDict.keys())\n    for city in cityList:\n        cityFlight = getCheapFlight(city, endCity, time)\n        # 判空\n        if not cityFlight:\n            continue\n        # 价格筛选\n        if cityFlight[\'price\'] > 1000:\n            continue\n        # 删除要排除的城市\n        isPrint = True\n        for excludeCity in excludeCitys:\n            if excludeCity == cityFlight[\'departureCityName\']:\n                isPrint = False\n                break\n        if isPrint:\n            print(cityFlight)\n\n\n```', '可以查询到家的航班有哪些，找到每个城市最便宜的，然后看看去那个城市火车要多久，整一整可以便宜很多', '2019-12-16 15:44:29', '2021-01-11 19:21:22'), (61, '1100', 19, '基于Element-UI的Vue动态输入框', 'https://media.baby7blog.com/FqIwaPtC1QqY5X-X1Xpr2h9l5AXI', '> # 基于Element-UI的Vue动态输入框\n\n由于需要一个不确定数量的输入控件所以做了出来，然后封装了一下，大家自取\n\n![控件预览图.png](https://media.baby7blog.com/1577515436785940696)\n\nvue源码:DynamicInput.vue\n```vue\n<!--\n---- Title: 动态输入框\n---- Time:  2019/12/23\n---- By:    陈思奇\n -->\n<template>\n  <div>\n    <div v-for=\"(item, index) in items\" v-bind:key=\"index\">\n      <el-input\n        v-model=\"item.name\"\n        :placeholder=\"\'请输入\' + config.title\"\n        class=\"dynamic-input\"\n        align=\"right\">\n      </el-input>\n      <el-button\n        type=\"danger\"\n        icon=\"el-icon-delete\"\n        class=\"delete-input\"\n        v-if=\"index !== 0\"\n        @click=\"deleteItem(index)\">\n      </el-button>\n    </div>\n    <el-button\n      type=\"primary\"\n      icon=\"el-icon-plus\"\n      @click=\"addItem\"\n      style=\"float: left\">\n      {{\'添加\' + config.title}}\n    </el-button>\n    <el-button\n      v-if=\"config.showMsg\"\n      @click=\"print\"\n      style=\"float: left\">\n      输出信息\n    </el-button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \'DynamicInput\',\n  props: {\n    // 输入数组\n    items: {\n      type: Array,\n      default: () => [\n        { name: \'\' }\n      ]\n    },\n    // 配置\n    config: {\n      type: Object,\n      default: () => [{\n        title: \'\',\n        showMsg: false\n      }]\n    }\n  },\n  methods: {\n    addItem () {\n      this.items.push({\n        name: \'\'\n      })\n    },\n    deleteItem (index) {\n      this.items.splice(index, 1)\n    },\n    print () {\n      let itemNames = \'\'\n      for (let i = 0; i < this.items.length; i++) {\n        if (this.items[i].name != null && this.items[i].name !== \'\') {\n          if (itemNames === \'\') {\n            itemNames += this.items[i].name\n          } else {\n            itemNames += \',\' + this.items[i].name\n          }\n        }\n      }\n      alert(itemNames)\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .dynamic-input{\n    width: 89.4%;\n    float:left;\n    margin-bottom: 5px;\n  }\n  .delete-input{\n    float: right\n  }\n</style>\n```\n\n### 引入\n```vue\n<template>\n  <div class=\"hello\">\n    <DynamicInput\n      :items=\"items\"\n      :config=\"config\">\n    </DynamicInput>\n  </div>\n</template>\n\n<script>\nimport DynamicInput from \'./DynamicInput\'\nexport default {\n  name: \'HelloWorld\',\n  components: {DynamicInput},\n  data () {\n    return {\n      items: [\n        { name: \'孩子1\' },\n        { name: \'孩子2\' },\n        { name: \'\' }\n      ],\n      config: {\n        title: \'孩子\',\n        showMsg: true\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n</style>\n```', '由于需要一个不确定数量的输入控件所以做了出来，然后封装了一下，大家自取', '2019-12-23 17:31:26', '2021-01-12 04:27:26'), (62, '1113', 20, 'centos7.5安装mysql8', 'https://media.baby7blog.com/FsGXMqNDGJHr_ZRM75HzJTesqr4H', '> # centos7.5安装mysql8\n之前装的是个mysql5.7，但是挪数据什么的太麻烦了，就想装个mysql8，一般网上安装都是用yum安装，但我的用yum安装5.7很快，8就是装不上，一直报错，最后采用了另一种方法，参考了[centos7.6 上mysql8.0的安装](https://www.cnblogs.com/myt2000/p/11263777.html)，有修改\n下载mysql\n```linux\nwget https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-8.0/mysql-8.0.17-linux-glibc2.12-x86_64.tar.xz\n```\n进行解压和移动解压文件位置\n```linux\ntar xf mysql-8.0.17-linux-glibc2.12-x86_64.tar.xz\nmv mysql-8.0.17-linux-glibc2.12-x86_64 /usr/local/mysql\n```\n\n建立目录并赋予权限\n```linux\ncd /usr/local/mysql\nmkdir data sql_log undo_log\nchown mysql:root -R data/ sql_log/ undo_log/\n```\n\n添加msyql路径到path\n```linux\nexport PATH=$PATH:/usr/localmysql/bin\n```\n\n```linux\nsource /etc/profile\n```\n\n写入my.cnf，放在最下方\n```linux\nvim /etc/my.cnf\n```\n\n初始化mysql\n```linux\nmysqld --initialize --user=root --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data\n```\n\n\n拷贝启动程序\n```linux\ncd /usr/local/mysql/support-files\ncp mysql.server /etc/init.d/mysqld\n```\n\n查询密码，一般最后的乱码就是密码\n```linux\ngrep password mysql-error.log\n```\n\n登录mysql，然后输入刚才查到的密码\n```linux\nmysql -uroot -p\n```\n\n> my.cnf文件\n```mysql\n[client]\nport=3306\nsocket=/usr/local/mysql/data/mysql.sock\n[mysqld]\n# Skip #\nskip_name_resolve= 1\nskip-external-locking=1 \nsymbolic-links= 0\n# GENERAL #\nuser = mysql\ndefault_storage_engine=InnoDB\ncharacter-set-server=utf8\nsocket=/usr/local/mysql/data/mysql.sock\npid_file=/usr/local/mysql/data/mysqld.pid\nbasedir = /usr/local/mysql\n#log_error=/usr/local/mysql/sql_log/mysql_1302.err\nport=3306\nbind-address=0.0.0.0\nexplicit_defaults_for_timestamp=on\n#sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\nsql_mode=NO_ENGINE_SUBSTITUTION\n#read_only=on\n# MyISAM #\nkey_buffer_size=32M\n#myisam_recover=FORCE,BACKUP\n\n# undo log #\ninnodb_undo_directory=/usr/local/mysql/undo_log\ninnodb_undo_tablespaces=16\n\n# SAFETY #\nmax_allowed_packet=100M\nmax_connect_errors=1000000\nsysdate_is_now=1\n#innodb	= FORCE\n#innodb_strict_mode=1\nsecure-file-priv=/usr/local/mysql/sql_log\ndefault_authentication_plugin=\'mysql_native_password\'\n# Replice #\n server-id=1306\n relay_log=mysqld-relay-bin\n gtid_mode=on\n enforce-gtid-consistency\n log-slave-updates=on\n master_info_repository=TABLE\n relay_log_info_repository=TABLE\n\n\n# group replication specific options\n#plugin-load=group_replication.so\n#group_replication=FORCE_PLUS_PERMANENT\n#transaction-write-set-extraction=XXHASH64\n#loose-group_replication_start_on_boot=ON\n#loose-group_replication_bootstrap_group=OFF\n#loose-group_replication_group_name=\'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\'\n#group_replication_local_address=\'10.102.13.2:33061\'\n#group_replication_group_seeds=\'10.102.13.3:33061,10.102.13.5:33061\'\n\n# DATA STORAGE #\n datadir=/usr/local/mysql/data/\n tmpdir=/tmp\n \n# BINARY LOGGING #\n log_bin=/usr/local/mysql/sql_log/mysql-bin\n max_binlog_size=1000M\n binlog_format=row\n expire_logs_days=7\n# sync_binlog=1\n\n # CACHES AND LIMITS #\n tmp_table_size                 = 32M\n max_heap_table_size            = 32M\n max_connections                = 4000\n thread_cache_size              = 2048\n open_files_limit               = 65535\n table_definition_cache         = 4096\n table_open_cache               = 4096\n sort_buffer_size               = 2M\n read_buffer_size               = 2M\n read_rnd_buffer_size           = 2M\n# thread_concurrency             = 24\n join_buffer_size = 1M\n# table_cache = 32768\n thread_stack = 512k\n max_length_for_sort_data = 16k\n\n\n # INNODB #\n innodb_flush_method            = O_DIRECT\n innodb_log_buffer_size = 16M\n innodb_flush_log_at_trx_commit = 2\n innodb_file_per_table          = 1\n innodb_buffer_pool_size        = 2G\n #innodb_buffer_pool_instances = 8\n innodb_stats_on_metadata = off\n innodb_open_files = 8192\n innodb_read_io_threads = 16\n innodb_write_io_threads = 16\n innodb_io_capacity = 20000\n innodb_thread_concurrency = 0\n innodb_lock_wait_timeout = 60\n innodb_old_blocks_time=1000\n innodb_use_native_aio = 1\n innodb_purge_threads=1\n innodb_change_buffering=all\n innodb_log_file_size = 128M\n innodb_log_files_in_group = 3\n innodb_data_file_path  = ibdata1:1024M:autoextend\n \n innodb_rollback_on_timeout=on\n # LOGGING #\n log_error=/usr/local/mysql/sql_log/mysql-error.log\n # log_queries_not_using_indexes  = 1\n # slow_query_log                 = 1\nslow_query_log_file=/usr/local/mysql/sql_log/slowlog_1305.log\n\n # TimeOut #\n #interactive_timeout = 30\n #wait_timeout        = 30\n #net_read_timeout = 60\n\n[mysqldump]\nquick\nmax_allowed_packet = 100M\n\n[mysql]\nno-auto-rehash\n# Remove the next comment character if you are not familiar with SQL\n#safe-updates\n\n[myisamchk]\nkey_buffer_size = 256M\nsort_buffer_size = 256M\nread_buffer = 2M\nwrite_buffer = 2M\n\n[mysqlhotcopy]\ninteractive-timeout\n```', '用centos7.5服务器安装myql8踩了挺多坑，记录一下，千万不要用yum在centos7.5安装mysql8', '2020-03-25 13:36:20', '2021-01-11 08:34:50'), (63, '1104', 14, '为Scrapy爬虫添加UA池和动态IP代理池', 'https://media.baby7blog.com/FjkvD2ElfLRfnznMQ7zpqDP-RVsH', '> # 为Scrapy爬虫添加UA池和动态IP代理池\n大家在进行爬取数据时可能会被封,这种情况可以通过降低爬取速度、更换user-agent、更换ip来预防，这里写了我的爬虫经验\n## 添加UA池\n在setting.py中添加\n```python\nUSER_AGENT_LIST = [\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1\",\n    \"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\",\n    \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5\",\n    \"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3\",\n    \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3\",\n    \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\",\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3\",\n    \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24\"\n]\n```\n然后在setting.py中取消注释DOWNLOADER_MIDDLEWARES(*处改成你自己的)：\n```python\nDOWNLOADER_MIDDLEWARES = {\n   \'*.middlewares.Job51SpiderMiddleware\': 543,\n   \'*.middlewares.Job51DownloaderMiddleware\': 543,\n}\n```\n然后再middlewares.py的*DownloaderMiddleware类中的process_request函数中添加\n```python\n        user_agent = random.choice(spider.settings[\'USER_AGENT_LIST\'])\n        print(user_agent)\n        request.headers[\'User-Agent\'] = user_agent\n```\n运行后查看是否输出user-agent，输出代表成功了\n\n## 添加动态IP代理池\n添加IP代理池有很大程度上防止被封，但是免费的IP代理很难找到，找到了也用不久（事实上我就没找到过能用的），后来发现了个[阿布云](https://www.abuyun.com/)，有动态IP代理，然后是注册就送三个小时，并发每秒5个，这着实爽到我了，后面再用是每秒5个的话一小时一块钱！？，对于用不了那么多数据量的来说够够的了，添加并发的话大概每5个/秒的话是加4-5毛。没打广告啊(￣▽￣)\"\n下面讲讲具体操作：\n在middlewares.py上方添加\n```python\n# 阿布云 ip代理\nimport base64\n# 代理服务器\nproxyServer = \"http://http-dyn.abuyun.com:9020\"\n# 代理隧道验证信息\nproxyUser = \"填你自己在阿布云获取到的\"\nproxyPass = \"填你自己在阿布云获取到的\"\nproxyAuth = \"Basic \" + base64.urlsafe_b64encode(bytes((proxyUser + \":\" + proxyPass), \"ascii\")).decode(\"utf8\")\n```\n然后在*SpiderMiddleware类的process_request函数里增加：\n```python\n        request.meta[\"proxy\"] = proxyServer\n        request.headers[\"Proxy-Authorization\"] = proxyAuth\n        print(proxyServer)\n        print(proxyAuth)\n```\n运行后查看是否有输出 ', '大家在进行爬取数据时可能会被封,这种情况可以通过降低爬取速度、更换user-agent、更换ip来预防，这里写了我的爬虫经验', '2020-03-25 14:31:41', '2021-01-11 10:41:24'), (64, '1101', 12, 'python通过数据库自动生成SSM代码', 'https://media.baby7blog.com/Fs2jLDGO2v279jmDu1Y8N0BNO3a4', '> # python通过数据库自动生成SSM代码\r\n前段时间要写几个差不多的项目，后天都是用的SSM，然后用ajax通信，就先敲了个这个出来。\r\n思路是做一个模板，然后读取数据库结构，最后生成代码包。\r\n因为比较着急，也没细做，先放到这，后面有时间了完善一下。\r\n## 主模块\r\n```python\r\n#!/usr/bin/python3\r\nimport mysql\r\nimport file\r\nimport template\r\n\r\ndb_name = \"*\"    # 数据库名\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    # 连接数据库读取表列表\r\n    table_list = mysql.get_table_list(db_name)\r\n    # 获取代码模板\r\n    template_list = file.get_template_list()\r\n    for table in table_list:\r\n        # 获取表结构\r\n        table_struct_list = mysql.get_table_struct(table, db_name)\r\n        # 对代码模板进行加工\r\n        code_gen_list = template.handle(table, table_struct_list, template_list)\r\n        # 输出成品代码\r\n        file.save_code_gen(table, code_gen_list)\r\n\r\n```\r\n## 文件模块\r\n```linux\r\n#!/usr/bin/python3\r\nimport os\r\nimport template\r\n\r\n# 代码模板列表\r\ntemplate_baseJavaWeb_path_list = [\r\n    \"template-baseJavaWeb/bean/Base.java\",\r\n    \"template-baseJavaWeb/controller/BaseController.java\",\r\n    \"template-baseJavaWeb/dao/BaseMapper.java\",\r\n    \"template-baseJavaWeb/mapping/BaseMapper.xml\",\r\n    \"template-baseJavaWeb/service/BaseService.java\",\r\n    \"template-baseJavaWeb/serviceImpl/BaseServiceImpl.java\"\r\n]\r\n# template_ssm_manage_path_list = [\r\n#     \"template-ssm-manage/controller/BaseController.java\",\r\n#     \"template-ssm-manage/mapper/BaseMapper.java\",\r\n#     \"template-ssm-manage/mapper/BaseMapper.xml\",\r\n#     \"template-ssm-manage/service/BaseService.java\",\r\n#     \"template-ssm-manage/po/Base.java\"\r\n# ]\r\n# template_permission_path_list = [\r\n#     \"template-permission/controller/BaseController.java\",\r\n#     \"template-permission/mapper/BaseMapper.java\",\r\n#     \"template-permission/mapper/BaseMapper.xml\",\r\n#     \"template-permission/pojo/Base.java\",\r\n#     \"template-permission/service/impl/BaseServiceImpl.java\",\r\n#     \"template-permission/service/BaseService.java\"\r\n# ]\r\n\r\ntemplate_path_list = template_baseJavaWeb_path_list\r\n\r\n\r\ndef get_template_list():\r\n    \"\"\"代码模板列表获取\r\n\r\n    :return: 代码模板列表\r\n    \"\"\"\r\n    template_list = []\r\n    for template_path in template_path_list:\r\n        with open(template_path, \'r\', encoding=\'UTF-8\') as file:\r\n            template_list.append(file.read())\r\n    print(\"获取代码模板成功，代码模板路径列表：\" + str(template_path_list))\r\n    return template_list\r\n\r\n\r\ndef save_code_gen(table_name, code_gen_list):\r\n    \"\"\"成品代码保存\r\n\r\n    :param table_name: 表名\r\n    :param code_gen_list: 成品代码列表\r\n    \"\"\"\r\n    index = 0\r\n    for template_path in template_path_list:\r\n        template_folder_path = template_path[:template_path.find(\"Base\")-1]\r\n        template_folder_path = template_folder_path.replace(\"template\", \"code-gen\")\r\n        if not os.path.exists(template_folder_path):\r\n            os.makedirs(template_folder_path)\r\n        template_path = template_path.replace(\"template\", \"code-gen\")\r\n        template_path = template_path.replace(\"Base\", template.line_to_hump(table_name[\"Name\"]))\r\n        print(\"保存路径：\" + template_path)\r\n        with open(template_path, \'w+\', encoding=\'UTF-8\') as file:\r\n            file.write(code_gen_list[index])\r\n        index = index + 1\r\n    print(\"保存成品代码成功！！！\")\r\n```\r\n## 数据库模块\r\n```linux\r\nimport pymysql\r\n\r\nhost = \'localhost\'\r\nuser = \'root\'\r\npassword = \'root\'\r\n\r\n\r\ndef get_table_list(db_name):\r\n    \"\"\"连接数据库读取表列表\r\n\r\n    :return: 数据库表列表\r\n    \"\"\"\r\n    tables = []\r\n    connection = pymysql.connect(host=host, user=user, password=password, db=db_name,\r\n                                 charset=\'utf8\', cursorclass=pymysql.cursors.DictCursor)\r\n    try:\r\n        with connection.cursor() as cursor:\r\n            cursor.execute(\"show table status;\")\r\n            table = cursor.fetchall()  # 获取所有（输出是列表，列表中的每个元素是字典，字典的KEY是Tables_in_拼接数据库名称）\r\n        for k in range(len(table)):  # 提取表名\r\n            tables.append({\"Name\": table[k][\'Name\'], \"Comment\": table[k][\'Comment\']})\r\n    finally:\r\n        connection.commit()\r\n        connection.close()\r\n    print(\"获取表名成功，[表名,注释]列表：\" + str(tables))\r\n    return tables\r\n\r\n\r\ndef get_table_struct(table_name, db_name):\r\n    \"\"\"获取表结构\r\n    \r\n    :param table_name: {Name:表名,Comment:注释}\r\n    :return: 表结构\r\n    \"\"\"\r\n    structs = []\r\n    connection = pymysql.connect(host=host, user=user, password=password, db=db_name,\r\n                                 charset=\'utf8\', cursorclass=pymysql.cursors.DictCursor)\r\n    cursor = connection.cursor()\r\n    sql = \"show full columns from `\" + table_name[\"Name\"] + \"`\"\r\n    cursor.execute(sql)  # 查询表结构\r\n    for x in cursor:\r\n        structs.append(x)\r\n    connection.close()\r\n    print(\"获取表结构成功，结构列表：\" + str(structs))\r\n    return structs\r\n```\r\n## 代码生成模块\r\n```linux\r\n#!/usr/bin/python3\r\nimport re\r\n# 模板规则:\r\n# 形如$base$的用表名替换\r\n# 形如$Base$的用表名大驼峰风格替换\r\n# 形如$Note$的用表注释替换\r\n# 形如$for *$(*为长度不一的字符串)的\r\n#   其内有%javaType%的用字段类型转Java类型替换\r\n#   其内有%type%的用字段类型替换\r\n#   其内有%note%的用字段注释替换\r\n#   其内有%name_%的用字段名替换\r\n#   其内有%name%的用字段名(转小驼峰)替换\r\n#   其内有%Name%的用字段名(转大驼峰)替换\r\n#   其内有%in-*%(*为长度不一的字符串)的*用来做列表分隔符，例子:a,b,c中的,\r\n# $for0 *$为列表第一个\r\n# $for+ *$为列表从第二个到最后一个\r\n\r\nre_for = r\"\\$for[a-zA-Z0-9%\\-; 	\\n\\r\\.=\\(\\)<>{}/\\\"\\*@_,!\'#+]+\\$\"\r\n\r\n\r\ndef line_to_hump(line):\r\n    \"\"\"下划线风格转为大驼峰\r\n\r\n    :param line: 下划线风格字符串\r\n    :return: 大驼峰风格字符串\r\n    \"\"\"\r\n    if \"_\" in line:\r\n        return \"\".join(map(lambda x: x.capitalize(), line.split(\"_\")))\r\n    return line.capitalize()\r\n\r\n\r\ndef to_little_hump(hump):\r\n    \"\"\"转为小驼峰\r\n\r\n    :param line: 大驼峰风格字符串\r\n    :return: 小驼峰风格字符串\r\n    \"\"\"\r\n    return hump[0:1].lower() + hump[1:]\r\n\r\n\r\ndef to_type(type):\r\n    if \"int\" in type:\r\n        return \"INTEGER\"\r\n    if \"double\" in type:\r\n        return \"DOUBLE\"\r\n    if \"varchar\" in type:\r\n        return \"VARCHAR\"\r\n    if \"text\" in type:\r\n        return \"VARCHAR\"\r\n    if \"date\" in type:\r\n        return \"DATE\"\r\n    if \"decimal\" in type:\r\n        return \"DECIMAL\"\r\n\r\n\r\ndef to_java_type(type):\r\n    if \"int\" in type:\r\n        return \"Integer\"\r\n    if \"double\" in type:\r\n        return \"Double\"\r\n    if \"varchar\" in type:\r\n        return \"String\"\r\n    if \"text\" in type:\r\n        return \"String\"\r\n    if \"date\" in type:\r\n        return \"Date\"\r\n    if \"decimal\" in type:\r\n        return \"BigDecimal\"\r\n\r\n\r\ndef handle_table_name(table_name, template_list):\r\n    \"\"\"表名处理\r\n\r\n    :param table_name: {Name:表名,Comment:注释}\r\n    :param template_list: 代码模板\r\n    :return: 加工代码\r\n    \"\"\"\r\n    code_gen_list = []\r\n    for template in template_list:\r\n        print()\r\n        template = template.replace(\"$base$\", table_name[\"Name\"])\r\n        template = template.replace(\"$Base$\", line_to_hump(table_name[\"Name\"]))\r\n        template = template.replace(\"$Note$\", table_name[\"Comment\"])\r\n        code_gen_list.append(template)\r\n    return code_gen_list\r\n\r\n\r\ndef get_for_handle_list(table_struct, for_sign_list, index, length):\r\n    \"\"\"列表内处理\r\n\r\n    :param table_struct: 字段结构\r\n    :param index: 循环下标\r\n    :param for_sign_list: for模板列表\r\n    :return:\r\n    \"\"\"\r\n    for_handle_list = []\r\n    for for_sign in for_sign_list:\r\n        before_for_sign = for_sign\r\n        if \"$for0\" in for_sign and index != 0:\r\n            for_handle_list.append(for_sign)\r\n            continue\r\n        if \"$for+\" in for_sign and index == 0:\r\n            for_handle_list.append(for_sign)\r\n            continue\r\n        if \"%name_%\" in for_sign:\r\n            for_sign = for_sign.replace(\"%name_%\", table_struct[\"Field\"])\r\n        if \"%name%\" in for_sign:\r\n            for_sign = for_sign.replace(\"%name%\", to_little_hump(line_to_hump(table_struct[\"Field\"])))\r\n        if \"%Name%\" in for_sign:\r\n            for_sign = for_sign.replace(\"%Name%\", line_to_hump(table_struct[\"Field\"]))\r\n        if \"%note%\" in for_sign:\r\n            for_sign = for_sign.replace(\"%note%\", table_struct[\"Comment\"])\r\n        if \"%javaType%\" in for_sign:\r\n            for_sign = for_sign.replace(\"%javaType%\", to_java_type(table_struct[\"Type\"]))\r\n        if \"%type%\" in for_sign:\r\n            for_sign = for_sign.replace(\"%type%\", to_type(table_struct[\"Type\"]))\r\n        sign = re.search(r\"%in-[ ,]+%\", for_sign)\r\n        if sign:\r\n            for_sign = for_sign.replace(sign.group(), \",\")\r\n        for_sign = for_sign.replace(\"$for0\", \"\").replace(\"$for+\", \"\")\r\n        for_sign = for_sign.replace(\"$for\", \"\").replace(\"$\", \"\")\r\n        if index < (length - 1):\r\n            for_sign = for_sign + before_for_sign\r\n        else:\r\n            for_sign = for_sign[::-1]\r\n            for_sign = for_sign.replace(\",\", \"\", 1)\r\n            for_sign = for_sign[::-1]\r\n        for_handle_list.append(for_sign)\r\n    return for_handle_list\r\n\r\n\r\ndef handle_struct_list(table_struct_list, template_list):\r\n    \"\"\"列表处理\r\n\r\n    :param table_struct_list: 表结构列表\r\n    :param template_list: 代码模板\r\n    :return: 加工代码\r\n    \"\"\"\r\n    code_gen_list = []\r\n    for template in template_list:\r\n        index = 0\r\n        for table_struct in table_struct_list:\r\n            # 获取for列表并留下恢复记号\r\n            for_sign = re.search(re_for, template)\r\n            for_sign_list = []\r\n            while for_sign:\r\n                for_sign_str = for_sign.group()\r\n                for_sign_list.append(for_sign_str)\r\n                template = template.replace(for_sign.group(), \"^^^\", 1)\r\n                for_sign = re.search(re_for, template)\r\n            # 进行列表内处理\r\n            for_handle_list = get_for_handle_list(table_struct, for_sign_list, index, len(table_struct_list))\r\n            # 进行恢复替换\r\n            for for_handle in for_handle_list:\r\n                template = template.replace(\"^^^\", for_handle, 1)\r\n            index = index + 1\r\n        code_gen_list.append(template)\r\n    return code_gen_list\r\n\r\n\r\ndef handle_end(template_list):\r\n    \"\"\"最后处理\r\n\r\n    :param template_list: 代码模板\r\n    :return: 加工代码\r\n    \"\"\"\r\n    code_handle_list = []\r\n    for template in template_list:\r\n        for_sign = re.search(re_for, template)\r\n        while for_sign:\r\n            template = template.replace(for_sign.group(), \"\")\r\n            for_sign = re.search(re_for, template)\r\n        code_handle_list.append(template)\r\n    code_gen_list = []\r\n    for template in code_handle_list:\r\n        template = template.replace(\"$for0\", \"\").replace(\"$for+\", \"\")\r\n        template = template.replace(\"$for\", \"\").replace(\"$\", \"\").replace(\"^^^\", \"\")\r\n        code_gen_list.append(template)\r\n    return code_gen_list\r\n\r\n\r\ndef handle(table_name, table_struct_list, template_list):\r\n    \"\"\"总处理函数\r\n\r\n    :param table_name: {Name:表名,Comment:注释}\r\n    :param table_struct_list: 表结构列表\r\n    :param template_list: 模板列表\r\n    :return: 成品代码列表\r\n    \"\"\"\r\n    code_gen_list = handle_table_name(table_name, template_list)\r\n    code_gen_list = handle_struct_list(table_struct_list, code_gen_list)\r\n    code_gen_list = handle_end(code_gen_list)\r\n    return code_gen_list\r\n```\r\n这些就是全部代码了，然后还要根据模板规则写个模板，最后运行就可以\r\n这里放上模板和代码，对了还要在项目里加个base包和里面的文件，里面是抽出来的基本增删改查操作，base也放进去了：\r\n\r\n\r\n[点击下载文件](https://media.baby7blog.com/code-gen-ssm.7z)', '思路是做一个模板，然后读取数据库结构，最后生成代码包。', '2020-03-25 14:57:29', '2021-01-11 08:05:36');
INSERT INTO `blog` VALUES (65, '1113', 8, '基于谷歌/火狐无头浏览器模式解决Vue的SEO问题 2.0', 'https://media.baby7blog.com/Fm0bs4IF_GPYs8pBXQU2FkBvFclJ', '> # 基于谷歌/火狐无头浏览器模式解决Vue的SEO问题 2.0\r\n\r\n这是 基于谷歌/火狐无头浏览器模式解决Vue的SEO问题 2.0版本，优化了[上一个版本](https://www.baby7blog.com/myBlog?id=39)，去掉了nodejs模块，集成到了python中\r\n下面是优化过后的python代码，\r\n\r\n这里使用python调用火狐浏览器获取渲染数据\r\n```python\r\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\r\nfrom selenium.webdriver.chrome.options import Options\r\nfrom selenium import webdriver\r\n\r\nhost = (\'localhost\', 3000)\r\n\r\n\r\nclass Resquest(BaseHTTPRequestHandler):\r\n    def getHTML(self, url):\r\n        options = Options()\r\n        options.add_argument(\'--headless\')  # 无界面\r\n        options.add_argument(\'--no-sandbox\')\r\n        options.add_argument(\'--disable-gpu\')\r\n        options.add_argument(\'--disable-dev-shm-usage\')\r\n        browser = webdriver.Chrome(options=options)  # 打开浏览器\r\n        browser.get(url=url)  # 请求\r\n        html_msg = browser.page_source.encode(\'GBK\', \'ignore\').decode(\'GBk\')\r\n        browser.close()  # 关闭浏览器\r\n        browser.quit()  # # 杀死chrome浏览器的连接桥(chromedriver)的进程\r\n        return html_msg\r\n\r\n    def do_GET(self):\r\n        print(self.headers)\r\n        self.send_response(200)\r\n        self.end_headers()\r\n        self.wfile.write(self.getHTML(\"https://www.baby7blog.com\" + self.path).encode())\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    server = HTTPServer(host, Resquest)\r\n    print(\"Starting server, listen at: %s:%s\" % host)\r\n    server.serve_forever()\r\n\r\n```\r\n', '这是 基于谷歌/火狐无头浏览器模式解决Vue的SEO问题 2.0版本，优化了上一个版本，去掉了nodejs模块，集成到了python中', '2020-03-25 15:09:59', '2021-01-11 02:39:03'), (66, '1113', 12, 'Hbase 3节点分布式集群搭建（服务器）', 'https://media.baby7blog.com/Fp2rhwM_SXzZ7gOrPjiScRgynSA8', '> # Hbase 3节点分布式集群搭建（服务器）\n\n主要参考了[hbase高可用性分布式集群搭建（3节点超详细集群安装）](https://blog.csdn.net/qq_34758475/article/details/84337320)\n中间踩了一堆坑，最后发现服务器的host应该这么设置(vim /etc/hosts)：\nmaster\n```hosts\n127.0.0.1 localhost\n填你的内网IP master\n填你的公网IP slave1\n填你的公网IP slave2\n```\nslave1\n```hosts\n127.0.0.1 localhost\n填你的公网IP master\n填你的内网IP slave1\n填你的公网IP slave2\n```\nslave2\n```hosts\n127.0.0.1 localhost\n填你的公网IP master\n填你的公网IP slave1\n填你的内网IP slave2\n```\n这是三节点的配置，多节点以此类推\n然后三个服务器之间的安全组要配置：对其余两台服务器放通所有协议和端口（注意！！！只对其余两台服务器，别全放开了，可能别人分分钟给你黑了）', '根据别人的搭建经验 ，从在虚拟机上的安装修改为服务器的安装', '2020-03-25 15:23:23', '2021-01-12 13:42:13'), (67, '1100', 24, '针对微信获取小程序码scene参数的数据压缩算法', 'https://media.baby7blog.com/Fh9vlJ_AsmG6B6AMGBegmgKciVTa', '> # 针对微信获取小程序码scene参数的数据压缩算法\n### 一、前言\n微信小程序现在有四个获取小程序码的接口，分别是:\n* #### 接口 A: 适用于需要的码数量较少的业务场景\n生成小程序码，可接受 path 参数较长，生成个数受限，请谨慎使用。\n* #### 接口 B：适用于需要的码数量极多的业务场景\n生成小程序码，可接受页面参数较短，生成个数不受限。\n* #### 接口 C：适用于需要的码数量较少的业务场景（不推荐使用）\n生成二维码，可接受 path 参数较长，生成个数受限。\n* #### 接口 D：适用于“一物一码”的业务场景\n微信一物一码 支持生成小程序码。微信通过“一物一码”接口发放的二维码相比较普通链接二维码更安全、支持更小的印刷面积，支持跳转到指定小程序页面，且无数量限制\n\n### 二、问题\n需要生成的小程序码数量要求很大，接口D的场景不一致，不考虑，接口A和接口C的生成数量加起来不超过十万，剩下的选择只有接口B，但是接口B的要求scene参数为（最大32个可见字符，只支持数字，大小写英文以及部分特殊字符：!#$&\'()*+,/:;=?@-._~，其它字符请自行编码为合法字符）\n算起来的话数字10个，大小写英文有26*2=52个，加上特殊字符共有82个字符，业务要求将两个信息放入32个字符内，不考虑别的手段，两个信息一个信息的数量小，但是另一个信息为数字和英文组成的36进制编码。\n经过计算后可以发现将特殊字符中的一个作为分隔符，将32位信息36进制压缩进81进制中可以缩短到27位，一个做分隔，还有4位保存另一个信息！可以做！\n\n### 三、接口B文档\n```url\nPOST https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=ACCESS_TOKEN\n```\n|属性|类型|默认值|必填|说明|\n|---|---|---|---|---|\n|access_token|string||是|[接口调用凭证](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html)|\n|scene|string||是|最大32个可见字符，只支持数字，大小写英文以及部分特殊字符：!#$&\'()*+,/:;=?@-._~，其它字符请自行编码为合法字符（因不支持%，中文无法使用 urlencode 处理，请使用其他编码方式）|\n|page|string|主页|否|必须是已经发布的小程序存在的页面（否则报错），例如 pages/index/index, 根路径前不要填加 /,不能携带参数（参数请放在scene字段里），如果不填写这个字段，默认跳主页面|\n|width|number|430|否|二维码的宽度，单位 px，最小 280px，最大 1280px|\n|auto_color|boolean|false|否|自动配置线条颜色，如果颜色依然是黑色，则说明不建议配置主色调，默认 false|\n|line_color|Object|{\"r\":0,\"g\":0,\"b\":0}|否|auto_color 为 false 时生效，使用 rgb 设置颜色 例如 {\"r\":\"xxx\",\"g\":\"xxx\",\"b\":\"xxx\"} 十进制表示|\n|is_hyaline|boolean|false|否|是否需要透明底色，为 true 时，生成透明底色的小程序|\n\n返回值为图片的Buffer\n\n### 四、操作\n将82个字符中的“-”拿出来做分隔符，剩下81个字符做为81进制，将36进制转为10进制，再将10进制转为81进制。\n\n### 五、工具类\n我写好了工具类，直接拿来用就可以\n```java\nimport org.apache.commons.lang.StringUtils;\nimport java.math.BigInteger;\n\n/**\n * 小程序码加密解密（进制转换）\n */\npublic class MiniCodeUtil {\n\n    /**八十一进制*/\n    private static String chars =\n            \"0123456789\" +\n            \"ABCDEFGHIJ\" +\n            \"KLMNOPQRST\" +\n            \"UVWXYZabcd\" +\n            \"efghijklmn\" +\n            \"opqrstuvwx\" +\n            \"yz!#$&\'()*\" +\n            \"+,/:;=?@._\" +\n            \"~\";\n    private static int scale = 81;\n    private static int minLength = 4;\n\n    /**\n     * 加密\n     * @param str 字符串\n     * @return\n     */\n    public static String encode(String str) {\n        BigInteger num = new BigInteger(str, 36);\n        StringBuilder sb = new StringBuilder();\n        int remainder;\n        while (num.compareTo(BigInteger.valueOf(scale - 1)) > 0) {\n            remainder = num.mod(BigInteger.valueOf(scale)).intValue();\n            sb.append(chars.charAt(remainder));\n            /**除以进制数，获取下一个末尾数*/\n            num = num.divide(BigInteger.valueOf(scale));\n        }\n        sb.append(chars.charAt(num.intValue()));\n        String value = sb.reverse().toString();\n        return StringUtils.leftPad(value, minLength, \'0\');\n    }\n\n    /**\n     * 解密\n     * @param str 字符串\n     * @return\n     */\n    public static String decode(String str) {\n        /**将 0 开头的字符串进行替换*/\n        str = str.replace(\"^0*\", \"\");\n        BigInteger value = BigInteger.ZERO;\n        char tempChar;\n        BigInteger tempCharValue;\n        for (int i = 0; i < str.length(); i++) {\n            /**获取字符*/\n            tempChar = str.charAt(i);\n            /**单字符值*/\n            tempCharValue = BigInteger.valueOf(chars.indexOf(tempChar));\n            /**单字符值在进制规则下表示的值*/\n            BigInteger item = BigInteger.valueOf(scale).pow(str.length() - i - 1);\n            value = value.add(tempCharValue.multiply(item));\n        }\n        return addZeroForNum(value.toString(36), 32);\n    }\n\n\n\n    /**\n     * 补零\n     * str 原字符串\n     * strLength 字符串总长\n     * */\n    private static String addZeroForNum(String str, int strLength) {\n        int strLen = str.length();\n        if (strLen < strLength) {\n            while (strLen < strLength) {\n                StringBuffer sb = new StringBuffer();\n                sb.append(\"0\").append(str);// 左补0\n                // sb.append(str).append(\"0\");//右补0\n                str = sb.toString();\n                strLen = str.length();\n            }\n        }\n        return str;\n    }\n}\n```\n### 六、调用方式\n```java\nSystem.out.println(MiniCodeUtil.decode(MiniCodeUtil.encode(\"995587e102064d47b670f5b81253dd58\")));\n```\n### 七、Javascript函数（未做大数处理）\n写了个javascript的解密函数，但是javascript对大于9007199254740992的数处理出现错误，所以该函数只能对位数比较短的数做处理，例如处理32位数会出现问题\n```javascript\nvar Stack = (function(){\n    var items = new WeakMap();\n    //先入后出，后入先出\n    class Stack{\n        constructor(){\n            items.set(this,[]);\n        }\n        push(ele){\n            //入栈\n            var ls = items.get(this);\n            ls.push(ele);\n        }\n        pop(){\n            //出栈\n            var ls = items.get(this);\n            return ls.pop();\n        }\n        size(){\n            //获取栈的长度\n            var ls = items.get(this);\n            return ls.length;\n        }\n        print(){\n            //打印栈\n            var ls = items.get(this);\n            return ls.toString();\n        }\n    }\n    return Stack;\n})();\n    \n/**\n    * num 需要转化的数字\n    * base 转化的进制，默认为 2\n    * */\nfunction devide(num,base){\n    base = Math.floor(base) || 2;\n    if(typeof num != \"number\" || num < 0 || base > 36 || base < 2){\n        throw new Error(\"参数错误\");\n        return \'\';\n    }\n    num = Math.floor(num);\n    \n    var code = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var stack = new Stack();\n    var res = \'\';\n    var rem;\n    while(num > 0){\n        rem = num % base;\n        stack.push(rem);\n        num = Math.floor(num/base);\n    }\n        \n    while(stack.size() > 0){\n        res += code[stack.pop()];\n    }\n        \n    return res;\n}\nfunction transfrom(num,base){\n    //任意进制转十进制\n    var bases = [\n        \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\n        \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\n        \"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\n        \"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\n        \"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\n        \"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\n        \"y\",\"z\",\"!\",\"#\",\"$\",\"&\",\"\'\",\"(\",\")\",\"*\",\n        \"+\",\",\",\"/\",\":\",\";\",\"=\",\"?\",\"@\",\".\",\"_\",\n        \"~\"];\n    var config = {};\n    for(var k = 0; k < base; k++){\n        config[bases[k]] = k;\n    }\n    num = String(num);\n    var count =  0;\n    var res = 0;\n    var i;\n    while(num.length > 0){\n        i  = num[num.length - 1];\n        i = config[i];\n        res = res + i * Math.pow(base,count);\n        num = num.substr(0,num.length-1);\n        count++;\n    }\n    return res;\n}\n\n\n\n\n/**字符串*/\nvar str = \'1f/@*WYzW(Bq:yJSWqguXPJSf1W\'\nvar str_res = devide(transfrom(str,81),36);\nconsole.log(\"str_res :\" + str_res )\n```', '针对微信小程序码获取接口B的scene参数对输入参数做压缩处理放入scene参数中', '2020-04-27 16:30:33', '2021-01-11 02:38:56'), (68, '1101', 103, '对Jeecg-Boot中Token失效返回格式的调整', 'https://media.baby7blog.com/FqOPohNT3eVm82WKXEea7Zgwpw6E', '> # 对Jeecg-Boot中Token失效返回格式的调整\n### 一、前言\n使用 Jeecg-Boot 的Spring Boot后端模块开发，前端未使用Jeecg-Boot的配套前端。\n### 二、问题\n前端在对接过程中发现token失效后返回直接返回500，而不是返回200然后在返回体中设置自定义返回码，需要后端调整为返回200ok，请求体中的code为自定义的。\n### 三、过程\n发现请求中带失效token后端会报错\n```java\norg.apache.shiro.authc.AuthenticationException: Token失效，请重新登录!\n	at org.jeecg.modules.shiro.authc.ShiroRealm.checkUserTokenIsEffect(ShiroRealm.java:129)\n	at org.jeecg.modules.shiro.authc.ShiroRealm.doGetAuthenticationInfo(ShiroRealm.java:101)\n	at org.apache.shiro.realm.AuthenticatingRealm.getAuthenticationInfo(AuthenticatingRealm.java:571)\n	at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doSingleRealmAuthentication(ModularRealmAuthenticator.java:180)\n	at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doAuthenticate(ModularRealmAuthenticator.java:267)\n	at org.apache.shiro.authc.AbstractAuthenticator.authenticate(AbstractAuthenticator.java:198)\n	at org.apache.shiro.mgt.AuthenticatingSecurityManager.authenticate(AuthenticatingSecurityManager.java:106)\n	at org.apache.shiro.mgt.DefaultSecurityManager.login(DefaultSecurityManager.java:274)\n	at org.apache.shiro.subject.support.DelegatingSubject.login(DelegatingSubject.java:260)\n	at org.jeecg.modules.shiro.authc.aop.JwtFilter.executeLogin(JwtFilter.java:57)\n	at org.jeecg.modules.shiro.authc.aop.JwtFilter.isAccessAllowed(JwtFilter.java:40)\n	at org.apache.shiro.web.filter.AccessControlFilter.onPreHandle(AccessControlFilter.java:162)\n	at org.apache.shiro.web.filter.PathMatchingFilter.isFilterChainContinued(PathMatchingFilter.java:203)\n	at org.apache.shiro.web.filter.PathMatchingFilter.preHandle(PathMatchingFilter.java:178)\n	at org.jeecg.modules.shiro.authc.aop.JwtFilter.preHandle(JwtFilter.java:78)\n```\n\n其中ShiroRealm和JwtFilter为jeecg-boot框架源码，其余为引用包代码，可以看到框架在ShiroRealm中抛出了AuthenticationException异常，之后一层层接收异常直到JwtFilter类的isAccessAllowed函数中处理异常，但是JwtFilter对异常的处理是再次抛出AuthenticationException，黑人问号.jpg\n```java\n/**\n    * 执行登录认证\n    *\n    * @param request\n    * @param response\n    * @param mappedValue\n    * @return\n    */\n@Override\nprotected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue){\n    try {\n        executeLogin(request, response);\n        return true;\n    } catch (Exception e) {\n        throw new AuthenticationException(\"Token失效，请重新登录\", e);\n    }\n}\n```\n\n但是我们可以发现同样在JwtFilter类中有一个preHandle函数，我们可以在preHandle函数中对\n```java\nreturn super.preHandle(request, response);\n```\n\n进行异常处理，修改为\n```java\ntry {\n    return super.preHandle(request, response);\n}\ncatch (AuthenticationException e){\n    httpServletResponse.setStatus(HttpStatus.OK.value());\n    JSONObject data = new JSONObject();\n    data.put(\"code\", 2333);\n    data.put(\"message\", \"Token失效，请重新登录\");\n    data.put(\"success\", false);\n    data.put(\"timestamp\", new Date().getTime());\n    /**获取OutputStream输出流*/\n    OutputStream outputStream = response.getOutputStream();\n    /**设置json返回格式*/\n    ((HttpServletResponse) response).setHeader(\"content-type\", \"application/json\");\n    /**将字符转换成字节数组，指定以UTF-8编码进行转换*/\n    byte[] dataByteArr = data.toJSONString().getBytes(StandardCharsets.UTF_8);\n    /**使用OutputStream流向客户端输出字节数组*/\n    outputStream.write(dataByteArr);\n    return false;\n}\n```\n\n经过postman测试为返回200ok，状态码2333', '前端在对接过程中发现token失效后返回直接返回500，而不是返回200然后在返回体中设置自定义返回码，需要后端调整为返回200ok，请求体中的code为自定义的。', '2020-04-28 11:03:20', '2021-01-13 04:10:29'), (69, '1100', 19, ' vue看板娘插件-雷姆', 'https://media.baby7blog.com/Fp6sRBrDbemUzTkI5w70xNHLhhgM', '> # vue看板娘插件-雷姆\n### 一、前言\n博客一直没有个看板娘，内容又比较生硬，所以想加个看板娘在角落。\n### 二、挑选\nvue看板娘插件中有个比较著名的[live2d](https://huaji8.top/post/live2d-plugin-2.0/)，里面有很多动漫人物，甚至还有一黑一白两只猫，但是看来看去没有我中意的看板娘。\n然后又去搜，找见一个博文[给自己的博客加上看板娘——Live2d蕾姆 | 雷姆](https://zhuanlan.zhihu.com/p/35351118)，但是是个html版的雷姆看板娘，这就面临一个问题：移植到vue中，虽然直接可以放到index.html中，但终归不是正常路子，还是移植吧，好在以前移植过挺多html插件的。\n### 三、移植\n先放个移植后的vue吧，后面慢慢更：\n```javascript\n<template>\n    <div>\n        <div>\n            <div>欢迎来到七仔的博客</div>\n            <canvas id=\"live2d\" width=\"500\" height=\"560\" class=\"live2d\"></canvas>\n            <div>\n                <div>\n                    <input name=\"name\" type=\"text\" class=\"live_talk_name white_input\" id=\"AIuserName\" autocomplete=\"off\" placeholder=\"你的名字\" />\n                </div>\n                <div>\n                    <input name=\"talk\" type=\"text\" class=\"live_talk_talk white_input\" id=\"AIuserText\" autocomplete=\"off\" placeholder=\"要和我聊什么呀？\"/>\n                    <button type=\"button\" class=\"live_talk_send_btn\" id=\"talk_send\">发送</button>\n                </div>\n            </div>\n            <input name=\"live_talk\" id=\"live_talk\" value=\"1\" type=\"hidden\" />\n            <div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <input name=\"live_statu_val\" id=\"live_statu_val\" value=\"0\" type=\"hidden\" />\n                <audio src preload=\"none\"></audio>\n                <input name=\"live2dBGM\" value=\"https://media.baby7blog.com/music/jfla/ShapeOfYou.mp3\" type=\"hidden\">\n                <input id=\"duType\" value=\"douqilai,l2d_caihong\" type=\"hidden\">\n            </div>\n        </div>\n        <div>召唤蕾姆</div>\n    </div>\n</template>\n\n<script>\n    import \"@/components/briannaKnickerbocker/live2d/js/live2d\"\n\n    export default {\n        name: \"briannaKnickerbocker\",\n        created() {\n            var message_Path = \'/live2d/\';//资源目录，如果目录不对请更改\n            var talkAPI = \"\";//如果有类似图灵机器人的聊天接口请填写接口路径\n            // var home_Path = document.location.protocol +\'//\' + window.document.location.hostname +\'/\';\n            var home_Path = \'https://www.baby7blog.com/\';\n\n            var userAgent = window.navigator.userAgent.toLowerCase();\n            console.log(userAgent);\n            var norunAI = [ \"android\", \"iphone\", \"ipod\", \"ipad\", \"windows phone\", \"mqqbrowser\" ,\"msie\",\"trident/7.0\"];\n            var norunFlag = false;\n\n\n            for(var i=0;i<norunAI.length;i++){\n                if(userAgent.indexOf(norunAI[i]) > -1){\n                    norunFlag = true;\n                    break;\n                }\n            }\n\n            if(!window.WebGLRenderingContext){\n                norunFlag = true;\n            }\n\n            if(!norunFlag){\n                var hitFlag = false;\n                var AIFadeFlag = false;\n                var liveTlakTimer = null;\n                var sleepTimer_ = null;\n                var AITalkFlag = false;\n                var talkNum = 0;\n                (function (){\n                    function renderTip(template, context) {\n                        var tokenReg = /(\\\\)?\\{([^\\{\\}\\\\]+)(\\\\)?\\}/g;\n                        return template.replace(tokenReg, function (word, slash1, token, slash2) {\n                            if (slash1 || slash2) {\n                                return word.replace(\'\\\\\', \'\');\n                            }\n                            var variables = token.replace(/\\s/g, \'\').split(\'.\');\n                            var currentObject = context;\n                            var i, length, variable;\n                            for (i = 0, length = variables.length; i < length; ++i) {\n                                variable = variables[i];\n                                currentObject = currentObject[variable];\n                                if (currentObject === undefined || currentObject === null) return \'\';\n                            }\n                            return currentObject;\n                        });\n                    }\n\n                    String.prototype.renderTip = function (context) {\n                        return renderTip(this, context);\n                    };\n\n                    var re = /x/;\n                    re.toString = function() {\n                        showMessage(\'哈哈，你打开了控制台，是想要看看我的秘密吗？\', 5000);\n                        return \'\';\n                    };\n\n                    $(document).on(\'copy\', function (){\n                        showMessage(\'你都复制了些什么呀，转载要记得加上出处哦~~\', 5000);\n                    });\n\n                    function initTips(){\n                        $.ajax({\n                            cache: true,\n                            url: message_Path+\'message.json\',\n                            dataType: \"json\",\n                            success: function (result){\n                                $.each(result.mouseover, function (index, tips){\n                                    $(tips.selector).mouseover(function (){\n                                        var text = tips.text;\n                                        if(Array.isArray(tips.text)) text = tips.text[Math.floor(Math.random() * tips.text.length + 1)-1];\n                                        text = text.renderTip({text: $(this).text()});\n                                        showMessage(text, 3000);\n                                        talkValTimer();\n                                        clearInterval(liveTlakTimer);\n                                        liveTlakTimer = null;\n                                    });\n                                    $(tips.selector).mouseout(function (){\n                                        showHitokoto();\n                                        if(liveTlakTimer == null){\n                                            liveTlakTimer = window.setInterval(function(){\n                                                showHitokoto();\n                                            },15000);\n                                        };\n                                    });\n                                });\n                                $.each(result.click, function (index, tips){\n                                    $(tips.selector).click(function (){\n                                        if(hitFlag){\n                                            return false\n                                        }\n                                        hitFlag = true;\n                                        setTimeout(function(){\n                                            hitFlag = false;\n                                        },8000);\n                                        var text = tips.text;\n                                        if(Array.isArray(tips.text)) text = tips.text[Math.floor(Math.random() * tips.text.length + 1)-1];\n                                        text = text.renderTip({text: $(this).text()});\n                                        showMessage(text, 3000);\n                                    });\n                                    clearInterval(liveTlakTimer);\n                                    liveTlakTimer = null;\n                                    if(liveTlakTimer == null){\n                                        liveTlakTimer = window.setInterval(function(){\n                                            showHitokoto();\n                                        },15000);\n                                    };\n                                });\n                            }\n                        });\n                    }\n                    initTips();\n\n                    var text;\n                    if(document.referrer !== \'\'){\n                        var referrer = document.createElement(\'a\');\n                        referrer.href = document.referrer;\n                        text = \'嗨！来自 <span>\' + referrer.hostname + \'</span> 的朋友！\';\n                        var domain = referrer.hostname.split(\'.\')[1];\n                        if (domain == \'baidu\') {\n                            text = \'嗨！ 来自 百度搜索 的朋友！<br>欢迎访问<span>「 \' + document.title.split(\' - \')[0] + \' 」</span>\';\n                        }else if (domain == \'so\') {\n                            text = \'嗨！ 来自 360搜索 的朋友！<br>欢迎访问<span>「 \' + document.title.split(\' - \')[0] + \' 」</span>\';\n                        }else if (domain == \'google\') {\n                            text = \'嗨！ 来自 谷歌搜索 的朋友！<br>欢迎访问<span>「 \' + document.title.split(\' - \')[0] + \' 」</span>\';\n                        }\n                    }else {\n                        if (window.location.href == home_Path) { //主页URL判断，需要斜杠结尾\n                            var now = (new Date()).getHours();\n                            if (now > 23 || now <= 5) {\n                                text = \'你是夜猫子呀？这么晚还不睡觉，明天起的来嘛？\';\n                            } else if (now > 5 && now <= 7) {\n                                text = \'早上好！一日之计在于晨，美好的一天就要开始了！\';\n                            } else if (now > 7 && now <= 11) {\n                                text = \'上午好！工作顺利嘛，不要久坐，多起来走动走动哦！\';\n                            } else if (now > 11 && now <= 14) {\n                                text = \'中午了，工作了一个上午，现在是午餐时间！\';\n                            } else if (now > 14 && now <= 17) {\n                                text = \'午后很容易犯困呢，今天的运动目标完成了吗？\';\n                            } else if (now > 17 && now <= 19) {\n                                text = \'傍晚了！窗外夕阳的景色很美丽呢，最美不过夕阳红~~\';\n                            } else if (now > 19 && now <= 21) {\n                                text = \'晚上好，今天过得怎么样？\';\n                            } else if (now > 21 && now <= 23) {\n                                text = \'已经这么晚了呀，早点休息吧，晚安~~\';\n                            } else {\n                                text = \'嗨~ 快来逗我玩吧！\';\n                            }\n                        }else {\n                            text = \'欢迎阅读<span>「 \' + document.title.split(\' - \')[0] + \' 」</span>\';\n                        }\n                    }\n                    showMessage(text, 12000);\n                })();\n\n                liveTlakTimer = setInterval(function(){\n                    showHitokoto();\n                },15000);\n\n                function showHitokoto(){\n                    if(sessionStorage.getItem(\"Sleepy\")!==\"1\"){\n                        if(!AITalkFlag){\n                            $.getJSON(\'https://v1.hitokoto.cn/\',function(result){\n                                talkValTimer();\n                                showMessage(result.hitokoto, 0);\n                            });\n                        }\n                    }else{\n                        hideMessage(0);\n                        if(sleepTimer_==null){\n                            sleepTimer_ = setInterval(function(){\n                                checkSleep();\n                            },200);\n                        }\n                        console.log(sleepTimer_);\n                    }\n                }\n\n                function checkSleep(){\n                    var sleepStatu = sessionStorage.getItem(\"Sleepy\");\n                    if(sleepStatu!==\'1\'){\n                        talkValTimer();\n                        showMessage(\'你回来啦~\', 0);\n                        clearInterval(sleepTimer_);\n                        sleepTimer_= null;\n                    }\n                }\n\n                function showMessage(text, timeout){\n                    if(Array.isArray(text)) text = text[Math.floor(Math.random() * text.length + 1)-1];\n                    //console.log(\'showMessage\', text);\n                    $(\'.message\').stop();\n                    $(\'.message\').html(text);\n                    $(\'.message\').fadeTo(200, 1);\n                    //if (timeout === null) timeout = 5000;\n                    //hideMessage(timeout);\n                }\n                function talkValTimer(){\n                    $(\'#live_talk\').val(\'1\');\n                }\n\n                function hideMessage(timeout){\n                    //$(\'.message\').stop().css(\'opacity\',1);\n                    if (timeout === null) timeout = 5000;\n                    $(\'.message\').delay(timeout).fadeTo(200, 0);\n                }\n\n                function initLive2d (){\n                    $(\'#hideButton\').on(\'click\', function(){\n                        if(AIFadeFlag){\n                            return false;\n                        }else{\n                            AIFadeFlag = true;\n                            localStorage.setItem(\"live2dhidden\", \"0\");\n                            $(\'#landlord\').fadeOut(200);\n                            $(\'#open_live2d\').delay(200).fadeIn(200);\n                            setTimeout(function(){\n                                AIFadeFlag = false;\n                            },300);\n                        }\n                    });\n                    $(\'#open_live2d\').on(\'click\', function(){\n                        if(AIFadeFlag){\n                            return false;\n                        }else{\n                            AIFadeFlag = true;\n                            localStorage.setItem(\"live2dhidden\", \"1\");\n                            $(\'#open_live2d\').fadeOut(200);\n                            $(\'#landlord\').delay(200).fadeIn(200);\n                            setTimeout(function(){\n                                AIFadeFlag = false;\n                            },300);\n                        }\n                    });\n                    $(\'#youduButton\').on(\'click\',function(){\n                        if($(\'#youduButton\').hasClass(\'doudong\')){\n                            var typeIs = $(\'#youduButton\').attr(\'data-type\');\n                            $(\'#youduButton\').removeClass(\'doudong\');\n                            $(\'body\').removeClass(typeIs);\n                            $(\'#youduButton\').attr(\'data-type\',\'\');\n                        }else{\n                            var duType = $(\'#duType\').val();\n                            var duArr = duType.split(\",\");\n                            var dataType = duArr[Math.floor(Math.random() * duArr.length)];\n\n                            $(\'#youduButton\').addClass(\'doudong\');\n                            $(\'#youduButton\').attr(\'data-type\',dataType);\n                            $(\'body\').addClass(dataType);\n                        }\n                    });\n                    if(talkAPI!==\"\"){\n                        $(\'#showInfoBtn\').on(\'click\',function(){\n                            var live_statu = $(\'#live_statu_val\').val();\n                            if(live_statu==\"0\"){\n                                return\n                            }else{\n                                $(\'#live_statu_val\').val(\"0\");\n                                $(\'.live_talk_input_body\').fadeOut(500);\n                                AITalkFlag = false;\n                                showHitokoto();\n                                $(\'#showTalkBtn\').show();\n                                $(\'#showInfoBtn\').hide();\n                            }\n                        });\n                        $(\'#showTalkBtn\').on(\'click\',function(){\n                            var live_statu = $(\'#live_statu_val\').val();\n                            if(live_statu==\"1\"){\n                                return\n                            }else{\n                                $(\'#live_statu_val\').val(\"1\");\n                                $(\'.live_talk_input_body\').fadeIn(500);\n                                AITalkFlag = true;\n                                $(\'#showTalkBtn\').hide();\n                                $(\'#showInfoBtn\').show();\n\n                            }\n                        });\n                        $(\'#talk_send\').on(\'click\',function(){\n                            var info_ = $(\'#AIuserText\').val();\n                            var userid_ = $(\'#AIuserName\').val();\n                            if(info_ == \"\" ){\n                                showMessage(\'写点什么吧！\',0);\n                                return;\n                            }\n                            if(userid_ == \"\"){\n                                showMessage(\'聊之前请告诉我你的名字吧！\',0);\n                                return;\n                            }\n                            showMessage(\'思考中~\', 0);\n                            $.ajax({\n                                type: \'POST\',\n                                url: talkAPI,\n                                data: {\n                                    \"info\":info_,\n                                    \"userid\":userid_\n                                },\n                                success: function(res) {\n                                    if(res.code !== 100000){\n                                        talkValTimer();\n                                        showMessage(\'似乎有什么错误，请和站长联系！\',0);\n                                    }else{\n                                        talkValTimer();\n                                        showMessage(res.text,0);\n                                    }\n                                    console.log(res);\n                                    $(\'#AIuserText\').val(\"\");\n                                    sessionStorage.setItem(\"live2duser\", userid_);\n                                }\n                            });\n                        });\n                    }else{\n                        $(\'#showInfoBtn\').hide();\n                        $(\'#showTalkBtn\').hide();\n\n                    }\n                    //获取音乐信息初始化\n                    var bgmListInfo = $(\'input[name=live2dBGM]\');\n                    if(bgmListInfo.length == 0){\n                        $(\'#musicButton\').hide();\n                    }else{\n                        var bgmPlayNow = parseInt($(\'#live2d_bgm\').attr(\'data-bgm\'));\n                        var bgmPlayTime = 0;\n                        var live2dBGM_Num = sessionStorage.getItem(\"live2dBGM_Num\");\n                        var live2dBGM_PlayTime = sessionStorage.getItem(\"live2dBGM_PlayTime\");\n                        if(live2dBGM_Num){\n                            if(live2dBGM_Num<=$(\'input[name=live2dBGM]\').length-1){\n                                bgmPlayNow = parseInt(live2dBGM_Num);\n                            }\n                        }\n                        if(live2dBGM_PlayTime){\n                            bgmPlayTime = parseInt(live2dBGM_PlayTime);\n                        }\n                        var live2dBGMSrc = bgmListInfo.eq(bgmPlayNow).val();\n                        $(\'#live2d_bgm\').attr(\'data-bgm\',bgmPlayNow);\n                        $(\'#live2d_bgm\').attr(\'src\',live2dBGMSrc);\n                        $(\'#live2d_bgm\')[0].currentTime = bgmPlayTime;\n                        $(\'#live2d_bgm\')[0].volume = 0.5;\n                        var live2dBGM_IsPlay = sessionStorage.getItem(\"live2dBGM_IsPlay\");\n                        var live2dBGM_WindowClose = sessionStorage.getItem(\"live2dBGM_WindowClose\");\n                        if(live2dBGM_IsPlay == \'0\' && live2dBGM_WindowClose == \'0\'){\n                            $(\'#live2d_bgm\')[0].play();\n                            $(\'#musicButton\').addClass(\'play\');\n                        }\n                        sessionStorage.setItem(\"live2dBGM_WindowClose\" , \'1\');\n                        $(\'#musicButton\').on(\'click\',function(){\n                            if($(\'#musicButton\').hasClass(\'play\')){\n                                $(\'#live2d_bgm\')[0].pause();\n                                $(\'#musicButton\').removeClass(\'play\');\n                                sessionStorage.setItem(\"live2dBGM_IsPlay\",\'1\');\n                            }else{\n                                $(\'#live2d_bgm\')[0].play();\n                                $(\'#musicButton\').addClass(\'play\');\n                                sessionStorage.setItem(\"live2dBGM_IsPlay\",\'0\');\n                            }\n                        });\n                        window.onbeforeunload = function(){\n                            sessionStorage.setItem(\"live2dBGM_WindowClose\" , \'0\');\n                            if($(\'#musicButton\').hasClass(\'play\')){\n                                sessionStorage.setItem(\"live2dBGM_IsPlay\",\'0\');\n                            }\n                        }\n                        document.getElementById(\'live2d_bgm\').addEventListener(\"timeupdate\", function(){\n                            var live2dBgmPlayTimeNow = document.getElementById(\'live2d_bgm\').currentTime;\n                            sessionStorage.setItem(\"live2dBGM_PlayTime\" , live2dBgmPlayTimeNow );\n                        });\n                        document.getElementById(\'live2d_bgm\').addEventListener(\"ended\", function(){\n                            var listNow = parseInt($(\'#live2d_bgm\').attr(\'data-bgm\'));\n                            listNow ++ ;\n                            if(listNow > $(\'input[name=live2dBGM]\').length-1){\n                                listNow = 0;\n                            }\n                            var listNewSrc = $(\'input[name=live2dBGM]\').eq(listNow).val();\n                            sessionStorage.setItem(\"live2dBGM_Num\",listNow);\n                            $(\'#live2d_bgm\').attr(\'src\',listNewSrc);\n                            $(\'#live2d_bgm\')[0].play();\n                            $(\'#live2d_bgm\').attr(\'data-bgm\',listNow);\n                        });\n                        document.getElementById(\'live2d_bgm\').addEventListener(\"error\", function(){\n                            $(\'#live2d_bgm\')[0].pause();\n                            $(\'#musicButton\').removeClass(\'play\');\n                            showMessage(\'音乐似乎加载不出来了呢！\',0);\n                        });\n                    }\n                    //获取用户名\n                    var live2dUser = sessionStorage.getItem(\"live2duser\");\n                    if(live2dUser !== null){\n                        $(\'#AIuserName\').val(live2dUser);\n                    }\n                    //获取位置\n                    var landL = sessionStorage.getItem(\"historywidth\");\n                    var landB = sessionStorage.getItem(\"historyheight\");\n                    if(landL == null || landB ==null){\n                        landL = \'5px\'\n                        landB = \'0px\'\n                    }\n                    $(\'#landlord\').css(\'left\',landL+\'px\');\n                    $(\'#landlord\').css(\'bottom\',landB + \'px\');\n                    //移动\n                    function getEvent() {\n                        return window.event || arguments.callee.caller.arguments[0];\n                    }\n                    var smcc = document.getElementById(\"landlord\");\n                    var moveX = 0;\n                    var moveY = 0;\n                    var moveBottom = 0;\n                    var moveLeft = 0;\n                    var moveable = false;\n                    var docMouseMoveEvent = document.onmousemove;\n                    var docMouseUpEvent = document.onmouseup;\n                    smcc.onmousedown = function(){\n                        var ent = getEvent();\n                        moveable = true;\n                        moveX = ent.clientX;\n                        moveY = ent.clientY;\n                        var obj = smcc;\n                        moveBottom = parseInt(obj.style.bottom);\n                        moveLeft = parseInt(obj.style.left);\n                        if(isFirefox=navigator.userAgent.indexOf(\"Firefox\")>0){\n                            window.getSelection().removeAllRanges();\n                        }\n                        document.onmousemove = function(){\n                            if(moveable){\n                                var ent = getEvent();\n                                var x = moveLeft + ent.clientX - moveX;\n                                var y = moveBottom +  (moveY - ent.clientY);\n                                obj.style.left = x + \"px\";\n                                obj.style.bottom = y + \"px\";\n                            }\n                        };\n                        document.onmouseup = function(){\n                            if(moveable){\n                                var historywidth = obj.style.left;\n                                var historyheight = obj.style.bottom;\n                                historywidth = historywidth.replace(\'px\', \'\');\n                                historyheight = historyheight.replace(\'px\', \'\');\n                                sessionStorage.setItem(\"historywidth\", historywidth);\n                                sessionStorage.setItem(\"historyheight\", historyheight);\n                                document.onmousemove = docMouseMoveEvent;\n                                document.onmouseup = docMouseUpEvent;\n                                moveable = false;\n                                moveX = 0;\n                                moveY = 0;\n                                moveBottom = 0;\n                                moveLeft = 0;\n                            }\n                        };\n                    };\n                }\n                $(document).ready(function() {\n                    var AIimgSrc = [\n                        \"https://media.baby7blog.com/live2d/texture_00.png\"\n                    ]\n                    var images = [];\n                    var imgLength = AIimgSrc.length;\n                    var loadingNum = 0;\n                    for(var i=0;i<imgLength;i++){\n                        images[i] = new Image();\n                        images[i].src = AIimgSrc[i];\n                        images[i].onload = function(){\n                            loadingNum++;\n                            if(loadingNum===imgLength){\n                                var live2dhidden = localStorage.getItem(\"live2dhidden\");\n                                if(live2dhidden===\"0\"){\n                                    setTimeout(function(){\n                                        $(\'#open_live2d\').fadeIn(200);\n                                    },1300);\n                                }else{\n                                    setTimeout(function(){\n                                        $(\'#landlord\').fadeIn(200);\n                                    },1300);\n                                }\n                                setTimeout(function(){\n                                    loadlive2d(\"live2d\", message_Path+\"model/rem/rem.json\");\n                                },1000);\n                                initLive2d ();\n                                images = null;\n                            }\n                        }\n                    }\n                });\n            }\n\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n\n```', '博客一直没有个看板娘，内容又比较生硬，所以想加个看板娘在角落。', '2020-04-28 12:01:53', '2021-01-11 02:38:23'), (70, '1114', 15, '“魔镜”智能家居系统（我的毕设）', 'https://media.baby7blog.com/FqZ0qi34oEBKCFDEFSBMMfjXO7El', '> # “魔镜”智能家居系统（我的毕设）\n### 目录\n1. 介绍\n2. 大致思路\n3. 系统架构\n4. 结语\n\n### 介绍\n灵感来源于《白雪公主》里皇后的魔镜，然后就想给对象做一个。\n如果只做对话未免有些单调，所以想增加一些功能，包括：控制智能家居、获取温湿度、显示天气信息、节假日信息、最近的新闻、基于情绪识别进行对话。\n\n### 大致思路\n参考MagicMirror，使用单向镜+显示屏+木框作为主体，配合其他的硬件\n首先是智能对话，流程就是语音唤醒-->语音录制-->语音识别-->智能对话-->语音合成-->播放\n> 语音唤醒：离线语音唤醒，可以使用开源的Snowboy\n> 语音录制：使用SpeechRcognition，自动结束录音\n> 语音识别：使用百度的语音API\n> 智能对话：这部分的对话处理在后端处理\n> 语音合成：也是使用百度的语音API\n> 播放：使用PyGame播放合成的语音\n\n之后是控制智能家居，有个开源的Home Assistant可以直接拿来用\n然后是温湿度信息，这块使用DHT11这个温湿度传感器获取，传感器可以与树莓派串口进行连接，获取到温湿度信息\n接下来是天气信息，中国天气网有前端插件，直接生成改改拿来用就可以\n还有节假日信息和最近的新闻，这两个放在后端\n最后是情绪识别，树莓派用OpenCV进行拍照判断是否有人然后进行情绪识别，情绪识别做成个服务放到云上\n\n### 系统架构\n系统代码分为五套\n首先是树莓派端的，用python编写，包块四大模块：1.智能对话、2.情绪识别、3.环境数据、4.视图，每个模块独占一个进程\n之后是后端，用SpringCloud作为架构，分为五个服务：1、服务注册发现配置、2.权限、3.网关、4.基础服务、5.环境数据\n然后是情绪识别端，用python编写，接收图片识别情绪，使用PigX快速开发框架\n接下来是用户显示端，就是在镜子后面显示屏显示的，基于Vue\n最后是管理端，基于Vue，使用Avue框架，使用PigX快速开发框架\n\n部署包括树莓派端、后端、显示端、管理端、情绪识别服务、HBase集群这几个端\n\n### 结语\n由于系统过于庞大，会分为多个博客慢慢讲，先列一下需要讲哪些（智能对话包含过多可能会再次细分）：\n\n智能对话（Snowboy离线唤醒、SpeechRcognition录音、百度语音识别和合成、对话、PyGame播放）\n[OpenCV人脸检测（不贴项目代码了，用以前写的一个看看）](https://www.baby7blog.com/myBlog?id=5)\n[基于dlib的情绪识别](https://www.baby7blog.com/myBlog?id=75)\n[DHT11获取和显示温湿度信息](https://www.baby7blog.com/myBlog?id=76)\n[MQTT发送与接收](https://www.baby7blog.com/myBlog?id=88)\nPhoenix、Hbase的使用\n[智能家居控制](https://www.baby7blog.com/myBlog?id=77)\n[天气信息的显示](https://www.baby7blog.com/myBlog?id=74)\n[多进程和进程间通信](https://www.baby7blog.com/myBlog?id=73)\n[selenium对浏览器的控制](https://www.baby7blog.com/myBlog?id=72)\n[开机自启动](https://www.baby7blog.com/myBlog?id=71)\n[节假日信息](https://www.baby7blog.com/myBlog?id=78)\n[图片存储（直接看官网的用法吧，没什么说的）](https://developer.qiniu.com/kodo/sdk/1242/python)', '灵感来源于《白雪公主》里皇后的魔镜，然后就想给对象做一个。', '2020-06-17 21:23:58', '2021-01-12 13:37:53'), (71, '1114', 21, '【“魔镜”系列】开机自启动', 'https://media.baby7blog.com/FqRKykOFxDfQNdzhDt-PLneTFOKS', '> # 【“魔镜”系列】开机自启动\n\n### “魔镜”的启动\n魔镜正常运行的前提条件是已经运行成功Home Assistant，我写了一个sh脚本：\n```sh\n/home/pi/.local/bin/hass &\nsleep 30\ncd /home/pi/client-raspberrypi/bin/\npython3 start.py\n```\n\n第一行是异步运行hass，因为hass是个系统，启动以后会一直阻塞运行，\n第二行是等待30秒，hass大概十几秒可以运行起来，这里做个加长\n然后第二行第三行是运行系统主程序\n\n### 开机自启动\n这里使用了桌面的自启动，参考[【教程】树莓派程序开机自启动方法总结](https://www.jianshu.com/p/86adb6d5347b)\n在/home/pi/.config/autostart/目录下新建new.desktop\n内容如下\n```desktop\n[Desktop Entry]\nType=Application\nName=testboot\nNoDisplay=true\nExec=bash /home/pi/client-raspberrypi/start.sh\n```\n\n相当于树莓派开机后运行了这条命令:\n```sh\nbash /home/pi/client-raspberrypi/start.sh\n```', '魔镜系列中的开机自启动，魔镜实现通电后直接启动', '2020-06-17 21:58:44', '2021-01-11 02:36:11'), (72, '1114', 7, '【“魔镜”系列】selenium控制浏览器', 'https://media.baby7blog.com/FsAln6TeH9wBLS4nscbA-KxF7JcJ', '> # 【“魔镜”系列】selenium控制浏览器\n### python使用selenium打开浏览器并打开指定页面\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nexecutable_path = \'浏览器驱动文件位置\'\ndriver_url = \'需要打开的网址\'\n\noption = Options()\n# option.add_argument(\'disable_infobars\')   # 与下面一行效果相同（去除浏览器出现的受控制提示），新版本已失效\noption.add_experimental_option(\'excludeSwitches\', [\'enable-automation\'])\nglobal driver, executable_path\ndriver = webdriver.Chrome(options=option, executable_path=executable_path)  # 打开浏览器\ndriver.maximize_window()     # 最大化 \ndriver.get(driver_url)       # 转到指定页面\ndriver.fullscreen_window()   # 全屏\n```\n\n### 执行js语句对页面进行修改\n```python\nword = \'你好啊，主人\'\njs = \'document.getElementsByClassName(\"title-msg\")[0].innerHTML =\"\' + word + \'\"\'\ndriver.execute_script(js)\n```', 'python使用selenium打开浏览器并打开指定页面&执行js语句对页面进行修改', '2020-06-18 11:55:04', '2021-01-11 02:38:05'), (73, '1114', 13, '【“魔镜”系列】多进程和进程间通信', 'https://media.baby7blog.com/FvaymZ3S5dOaKRov9OZDH3RfsD8u', '> # 【“魔镜”系列】多进程和进程间通信\n### 选择多进程的原因\n因为python多线程并不是并行执行，因此较适合与I/O密集型程序，多进程并行执行适用于CPU密集型程序，我们的四个模块相对更适合多进程\n\n### 多进程的启动\n```python\n#!/usr/bin/python3\nfrom multiprocessing import Process, Queue\nfrom lib import configurationUtil\n\nimport core.view_html.view_html as view_html\nimport core.face_detection.face_detection as face_detection\nimport core.dialogue.snowboy as snowboy\nimport core.sensor.sensor as sensor\n\n\ndef start():\n    print(\"Start to 4 process...\")\n    try:\n        # 获取用户id\n        user_id = configurationUtil.get_user_id()\n        # 队列\n        queue = Queue()\n        # 启动显示视图线程\n        print(\"Start the view html process\")\n        p_viw_html = Process(target=view_html.viw_html, args=(queue,))\n        p_viw_html.start()\n        # 启动人脸识别线程\n        print(\"Start the face recognition process\")\n        p_face_detection = Process(target=face_detection.face_detection)\n        p_face_detection.start()\n        # 启动语音识别线程\n        print(\"Start the speech recognition process\")\n        p_snowboy = Process(target=snowboy.snowboy, args=(user_id, queue))\n        p_snowboy.start()\n        # 启动传感器线程\n        print(\"Start the sensor process\")\n        p_sensor = Process(target=sensor.sensor, args=(user_id, queue))\n        p_sensor.start()\n    except Exception as e:\n        print(\"Unexpected error:\", e)\n    while 1:\n        pass\n```\n\n启动了四个进程，分别是视图、人脸识别、智能对话和温湿度传感器\n我们来看传感器进程\n```python\n# 启动传感器线程\nprint(\"Start the sensor process\")\np_sensor = Process(target=sensor.sensor, args=(user_id, queue))\np_sensor.start()\n```\n\nsensor.sensor是函数名，user_id, queue是两个参数\n\n### 进程间通信\n选用队列Queue进程进行通信，我们关注queue这个参数\n```python\nfrom multiprocessing import Process, Queue\n# 队列\nqueue = Queue()\n...\np_viw_html = Process(target=view_html.viw_html, args=(queue,))\n...\np_sensor = Process(target=sensor.sensor, args=(user_id, queue))\n```\n\n可以看到queue这个参数被放到视图进程的第一个参数和传感器进程的第二个参数中\n\n在传感器进程的代码中有这样的代码\n```python\njson_data = {\n    \"type\": \"sensor_data\",\n    \"data\": data\n}\nqueue.put(json_data)\n```\n\n这是发送消息，在视图进程有这样的代码\n```python\njson_data = queue.get()\n```\n\n这是接收代码，非常简单明了', '因为python多线程并不是并行执行，因此较适合与I/O密集型程序，多进程并行执行适用于CPU密集型程序，我们的四个模块相对更适合多进程', '2020-06-18 12:18:43', '2021-01-12 13:41:55'), (74, '1114', 11, '【“魔镜”系列】天气信息的显示', 'https://media.baby7blog.com/Fm5zywKHBGmtRuQZAg8N0PohDYpG', '> # 【“魔镜”系列】天气信息的显示\n### 来源\n中国天气网有定制的插件，有非常多的选择，这里放一下网址：[天气插件](https://cj.weather.com.cn/plugin/pc/view)\n### 代码\n但是我用的Vue做基础，所以将这个插件改为了Vue版的（但是还是需要在上面的网址生成）\n```Vue\n<template>\n    <div id=\"weather-view-he\"></div>\n</template>\n\n<script>\n    export default {\n        name: \"Weather\",\n        created() {\n            const WIDGET = document.createElement(\'script\');\n            WIDGET.text = \"WIDGET = {ID: \'RejMJQqNQR\'}\";\n            document.body.appendChild(WIDGET);\n            const s = document.createElement(\'script\');\n            s.type = \'text/javascript\';\n            s.src = \'https://apip.weatherdt.com/view/static/js/r.js?v=1111\';\n            document.body.appendChild(s);\n        },\n        mounted() {\n            var id = setInterval(() => {\n                if(document.getElementById(\"weather-view-he\").style.cssText\n                    === \"background-color:#000;width:500px;height:250px;font-size: 16px;\"){\n                    clearInterval(id)\n                }\n                document.getElementById(\"weather-view-he\").style.cssText\n                    = \"background-color:#000;width:500px;height:250px;font-size: 16px;\"\n            },500)\n        }\n    }\n</script>\n```\n\n这里多了mounted()函数，因为生成的插件虽然有深色版，但是黑的不够彻底，需要做一下样式调整，其中还包括大小和字体\n可以看到是用了计时器进行样式调整，因为需要给原来的插件调整的时间，确定调整成功后会关闭计时器', '将中国天气网的定制的插件进行调整，并改为Vue可用', '2020-06-18 12:38:03', '2021-01-11 02:36:45'), (75, '1114', 34, '【“魔镜”系列】基于dlib的情绪识别', 'https://media.baby7blog.com/Fr5Q6TUtx_QEk_FuENuWkn3ErXDT', '> # 【“魔镜”系列】基于dlib的情绪识别\n### 原理\n首先dlib库进行人脸识别与特征标定获得人脸对应的68个特征点，然后通过嘴巴张开距离占面部识别框宽度的比例、眉毛上扬程度、眯眼睛程度对用户情绪进行判定\n参考：[python3+dlib人脸识别及情绪分析](https://www.cnblogs.com/qsyll0916/p/8893790.html)\n### 代码\n```python\nclass EmotionRecognition:\n    def __init__(self):\n        self.detector = dlib.get_frontal_face_detector()            # 使用特征提取器get_frontal_face_detector\n        self.predictor = dlib.shape_predictor(DATA_PATH)            # dlib的68点模型，使用训练好的特征预测器\n\n    def learning_face(self, path):\n        im_read = cv2.imread(path, 1)\n        face_list = self.detector(cv2.cvtColor(im_read, cv2.COLOR_RGB2GRAY), 0)   # 对灰度图像使用检测器检测\n        if len(face_list) != 0:                                     # 检测器检测到人脸\n            for i in range(len(face_list)):                         # 获取68个特征点\n                for k, d in enumerate(face_list):                   # 获取索引和数据，k为索引，d为对象\n                    box_width = d.right() - d.left()                # 计算人脸框边长\n                    appear = self.predictor(im_read, d)             # 获取68个特征点坐标\n                    mouth_higth = (appear.part(66).y - appear.part(62).y) / box_width\n                    # 眉毛直线拟合列表\n                    brow_x = []\n                    brow_y = []\n                    for j in range(17, 21):\n                        brow_x.append(appear.part(j).x)\n                        brow_y.append(appear.part(j).y)\n                    z1 = np.polyfit(np.array(brow_x), np.array(brow_y), 1)\n                    brow_k = -round(z1[0], 3)                       # 拟合成一条直线\n                    eye_hight = ((appear.part(41).y - appear.part(37).y + appear.part(40).y - appear.part(38).y +\n                               appear.part(47).y - appear.part(43).y + appear.part(46).y - appear.part(44).y)\n                                 / 4) / box_width                   # 获取眼睛睁开大小\n                    upload_qiniu(path)                              # 上传至图床\n                    if round(mouth_higth >= 0.03):\n                        if eye_hight >= 0.056:\n                            send_face_data_save(path, \"3\")          # 惊讶\n                            return json.dumps({\"state\": \"success\", \"result\": \"amazing\"})\n                        else:\n                            send_face_data_save(path, \"4\")          # 开心\n                            return json.dumps({\"state\": \"success\", \"result\": \"happy\"})\n                    else:\n                        if brow_k <= -0.3:\n                            send_face_data_save(path, \"1\")          # 生气\n                            return json.dumps({\"state\": \"success\", \"result\": \"angry\"})\n                        else:\n                            send_face_data_save(path, \"2\")          # 正常\n                            return json.dumps({\"state\": \"success\", \"result\": \"nature\"})\n                break                                               # 只识别一张人脸\n        return json.dumps({\"state\": \"error\", \"result\": \"no face\"})  # 未识别到人脸\n```', '首先dlib库进行人脸识别与特征标定获得人脸对应的68个特征点，然后通过嘴巴张开距离占面部识别框宽度的比例、眉毛上扬程度、眯眼睛程度对用户情绪进行判定', '2020-06-18 13:19:48', '2021-01-11 02:37:53'), (76, '1114', 33, '【“魔镜”系列】DHT11传感器温湿度的获取与显示', 'https://media.baby7blog.com/Fhh6_JPg6lgPmumpRTloDcZAL-n9', '> # 【“魔镜”系列】DHT11传感器温湿度的获取与显示\n### 通过DHT11获取温湿度信息\n这里有我参考别人修改的获取温湿度的py文件\n```python\n#!/usr/bin/python3\nimport RPi.GPIO as GPIO\nimport time\n\n\nchannel = 17     # 设置树莓派端口号(BCM编码)\nj = 0           # 初始化计数器为0\ndata = []       # 初始化数据存储数组\n\n\n# 初始化\ndef initialize():\n    global channel\n    GPIO.setmode(GPIO.BCM)                      # 设置gpio引脚编号模式，有两种编号模式可供选择，自己随意设置就好\n    time.sleep(1)                               # 程序暂停一秒钟\n    GPIO.setup(channel, GPIO.OUT)               # 设置6号口为输出模式\n    GPIO.output(channel, GPIO.LOW)              # 6号口输出低电平，即发送触发信号\n    time.sleep(0.02)                            # 低电平维持0.02秒\n    GPIO.output(channel, GPIO.HIGH)             # 输出高电平，标志低电平结束\n    GPIO.setup(channel, GPIO.IN)                # 设置端口模式为输入\n    while GPIO.input(channel) is GPIO.LOW:      # 跳过初始状态的低电平\n        pass\n    while GPIO.input(channel) is GPIO.HIGH:     # 跳过初始状态的高电平\n        pass\n\n\n# 获取数据\ndef get_data():\n    global j, data, channel\n    # 进入循环\n    while j < 40:                               # 仅仅存储40个数据\n        k = 0\n        while GPIO.input(channel) is GPIO.LOW:  # 跳过低电平\n            continue\n\n        while GPIO.input(channel) is GPIO.HIGH:  # 如果是高电平，则进入循环，高电平结束时停止\n            k += 1                              # 计数器自增\n            if k > 100:                         # 如果高电平计数器大于100，则跳出循环，数据错误\n                break\n        if k < 8:                               # 如果计数器数值小于8次，则认为值为0\n            data.append(0)\n        else:                                   # 否则认为值为1\n            data.append(1)\n        j += 1                                  # 数据位数计数器加一\n\n\n# 数据处理\ndef data_processing():\n    global data\n    # 按位切割数据\n    humidity_bit = data[0:8]\n    humidity_point_bit = data[8:16]\n    temperature_bit = data[16:24]\n    temperature_point_bit = data[24:32]\n    check_bit = data[32:40]\n\n    humidity = 0\n    humidity_point = 0\n    temperature = 0\n    temperature_point = 0\n    check = 0\n    # 计算各个数据结果和校验值\n    for i in range(8):\n        humidity += humidity_bit[i] * 2 ** (7 - i)\n        humidity_point += humidity_point_bit[i] * 2 ** (7 - i)\n        temperature += temperature_bit[i] * 2 ** (7 - i)\n        temperature_point += temperature_point_bit[i] * 2 ** (7 - i)\n        check += check_bit[i] * 2 ** (7 - i)\n    # 计算检查值\n    tmp = humidity + humidity_point + temperature + temperature_point\n    return temperature, humidity, check, tmp\n\n\n# 获取温湿度数据\ndef get_temperature_humidity(setting_channel):\n    global channel\n    channel = setting_channel\n    initialize()\n    get_data()\n    temperature, humidity, check, tmp = data_processing()\n    GPIO.cleanup()\n    return temperature, humidity, check, tmp    # 温度、湿度、校验值、检查值\n```\n\n使用时直接调用get_temperature_humidity并传入树莓派端口号（引脚）即可\n\n### 新版本获取温湿度信息\nHome Assistant有个获取DHT传感器信息的插件，配置如下：\n```config\nsensor:\n  platform: dht\n  sensor: DHT11\n  pin: 17\n  monitored_conditions:\n    - temperature\n    - humidity\n```\n\n引脚为17号，然后GET\n```url\nhttp://树莓派ip地址:8123/api/states/sensor.dht_sensor_humidity\n```\n\n并加上Bearer形式的token即可获取到湿度信息，温度同理\n\n### 显示到屏幕上\n环境进程通过Queue队列发送数据，显示进程获取到数据再通过selenium执行javascript语句显示到屏幕上，其中温湿度的显示是使用两个ECharts表盘显示的，我封装成了个Vue插件：\n```Vue\n<template>\n    <div class=\"sensor_line\" style=\"margin-top: 50px;\">\n        <div id=\"chart\" class=\"sensor_meter\"></div>\n        <span id=\"hide_temp\" style=\"display:none\">0</span>\n        <span id=\"hide_humidity\" style=\"display:none\">0</span>\n    </div>\n</template>\n<script>\n    export default {\n        name: \"Sensor\",\n        data() {\n            return {\n                temp: 0,\n                humidity: 0\n            }\n        },\n        mounted() {\n            this.init();\n            setInterval(this.refresh_data, 3000);\n        },\n        methods:{\n            init(){\n                var chart = this.$echarts.init(document.getElementById(\"chart\"));\n                var option = {\n                    title: {\n                        text: \'温度                            湿度\',\n                        x: \'center\',\n                        textStyle: {\n                            color: \'#fff\',\n                            fontSize: 24\n                        }\n                    },\n                    grid: {\n                        x: 20,\n                        y: 30,\n                        x2: 20,\n                        y2: 10,\n                    },\n                    series: [{\n                        name: \'温度\',\n                        type: \'gauge\',\n                        center: [\'25%\', \'50%\'],\n                        min: 0,\n                        max: 60,\n                        splitNumber: 8,\n                        axisLine: {\n                            lineStyle: {\n                                color: [\n                                    [12 / 400, \'#668888\'],\n                                    [35.4 / 400, \'#888888\'],\n                                    [55.4 / 400, \'#aa8888\'],\n                                    [150.4 / 400, \'#cc8888\'],\n                                    [250.4 / 400, \'#dd8888\'],\n                                    [400 / 400, \'#ff8888\']\n                                ],\n                                width: 3,\n                            }\n                        },\n                        axisLabel: {\n                            show: false,\n                        },\n                        detail: {\n                            formatter: \'{value}℃\',\n                            offsetCenter: [0, \'60%\'],\n                        },\n                        data: [{\n                            value: this.temp\n                        }]\n                    },{\n                        name: \'湿度\',\n                        type: \'gauge\',\n                        center: [\'75%\', \'50%\'],\n                        min: 0,\n                        max: 100,\n                        splitNumber: 8,\n                        axisLine: {\n                            lineStyle: {\n                                color: [\n                                    [12 / 400, \'#668888\'],\n                                    [35.4 / 400, \'#888888\'],\n                                    [55.4 / 400, \'#aa8888\'],\n                                    [150.4 / 400, \'#cc8888\'],\n                                    [250.4 / 400, \'#dd8888\'],\n                                    [400 / 400, \'#ff8888\']\n                                ],\n                                width: 3,\n                            }\n                        },\n                        axisLabel: {\n                            show: false,\n                        },\n                        detail: {\n                            formatter: \'{value}%\',\n                            offsetCenter: [0, \'60%\'],\n                        },\n                        data: [{\n                            value: this.humidity\n                        }]\n                    }]\n                };\n                chart.setOption(option);\n            },\n            refresh_data(){\n                this.temp = document.getElementById(\"hide_temp\").innerText;\n                this.humidity = document.getElementById(\"hide_humidity\").innerText;\n                this.init();\n            }\n        }\n    }\n</script>\n<style scoped>\n    .sensor_meter {\n        width:500px;\n        height:250px;\n    }\n</style>\n```', '通过DHT11获取温湿度信息然后通过Queue发送数据到显示进程再使用selenium执行js语句显示', '2020-06-28 21:26:15', '2021-01-11 08:05:36');
INSERT INTO `blog` VALUES (77, '1114', 21, '【“魔镜”系列】智能家居控制', 'https://media.baby7blog.com/FoCGeeXhKnmWDLCUMO7s2H6QkUA5', '> # 【“魔镜”系列】智能家居控制\n### 开源的Home Assistant家居控制系统\nHome Assistant(hass)是一个开源的基于Python的智能家居控制系统，可以连接很多品牌的智能家居并且控制，并且相对于那些品牌的智能家居有更多的自由和控制性。\n### 魔镜和Home Assistant之间的通信\nHome Assistant有完整的Rest API，[点击这里进入](https://developers.home-assistant.io/docs/api/rest)，魔镜系统通过Rest格式的http与hass进行通信\n使用这些API需要有权限，就是header要带一个token，可以在你的hass中获取长期的token（长期访问令牌），该令牌有十年有效期，token格式见上述网址\n### 我的智能场景（自动化）\n> #### 回家和离家\n我的智能家居设备都会连接到路由器，手机也会连接到路由器，因为每次连接到路由器这些设备的的IP都不会改变，通过ping或者hass的nmap_tracker插件可以判断这些设备在不在线，因为我的手机常年保持WIFI开启状态，回家会自动连接，离家也会因为距离断开，可以通过这个判断我是否在家（5秒钟判断一次，20秒没连上就判断为离家状态）\n如果回家：播放欢迎回家语音并且打开顶灯然后打开魔镜系统\n如果离家：关闭所有设备且关闭魔镜系统\n关于魔镜系统的打开关闭是因为开启状态会占用快一半的3b+的cpu，比较费电，并且打开屏幕也会费电\n> #### 日出和日落\nhass自带一个日出日落的状态，初始化时会判断你的位置，通过这个取得日出日落时间\n日出：关闭顶灯\n日落：开启顶灯，因为我住的地方比较阴，所以设置了偏移量提前日落四十分钟执行\n> #### 睡觉动作\n我十二点准时睡觉，零点准时触发会关闭大灯且关闭魔镜系统\n> #### 温湿度固定值提示\n在温度为30和湿度90会提示“当前温湿度多少多少，求求你开开除湿机/空调吧”\n其实可以做到直接控制空调和除湿机，但是我不想太强制就只做了提示\n\n### 我连接的设备\n> #### 米家开关\n连接了两个，一个控制热水器，一个控制魔镜的屏幕开关\n热水器：睡觉前把热水器的烧水按钮打开但是不打开米家开关，早上躺在床上说一句“魔镜魔镜，打开热水器”就可以在床上滩一会儿，然后起来后喝热水\n屏幕开关：现在是控制树莓派的屏幕开关，我用剪刀测试发现通过短接两个点可以实现屏幕的开关，后续会研究研究可不可以用GPIO实现控制屏幕开关，然后把这个腾给台灯用\n> #### 米家空调伴侣\n有个空调伴侣的插件：[源码地址](https://github.com/syssi/xiaomi_airconditioningcompanion)，但是不支持我这个版本，所以现在以开关形式控制空调\n> #### 飞利浦智能灯泡\n可以调节亮度和色温，我用hass调用后发现关灯状态下需要调用两次，开灯状态下调用一次API，然后范围是：亮度[1-100]，色温[175-333]\n> ### 米家万能遥控器\n通过xiaomi_miio.remote_learn_command学习红外码，然后使用remote.send_command发送红外码，我可以通过hass控制电视、机顶盒、风扇这些，空调的红外码可以学习但是发射没反应不知道为什么，通过米家APP发射的可以使用\n\n### 如何接入米家设备\nhass接入米家设备需要取得token，米家APP的5.4.54版本有个bug，会在日志文件中打印token等信息，在手机SmartHome/logs/Plug_Devicemanager/日期/路径中找到日志文件打开可以找到json格式的数据，其中包含token、host等信息', 'Home Assistant(hass)是一个开源的基于Python的智能家居控制系统，可以连接很多品牌的智能家居并且控制，并且相对于那些品牌的智能家居有更多的自由和控制性。', '2020-06-28 22:27:41', '2021-01-11 02:36:43'), (78, '1114', 13, '【“魔镜”系列】节假日信息', 'https://media.baby7blog.com/Fns2ojEAsdQABiOYUsscPOQqLksf', '> # 【“魔镜”系列】节假日信息\n### 格式\n存储在数据库中，包含日期、名字、所属节假日、休息天数、是否为节假日、是否为向前调休等字段\n\n### 显示\n封装成了个Vue插件，调用后端获取节假日信息然后显示到列表中，具体代码如下：\n```Vue\n<template>\n    <div>\n        <div style=\"border:1px solid #FFFFFF;width: 310px;margin-left: 0;margin-bottom: 5px\"/>\n        <ul v-for=\"(timor,index) in timorList\" :key=\"timor\" style=\"width: 310px;margin-left: 0;padding-left: 0px\">\n            <li v-if=\"index < 12\" style=\"font-family:\'BebasNeueRegular\',Arial,Helvetica,sans-serif;text-shadow: 0 0 5px #00c6ff;color: #fff;font-size: 23px;\">\n                <span>{{timor.name}}</span>\n                <span style=\"float: right\">{{timor.date}}</span>\n            </li>\n            <div v-if=\"index <11\" style=\"border:0.5px dashed #666666;width: 100%;\"/>\n        </ul>\n    </div>\n</template>\n\n<script>\n    import { getList } from \'@/api/timor\'\n\n    export default {\n        name: \"Timor\",\n        data() {\n            return {\n                timorList: [],\n                query: {\n                    current:1,\n                    size:20\n                }\n            }\n        },\n        methods:{\n            getData(){\n                getList(this.query).then(res => {\n                    // this.timorList = res.holiday;\n                    if(res.code === 0){\n                        for(let holiday in res.data.records){\n                            let timor = {\n                                name:res.data.records[holiday].name,\n                                date:res.data.records[holiday].date.substring(0, 10)\n                            };\n                            this.timorList.push(timor)\n                        }\n                    }\n                });\n            }\n        },\n        mounted() {\n            this.getData();\n        }\n    }\n</script>\n\n<style scoped>\n    li {\n        list-style-position: inside;\n        list-style-image: url(\'/icon.png\');\n    }\n</style>\n```\n\n### 未来版本\n我来手动更新节假日信息显然不太可能，我可没那些时间，有个免费获取节假日信息的API，后续会接入，网址如下：[提莫的神秘商店](http://timor.tech/api/holiday/)', '调用后端获取节假日列表信息然后Vue渲染到前端列表', '2020-06-28 22:39:29', '2021-01-11 02:38:20'), (79, '1113', 18, '荣耀路由器Pro2内网穿透步骤（花生壳）', 'https://media.baby7blog.com/FguRlZkjxqV3XgB5GmOlMGhnm2sG', '> # 荣耀路由器Pro2内网穿透步骤（花生壳）\n\n#### 提前说一下，虽然可以一直使用，但是需要花六块钱，还要实名认证\n\n由于我的HomeAssistant需要做一个公网访问，所以想到了对路由器做内网穿透，中间踩了点坑，下面分享一下步骤\n\n在手机上下载“智慧生活”和“花生壳管理”两个APP，不过有这款路由器的人应该都下载了“智慧生活”APP\n\n打开“智慧生活”APP，没有添加路由器的点击右上角添加你的路由器设备，点开路由设备，下拉有个服务推荐，点击下面的“＋”，找到极客工具->花生壳，然后下载安装\n\n退到路由器界面点击花生壳插件，这时候有个账号登录页面，会默认提供一个账号名，一般应该是HWRY开头的，默认密码admin，登录进去初始化一下，然后准备使实名认证\n\n#### ！！！这里有要注意的，必须用它默认给你的账号，如果你以前有花生壳账号也不要用\n\n然后点开“花生壳管理”APP，点击我的，点击实名认证，如果你有认证过的账号，也可以给它权限，具体的话应用里都有提示\n\n实名认证后打开“智慧生活”里的花生壳插件，点击管理->内网穿透->添加映射，具体的你想怎么映射就自己选择吧', '提前说一下，虽然可以一直使用，但是需要花六块钱，还要实名认证\n由于我的HomeAssistant需要做一个公网访问，所以想到了对路由器做内网穿透，中间踩了点坑，下面分享一下步骤', '2020-07-01 21:44:52', '2021-01-11 07:48:44'), (80, '1114', 10, '【Home Assistant】使用GPSLogger记录位置', 'https://media.baby7blog.com/FlIVgZW8LOuAB32QAIhCygaZ6tY_', '> # 【Home Assistant】使用GPSLogger记录位置\n\n#### 我用的hass版本是0.111.4，对于GPSLogger有相关[说明](https://www.home-assistant.io/integrations/gpslogger)，也可以跳过不看\n\n启动Hass，点击配置->集成->右下角添加\n\n找到GPSLogger，添加，记录下提供的一串代码\n\n下载GPSLogger应用：打开https://github.com/mendhak/gpslogger/releases\n\n找到最新的apk下载安装到手机（我安装的时候是106版本）\n\n打开应用，\n\n点击左上角->常规选项->打开开机自启动和在应用程序启动时启动->返回->记录细节->记录到自定义URL\n\nurl:\nhttp://（这里填外网地址）/api/webhook/（这里填前面拿到的代码）\n\nHTTP内容：\nlatitude=%LAT&longitude=%LON&device=%SER&accuracy=%ACC&battery=%BATT&speed=%SPD&direction=%DIR&altitude=%ALT&provider=%PROV&activity=%ACT\n\nHTTP头：\nContent-Type: application/x-www-form-urlencoded\n\nHTTP方法：\nPOST\n\nBase Authenication：\n填你的hass的用户名密码\n\n填完退出，这时候Home Assistant应该就会增加一个实体，就成功了\n\n#### 这里讲一下hass的ip就是你安装的主机ip，端口一般是8123，GPSLogger需要外网访问，没有公网IP的话，一般需要做内网穿透，这里可以参考我写的另一篇博客[荣耀路由器Pro2的内网穿透方案](https://www.baby7blog.com/myBlog?id=79)', '我用的hass版本是0.111.4，对于GPSLogger有相关说明，也可以跳过不看', '2020-07-03 15:31:11', '2021-01-11 02:38:12'), (81, '1101', 15, '使用MySQL存储过程生成大量用户数据', 'https://media.baby7blog.com/FsGXMqNDGJHr_ZRM75HzJTesqr4H', '> # 使用MySQL存储过程生成大量用户数据\n```mysql\ndelimiter //\nDROP PROCEDURE IF EXISTS user_proc_batch_insert;\nCREATE PROCEDURE user_proc_batch_insert(in max_num int)\nBEGIN\nDECLARE i int;   -- 声明变量【循环index】\n-- 声明变量(主键：雪花ID)\nDECLARE user_id varchar(36);\n-- 声明变量(推荐人用户ID)\nDECLARE parent_user_id varchar(36);\n-- 声明变量(昵称)\nDECLARE nickname varchar(255);\n-- 声明变量(手机号码)\nDECLARE mobile varchar(11);\n-- 声明变量(性别：1-男、2-女、3-其他)\nDECLARE gender tinyint;\n-- 声明变量(用户微信号)\nDECLARE wechat_id varchar(100);\n-- 声明变量(微信OpenID)\nDECLARE wechat_openid varchar(50);\n-- 声明变量(微信UnionID)\nDECLARE wechat_unionid varchar(50);\n-- 声明变量(用户头像)\nDECLARE avatar varchar(255);\n-- 声明变量(注册时间)\nDECLARE register_time datetime;\n-- 声明变量(注册IP地址)\nDECLARE register_ip varchar(20);\n-- 声明变量(生日)\nDECLARE birthday varchar(20);\n-- 声明变量(登录时间)\nDECLARE login_time datetime;\n-- set autocommit = 0; -- 禁止自动提交sql\nSET i=1;\nWHILE i < max_num DO\n    -- 循环index+1\n    SET i=i+1;\n    -- 赋值(主键：雪花ID)\n    SET user_id = REPLACE(UUID(),\'-\',\'\');\n--  SET parent_user_id = NULL;\n--  赋值(推荐人用户ID)[五分之一的几率为空]\n    IF round(rand()*(5-1)+1)=2 THEN\n        SET parent_user_id = NULL;\n    ELSE\n        SET parent_user_id = (SELECT t1.id FROM `shop_user` AS t1 JOIN (SELECT concat(conv(ROUND(RAND() * 281474976710655),10,16),\'ffffffffffffffffffff\') AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1);\n        UPDATE shop_user SET follow_num = follow_num + 1 WHERE id = parent_user_id;\n    END IF;\n    -- 赋值(昵称)\n    SET nickname = concat(\n        substring(\'赵钱孙李周吴郑王冯陈诸卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚谢邹喻柏水窦章云苏潘葛奚范彭郎鲁韦昌马苗凤花方俞任袁柳酆鲍史唐费廉岑薛雷贺倪汤滕殷罗毕郝邬安常乐于时傅皮齐康伍余元卜顾孟平黄和穆萧尹姚邵堪汪祁毛禹狄米贝明臧计伏成戴谈宋茅庞熊纪舒屈项祝董粱杜阮蓝闵席季麻强贾路娄危江童颜郭梅盛林刁钟徐邱骆高夏蔡田樊胡凌霍虞万支柯咎管卢莫经房裘干解应宗丁宣贲邓郁单杭洪包诸左石崔吉钮龚\',\n        floor(1+190*rand()),1),\n        substring(\'明国华建文平志伟东海强晓生光林小民永杰军金健一忠洪江福祥中正振勇耀春大宁亮宇兴宝少剑云学仁涛瑞飞鹏安亚泽世汉达卫利胜敏群波成荣新峰刚家龙德庆斌辉良玉俊立浩天宏子松克清长嘉红山贤阳乐锋智青跃元武广思雄锦威启昌铭维义宗英凯鸿森超坚旭政传康继翔栋仲权奇礼楠炜友年震鑫雷兵万星骏伦绍麟雨行才希彦兆贵源有景升惠臣慧开章润高佳虎根远力进泉茂毅富博霖顺信凡豪树和恩向道川彬柏磊敬书鸣芳培全炳基冠晖京欣廷哲保秋君劲轩帆若连勋祖锡吉崇钧田石奕发洲彪钢运伯满庭申湘皓承梓雪孟其潮冰怀鲁裕翰征谦航士尧标洁城寿枫革纯风化逸腾岳银鹤琳显焕来心凤睿勤延凌昊西羽百捷定琦圣佩麒虹如靖日咏会久昕黎桂玮燕可越彤雁孝宪萌颖艺夏桐月瑜沛诚夫声冬奎扬双坤镇楚水铁喜之迪泰方同滨邦先聪朝善非恒晋汝丹为晨乃秀岩辰洋然厚灿卓杨钰兰怡灵淇美琪亦晶舒菁真涵爽雅爱依静棋宜男蔚芝菲露娜珊雯淑曼萍珠诗璇琴素梅玲蕾艳紫珍丽仪梦倩伊茜妍碧芬儿岚婷菊妮媛莲娟一\',\n        floor(1+400*rand()),\n        1),\n        substring(\'明国华建文平志伟东海强晓生光林小民永杰军金健一忠洪江福祥中正振勇耀春大宁亮宇兴宝少剑云学仁涛瑞飞鹏安亚泽世汉达卫利胜敏群波成荣新峰刚家龙德庆斌辉良玉俊立浩天宏子松克清长嘉红山贤阳乐锋智青跃元武广思雄锦威启昌铭维义宗英凯鸿森超坚旭政传康继翔栋仲权奇礼楠炜友年震鑫雷兵万星骏伦绍麟雨行才希彦兆贵源有景升惠臣慧开章润高佳虎根远力进泉茂毅富博霖顺信凡豪树和恩向道川彬柏磊敬书鸣芳培全炳基冠晖京欣廷哲保秋君劲轩帆若连勋祖锡吉崇钧田石奕发洲彪钢运伯满庭申湘皓承梓雪孟其潮冰怀鲁裕翰征谦航士尧标洁城寿枫革纯风化逸腾岳银鹤琳显焕来心凤睿勤延凌昊西羽百捷定琦圣佩麒虹如靖日咏会久昕黎桂玮燕可越彤雁孝宪萌颖艺夏桐月瑜沛诚夫声冬奎扬双坤镇楚水铁喜之迪泰方同滨邦先聪朝善非恒晋汝丹为晨乃秀岩辰洋然厚灿卓杨钰兰怡灵淇美琪亦晶舒菁真涵爽雅爱依静棋宜男蔚芝菲露娜珊雯淑曼萍珠诗璇琴素梅玲蕾艳紫珍丽仪梦倩伊茜妍碧芬儿岚婷菊妮媛莲娟一\',\n        floor(1+400*rand())\n        ,1)\n    );\n    -- 赋值(手机号码)\n    SET mobile = concat(\'1\',substring(cast(3 + (rand() * 10) % 7 AS char(50)), 1, 1), right(left(trim(cast(rand() AS char(50))), 11), 9));\n    -- 赋值(性别：1-男、2-女、3-其他)\n    SET gender = round(rand()*(3-1)+1);\n    -- 赋值(用户微信号)[6-20位数字或字母]\n    SET wechat_id = SUBSTRING(REPLACE(UUID(),\'-\',\'\'),1,round(rand()*(20-6)+6));\n    -- 赋值(微信OpenID)[28位数字或字母]\n    SET wechat_openid = SUBSTRING(REPLACE(UUID(),\'-\',\'\'),1,28);\n    -- 赋值(微信OpenID)[28位数字或字母]\n    SET wechat_unionid = SUBSTRING(REPLACE(UUID(),\'-\',\'\'),1,28);\n    -- 赋值(用户头像)\n    SET avatar = \"goods/00e2df50f4824b6995f432d041777a72.jpg\";\n    -- 赋值(注册时间)(2020-3-1向后60天)\n    SET register_time = DATE_ADD(\'2020-3-1 00:00:00\', INTERVAL FLOOR(1 + (RAND() * 60*60*24*30*2)) SECOND);\n    -- 赋值(注册IP地址)\n    SET register_ip = concat(round(rand()*(254-0)+0),\'.\',round(rand()*(254-0)+0),\'.\',round(rand()*(254-0)+0),\'.\',round(rand()*(254-0)+0));\n    -- 赋值(生日)(1960-1-1向后80年)\n    SET birthday = DATE_ADD(\'1960-1-1 00:00:00\', INTERVAL FLOOR(1 + (RAND() * 60*60*24*30*12*80)) SECOND);\n    -- 赋值(登录时间)(2020-5-2向后10天)\n    SET login_time = DATE_ADD(\'2020-5-2 00:00:00\', INTERVAL FLOOR(1 + (RAND() * 60*60*24*10)) SECOND);\n    INSERT INTO shop_user(id,parent_user_id,nickname,mobile,gender,wechat_id,wechat_openid,wechat_unionid,avatar,register_time,register_ip,birthday,login_time)VALUES (user_id,parent_user_id,nickname,mobile,gender,wechat_id,wechat_openid,wechat_unionid,avatar,register_time,register_ip,birthday,login_time);\nEND WHILE;\n-- commit; -- 待循环完毕后再进行提交，即整体提交整体的 sql，这样可以提高效率，否则循环里会一次一次的去提交sql,数据多了会很慢。\nEND//\ndelimiter ;\n```', '项目需要进行性能测试，所以需要生成用户数据来进行测试，这里使用MySQL存储过程生成大量用户数据', '2020-08-25 15:23:18', '2021-01-11 15:01:46'), (82, '1101', 25, 'pythong处理apiDoc转swagger', 'https://media.baby7blog.com/FjsEh1-AjpBCTxaVVS_SgWHKkX7R', '> # pythong处理apiDoc转swagger\n\n### 需要转换的接口\n现在我需要转换的接口全是nodejs写的数据，而且均为post传输的json格式接口\n\n### apiDoc格式\napiDoc代码中的格式如下：\n```apiDoc\n/**\n * @api {方法} 路径 标题\n * @apiGroup Group\n * @apiDescription 描述这个API的信息\n *\n * @apiParam {String} userName 用户名\n * @apiParamExample {json} request-example\n * {\n *  \"userName\": \"Eve\"\n * }\n *\n * @apiError {String} message 错误信息\n * @apiErrorExample  {json} error-example\n * {\n *   \"message\": \"用户名不存在\"\n * }\n * \n * \n * @apiSuccess {String} userName 用户名\n * @apiSuccess {String} createTime 创建时间\n * @apiSuccess {String} updateTime 更新时间\n * @apiSuccessExample  {json} success-example\n * {\n *   \"userName\": \"Eve\",\n *   \"createTime\": \"1568901681\"\n *   \"updateTime\": \"1568901681\"\n * }\n */function getUserInfo(username) {\n  // 假如这个函数是根据用户名返回用户信息的\n}\n```\n使用npm安装apidoc插件：\n```cmd\nnpm install apidoc\n```\n再新建对应的apidoc.json，格式如下：\n```apiDoc\n{\n  \"name\": \"文档名\",\n  \"version\": \"版本号\",\n  \"description\": \"解释\",\n  \"title\": \"标题\",\n  \"url\" : \"地址\"\n}\n```\n然后在apidoc.json路径下执行命令可以生成接口文档（src是接口代码文件夹，apidoc是生成文档的文件夹）：\n```cmd\napidoc -i src/ -o apidoc/\n```\n生成后可以在apidoc文件夹中打开index.html查看生成的接口文档，生成文档时会生成一个api_data.json，下面会用到\n\n### swagger格式\n这里我们暂时只需要关注参数为json的接口格式\n```swagger\n{\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"description\": \"1.0版本接口文档\",\n        \"version\": \"1.0.5\",\n        \"title\": \"智能医疗辅助平台\",\n        \"termsOfService\": \"http://swagger.io/terms/\"\n    },\n    \"host\": \"http://localhost:8080\",\n    \"basePath\": \"/\",\n    \"tags\": [],\n    \"paths\": {},\n    \"definitions\": {}\n}\n```\n其中path是存放接口的，tags是存放的分组名列表，definitions是实体列表（json参数）\n\n### 思路\n使用apidoc包生成apidoc的json格式数据，然后使用python读取出接口地址、名字、组名、输入参数格式和例子、输出参数格式和例子等，然后根据swagger格式填入对应的数据即可生成swagger的json格式\n我的话是会直接使用处理出的swagger的json格式的数据导入yApi中\n\n### 代码\n代码虽然在下面，但是是我临时着急用写的，有的地方是写死的，需要改，这里放出来主要是讲个大致的思路\n```python\nimport re\nimport json\nimport demjson\nimport decimal\n\n\n# 保存时会出现byte格式问题，使用这个处理\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            return float(o)\n        super(DecimalEncoder, self).default(o)\n\n\n# 分析例子转json，在这里可以自己添加规则\ndef analyze_demjson(json_data):\n    item = json_data.replace(\"\\\\n\", \"\").replace(\"\\\\\", \"\").replace(\" \", \"\")\n    result_item = {}\n    try:\n        result_item = demjson.decode(item, encoding=\'UTF-8\')\n    except:\n        print(item)\n    return result_item\n\n\n# 获取解析apidoc数据\ndef get_api_doc_data(name):\n    data_list = None\n    group_list = {}\n    with open(name, mode=\'r\', encoding=\"UTF-8\") as f:\n        data_list = json.load(f)\n    for data in data_list:\n        if data[\'group\'] in group_list:\n            group_list[data[\'group\']].append(data)\n        else:\n            group_list[data[\'group\']] = [data]\n    return group_list\n\n\n# 转为swagger写入\ndef set_swagger_data(data):\n    swagger_json = {\n        \"swagger\": \"2.0\",\n        \"info\": {\n            \"description\": \"1.0版本接口文档\",\n            \"version\": \"1.0.5\",\n            \"title\": \"智能医疗辅助平台\",\n            \"termsOfService\": \"http://swagger.io/terms/\"\n        },\n        \"host\": \"http://localhost:8080\",\n        \"basePath\": \"/\",\n        \"tags\": [],\n        \"paths\": {},\n        \"definitions\": {}\n    }\n    # 添加分组\n    for group_key in data:\n        swagger_json[\'tags\'].append({\n            \"name\": group_key,\n            \"description\": group_key\n        })\n    # 添加接口信息\n    # 循环分组\n    for group_key in data:\n        # 循环每组列表\n        for interface in data[group_key]:\n            parameters = {}\n            if \'parameter\' in interface and \'fields\' in interface[\'parameter\']:\n                # 获取参数demo信息\n                content = \"\"\n                if \'examples\' in interface[\'parameter\']:\n                    content = analyze_demjson(interface[\'parameter\'][\'examples\'][0][\'content\'])\n                # 添加参数信息\n                parameter_dict = {}\n                for parameter in interface[\'parameter\'][\'fields\'][\'Parameter\']:\n                    parameter_type = \"None\"\n                    if \"type\" in parameter:\n                        parameter_type = parameter[\'type\'].lower()\n                        if parameter_type == \'number\':\n                            parameter_type = \"integer\"\n                    parameter_item = {\n                        \"description\": parameter[\'description\'].replace(\'<p>\', \'\').replace(\'</p>\', \'\'),\n                        \"required\": parameter[\'optional\'],\n                        \"type\": parameter_type,\n                        \"default\": \'\'\n                    }\n                    if parameter[\'field\'] in content:\n                        parameter_item[\'default\'] = content[parameter[\'field\']]\n                    parameter_dict[parameter[\'field\']] = parameter_item\n                parameters = {\n                    \"in\": \"body\",\n                    \"name\": interface[\'name\'],\n                    \"description\": interface[\'name\'],\n                    \"required\": \"true\",\n                    \"schema\": {\n                        \"originalRef\": interface[\'name\'],\n                        \"$ref\": \"#/definitions/\" + interface[\'name\']\n                    }\n                }\n                swagger_json[\'definitions\'][interface[\'name\']] = {\n                        \"type\": \"object\",\n                        \"properties\": parameter_dict\n                    }\n            # 添加返回信息\n            responses = {\n                \"200\": {\n                    \"description\": \"successful operation\",\n                    \"schema\": {\n                        \"originalRef\": interface[\'name\'] + \"_response\",\n                        \"$ref\": \"#/definitions/\" + interface[\'name\'] + \"_response\"\n                    }\n                }\n            }\n            schema = {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"errcode\": {\n                        \"type\": \"integer\",\n                        \"default\": 0,\n                        \"description\": \"编码，成功返回1\"\n                    },\n                    \"data\": {\n                        \"type\": \"object\",\n                        \"default\": {},\n                        \"description\": \"监管对象明细,包含表头和数据内容两部分\"\n                    },\n                    \"errmsg\": {\n                        \"type\": \"string\",\n                        \"default\": \"ok\",\n                        \"description\": \'编码提示信息，成功时返回 \"ok\"\'\n                    }\n                }\n            }\n            # 返回例子\n            if \"success\" in interface:\n                response_example = \"\"\n                if len(interface[\'success\'][\'examples\']) == 1:\n                    response_example = analyze_demjson(interface[\'success\'][\'examples\'][0][\'content\'])\n                else:\n                    response_example = analyze_demjson(interface[\'success\'][\'examples\'][\'content\'])\n                if \'data\' in response_example and response_example[\'data\'] != {}:\n                    schema[\'properties\'][\'data\'] = response_example[\'data\']\n            swagger_json[\'definitions\'][interface[\'name\'] + \"_response\"] = schema\n            # 加入\n            swagger_json[\'paths\'][interface[\'url\']] = {\n                interface[\'type\']: {\n                    \"tags\": [group_key],\n                    \"summary\": interface[\'title\'].replace(interface[\'url\'] + \'-\', \'\'),\n                    \"description\": interface[\'title\'],\n                    \"consumes\": [\n                        \"application/json\"\n                    ],\n                    \"produces\": [\n                        \"application/json\"\n                    ],\n                    \"parameters\": [parameters],\n                    \"responses\": responses\n                }}\n    # 写入json文件\n    with open(\'swagger_data.json\', \'w\', encoding=\"UTF-8\") as json_file:\n        json.dump(swagger_json, json_file, cls=DecimalEncoder, indent=4, ensure_ascii=False)\n\n\nif __name__ == \'__main__\':\n    group_data = get_api_doc_data(\'api_data.json\')\n    set_swagger_data(group_data)\n```', '使用apidoc包生成apidoc的json格式数据，然后使用python读取出接口地址、名字、组名、输入参数格式和例子、输出参数格式和例子等，然后根据swagger格式填入对应的数据即可生成swagger的json格式', '2020-09-10 09:49:01', '2021-01-11 09:06:18'), (83, '1113', 18, '使用华为云DevCloud进行项目自动化构建部署', 'https://media.baby7blog.com/FmWmDtdJ4AznX4NRAM2boLIRSumq', '> # 使用华为云DevCloud进行项目自动化构建部署\n## 介绍\n华为云DevCloud提供了许许多多的功能，我们取其中的代码仓库、编译构建、部署、发布、流水线的功能\n其中代码仓库可以使用外部仓库，然后在代码仓库上传对应的源代码，新建对应的构建任务，构建后生成的文件存储在发布视图中，然后添加服务器信息并新建部署任务，最后组合1.代码仓库 2.编译构建 3.发布 4.部署 为一条完整的流水线，并可以设置由代码仓库的提交更新或定时为条件进行触发\n对了，本篇文章针对会进行手动部署的\n\n## SpringBoot流水线\n### 前提\n服务器安装好了对应的Jdk、Mysql\n\n### 构建\n第一步选【Maven构建】，选择工具对应的Maven版本，命令内容是：\n```maven\nmvn package -Dmaven.test.skip=true -U -e -X -B\n```\n第二步选【上传软件包到软件发布库】，构建包路径填：\n```path\n**/target/这里是生成包的名字.jar\n```\n\n### 部署\n第一步选【华为云从构建任务获得文件】，源类型是构建任务，主机组没有的新建一个，构建任务选择上一步的构建任务，构建序号为Latest，下载到主机的部署目录是你自己要填的服务器路径。\n第二步选【启动/停止SpringBoot服务】，服务类型是停止，服务绝对路径是，上一步选的路径再加上发布文件中的名字：***.jar\n第三步选【启动/停止SpringBoot服务】，服务类型是启动，路径与上一步一样\n\n## SpringCloud流水线\n### 构建\n第一步与SpringBoot相同，SpringBoot是打成一个jar包，SpringCloud有好几个执行的jar包，所以构建的第二到N步是选择对应的jar包上传到软件发布库\n\n### 部署\n第一步与SprintBoot相同，多出来的就是停止/启动多个服务了\n\n## Vue流水线\n### 前提\n服务器安装好了Nginx并配置好\n\n### 构建\n第一步选【npm构建】，选择对应的工具版本，命令内容是(可根据需要修改)：\n```npm\nexport PATH=$PATH:/root/.npm-global/bin\n#设置Devcloud镜像仓加速构建\nnpm config set registry https://mirrors.huaweicloud.com/repository/npm/\nnpm config set prefix \'~/.npm-global\'\n#如需安装node-sass\n#npm config set sass_binary_site https://repo.huaweicloud.com/node-sass/\n#npm install node-sass\n#加载依赖\nnpm install\n#默认构建\nnpm run build\n```\n第二步选【执行shell命令】，选择一个版本（似乎只有一个版本），命令内容是（其实就是打个压缩包）：\n```shell\ntar -cvf dist.zip dist\n```\n第三步选【上传软件包到软件发布库】，构建包路径是：\n```path\n./dist.zip\n```\n\n### 部署\n第一步选【删除文件】，删除路径应该是你Nginx中前端项目的路径，加/**表示删除该目录下所有文件，千万不要前面什么都没有就写了个/**上去，我不知道会不会跟rm -rf /*一样把所有文件都干掉了\n第二步选【选择部署来源】，依然是构建任务最后一个版本，部署目录是Nginx前端项目路径\n第三步选【执行shell命令】，例如命令内容为（解压）：\n```shell\ncd /usr/share/nginx/前端项目名\ntar -xvf /usr/share/nginx/前端项目名/dist.zip\nmv dist/* /usr/share/nginx/前端项目名/\n```', '华为云DevCloud提供了许许多多的功能，我们取其中的代码仓库、编译构建、部署、发布、流水线的功能', '2020-09-20 21:51:33', '2021-01-12 03:09:51'), (85, '1101', 40, 'Mybatis-plus子查询的一个思路', 'https://media.baby7blog.com/FrsCM7eBM3iGEtMY-rgr4Hjwqumr', '> # Mybatis-plus子查询的一个思路\n## 思路\n思路就是QueryWrapper中的getCustomSqlSegment()这个函数，其实在Mybatis的xml文件中${ew.customSqlSegment}的customSqlSegment也是用的这个函数，使用这个函数可以做一个小的QueryWrapper然后getCustomSqlSegment()转为字符串，最后替换其中的#{}（忘了是什么了，后面补上），然后在大的QueryWrapper里用inSql函数添加这个转换后的字符串\n\n## 伪代码（后面补上完整的）\n```java\nQueryWrapper<Test> queryWrapper = new QueryWrapper<>();\nQueryWrapper<Test> childQueryWrapper = new QueryWrapper<>();\nchildQueryWrapper.eq(\"CESHI\", value);\nString childString = childQueryWrapper.getCustomSqlSegment();\nchildString = childString.replace(\"#{}\", value);\nqueryWrapper.inSql(\"NEW\", childString);\n```', '思路就是QueryWrapper中的getCustomSqlSegment()这个函数，其实在Mybatis的xml文件中${ew.customSqlSegment}的customSqlSegment也是用的这个函数', '2020-09-21 21:52:35', '2021-01-11 02:37:43'), (86, '1101', 23, 'SpringBoot整合CFX框架', 'https://media.baby7blog.com/FhDb4tAB68LoL9BP9y5Lc71TarJY', '> # SpringBoot整合CFX框架\n## CXF框架\nApache CXF是一个开源的WebService框架，CXF可以用来构建和开发WebService，些服务可以支持多种协议，比如：SOAP、POST/HTTP、HTTP，这篇文章讲的是SOAP这个协议使用CXF框架整合进入SpringBoot\n\n## Maven引入\n```Maven\n<dependency>\n    <groupId>org.apache.cxf</groupId>\n    <artifactId>cxf-spring-boot-starter-jaxws</artifactId>\n    <version>3.2.7</version>\n</dependency>\n```\n\n## config类配置\n```java\nimport com.hospital.test.cxf.ws.TestServices;\nimport org.apache.cxf.Bus;\nimport org.apache.cxf.bus.spring.SpringBus;\nimport org.apache.cxf.jaxws.EndpointImpl;\nimport org.apache.cxf.transport.servlet.CXFServlet;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.xml.ws.Endpoint;\n\n@Configuration\npublic class CxfConfig {\n    @Autowired\n    private TestServices testServices;\n\n    @SuppressWarnings(\"all\")\n    @Bean\n    public ServletRegistrationBean wsServlet() {\n        ServletRegistrationBean bean = new ServletRegistrationBean(new CXFServlet(), \"/soap/*\");\n        return bean;\n    }\n\n    @Bean(name = Bus.DEFAULT_BUS_ID)\n    public SpringBus springBus() {\n        return new SpringBus();\n    }\n\n    @Bean\n    public Endpoint testServices() {\n        EndpointImpl endpoint = new EndpointImpl(springBus(), testServices);\n        endpoint.publish(\"/testServices\");\n        return endpoint;\n    }\n}\n```\n## 实现\nTestServices：\n```java\nimport javax.jws.WebMethod;\nimport javax.jws.WebParam;\nimport javax.jws.WebResult;\nimport javax.jws.WebService;\n\n@WebService(name = \"TestServices\", targetNamespace = \"http://ws.cxf.test.baby7blog.com/\")\npublic interface TestServices {\n    /** 通用接口，用于平台服务的补充\n     * @param in 一个请求\n     * @return 根据请求内容返回相关内容\n     */\n    @WebMethod(operationName=\"exec\")\n    @WebResult(name = \"ret\", targetNamespace = \"http://ws.cxf.test.baby7blog.com/\")\n    String exec(@WebParam(name = \"in\") String in);\n}\n```\nTestServicesImpl：\n```java\nimport com.hospital.budget.business.handler.BusinessHandler;\nimport com.hospital.budget.cxf.ws.BudgetServices;\nimport javax.jws.WebService;\nimport javax.xml.ws.BindingType;\nimport javax.xml.ws.soap.SOAPBinding;\nimport lombok.extern.log4j.Log4j2;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@WebService(serviceName = \"BudgetServices\",\n            portName = \"BudgetServices\",\n            targetNamespace = \"http://ws.cxf.test.baby7blog.com/\",\n            endpointInterface = \"com.hospital.budget.cxf.ws.BudgetServices\")\n@BindingType(value = SOAPBinding.SOAP12HTTP_BINDING)\n@Component\n@Log4j2\npublic class BudgetServicesImpl implements BudgetServices {\n\n    @Autowired\n    BusinessHandler handler;\n\n    @Override\n    public String exec(String in) {\n        String ret;\n        try {\n            ret = handler.exec(in);\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            ret = \"<Response><code>-1</code><msg>to be illegal to do sth;</msg></Response>\";\n        }\n        return ret;\n    }\n}\n```', 'Apache CXF是一个开源的WebService框架，CXF可以用来构建和开发WebService，些服务可以支持多种协议，比如：SOAP、POST/HTTP、HTTP，这篇文章讲的是SOAP这个协议使用CXF框架整合进入SpringBoot', '2020-09-22 13:51:07', '2021-01-13 05:12:25'), (87, '1101', 28, 'SpringBoot使用切面实现日志记录', NULL, '> # SpringBoot使用切面实现日志记录\n### 首先是自定义日志记录注解\n```java\nimport java.lang.annotation.*;\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface MyLog {\n    String value() default \"\";\n}\n```\n### 然后是实现类\n```java\nimport com.alibaba.fastjson.JSON;\nimport com.example.entity.SysLog;\nimport com.example.service.SysLogService;\nimport com.example.utils.HttpContextUtils;\nimport com.example.utils.IPUtils;\nimport com.example.utils.ShiroUtils;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\n/**\n * 系统日志：切面处理类\n */\n@Aspect\n@Component\npublic class SysLogAspect {\n\n    @Autowired\n    private SysLogService sysLogService;\n\n    //定义切点 @Pointcut\n    //在注解的位置切入代码\n    @Pointcut(\"@annotation( com.example.aspect.MyLog)\")\n    public void logPoinCut() {\n    }\n\n    //切面 配置通知\n    @AfterReturning(\"logPoinCut()\")\n    public void saveSysLog(JoinPoint joinPoint) {\n        System.out.println(\"切面。。。。。\");\n        //保存日志\n        SysLog sysLog = new SysLog();\n\n        //从切面织入点处通过反射机制获取织入点处的方法\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        //获取切入点所在的方法\n        Method method = signature.getMethod();\n\n        //获取操作\n        MyLog myLog = method.getAnnotation(MyLog.class);\n        if (myLog != null) {\n            String value = myLog.value();\n            sysLog.setOperation(value);//保存获取的操作\n        }\n\n        //获取请求的类名\n        String className = joinPoint.getTarget().getClass().getName();\n        //获取请求的方法名\n        String methodName = method.getName();\n        sysLog.setMethod(className + \".\" + methodName);\n\n        //请求的参数\n        Object[] args = joinPoint.getArgs();\n        //将参数所在的数组转换成json\n        String params = JSON.toJSONString(args);\n        sysLog.setParams(params);\n\n        sysLog.setCreateDate(new Date());\n        //获取用户名\n        sysLog.setUsername(ShiroUtils.getUserEntity().getUsername());\n        //获取用户ip地址\n        HttpServletRequest request = HttpContextUtils.getHttpServletRequest();\n        sysLog.setIp(IPUtils.getIpAddr(request));\n\n        //调用service保存SysLog实体类到数据库\n        sysLogService.save(sysLog);\n    }\n}\n```\n### 最后直接在例如Controller中使用即可\n```java\nimport com.example.aspect.MyLog;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/sys\")\npublic class SysMenuController {\n\n    @MyLog(value = \"测试\")\n    @PostMapping(\"/test\")\n    public String test(@RequestBody String test) {\n        System.out.println(test);\n        return \"index\";\n    }\n}\n```\n### 下面是几个Utils\n#### HttpContextUtils:\n```java\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class HttpContextUtils {\n    public static HttpServletRequest getHttpServletRequest() {\n        return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n    }\n}\n```\n#### IPUtils:\n```java\nimport javax.servlet.http.HttpServletRequest;\n\npublic class IPUtils {\n    public static String getIpAddr(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-real-ip\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"x-forwarded-for\");\n            if (ip != null) {\n                ip = ip.split(\",\")[0].trim();\n            }\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n```\n#### ShiroUtils:\n```java\nimport com.example.entity.User;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\n\npublic class ShiroUtils {\n\n    public static HttpSession getSession(){\n        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n        HttpSession httpSession = request.getSession();\n        return httpSession;\n    }\n\n    public static User getUserEntity(){\n        return (User)getSession().getAttribute(\"user\");\n    }\n\n}\n```', '自定义注解，使用Spring AOP实现日志记录', '2020-09-22 20:13:56', '2021-01-12 13:36:27'), (88, '1101', 38, '【“魔镜”系列】MQTT发送与接收', 'https://media.baby7blog.com/FqHtyULRowmVX8B8dRt4sdAa5zkd', '> # 【“魔镜”系列】MQTT发送与接收\n## 发送\n这里用的是python进行发送，代码很简单，如下：\n```python\nimport paho.mqtt.publish as publish\n\n# 发送mqtt消息到服务器\ndef send_mqtt(message):\n    publish.single(settings.TOPIC, message, hostname=settings.HOSTNAME,\n                   auth={\'username\': settings.USERNAME, \'password\': settings.PASSWORD})\n    print(\"send message success\" + message)\n```\n\n## 接收\n接收使用Java进行接收（暂时先这样写，后面有时间再完善）\nInitMQTT:\n```java\nimport com.pig4cloud.pigx.statis.config.MqttConfig;\nimport com.pig4cloud.pigx.statis.task.MqttTask;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.ApplicationArguments;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Slf4j\n@Order(2)\npublic class InitMQTT implements ApplicationRunner {\n\n    @Autowired\n    private MqttTask mqttTask;\n\n    @Override\n    public void run(ApplicationArguments var1) {\n        log.info(\"初始化MQTT监听\");\n        log.info(\"初始化环境MQTT监听\");\n        mqttTask.runMQTT(MqttConfig.MQTT_TOPIC, MqttConfig.MQTT_USER_NAME, MqttConfig.MQTT_PASSWORD, MqttConfig.MQTT_CLIENT_ID);\n    }\n}\n```\nMqttTask:\n```java\nimport com.pig4cloud.pigx.statis.api.entity.Sensor;\nimport com.pig4cloud.pigx.statis.mqtt.ReceiveMessage;\nimport com.pig4cloud.pigx.statis.service.SensorService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Component;\n\n/**\n * 线程任务\n */\n@Component\n@Slf4j\npublic class MqttTask {\n    @Autowired\n    private ReceiveMessage receiveMessage;\n\n    @Autowired\n    private SensorService sensorService;\n\n    @Async\n    public void runMQTT(String topic,String userName,String password, String clientId) {\n        try {\n            log.info(\"开始连接EMQ:{}\",topic);\n            receiveMessage.start(topic, userName,password,clientId);\n        }catch (Exception e){\n            log.error(\"连接MQTT异常：{}\",e.getMessage());\n        }\n    }\n\n    @Async\n    public void save(Sensor sensor){\n    	sensorService.save(sensor);\n    }\n}\n```\nReceiveMessage:\n```java\nimport com.pig4cloud.pigx.statis.config.MqttConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.eclipse.paho.client.mqttv3.MqttClient;\nimport org.eclipse.paho.client.mqttv3.MqttConnectOptions;\nimport org.eclipse.paho.client.mqttv3.MqttException;\nimport org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Slf4j\npublic class ReceiveMessage {\n\n    private static MqttClient sensorClient;         //环境\n\n    public MqttClient getSensorClient(){return sensorClient;}\n\n    private MqttClient connect(String host, String userName, String password, String clientId) throws MqttException {\n        MemoryPersistence persistence = new MemoryPersistence();\n        MqttConnectOptions options = new MqttConnectOptions();\n        options.setCleanSession(false);\n        options.setUserName(userName);\n        options.setPassword(password.toCharArray());\n        options.setKeepAliveInterval(20);\n        options.setConnectionTimeout(10);\n		//设置环境回调\n		sensorClient = new MqttClient(host, clientId, persistence);\n		sensorClient.setCallback(new PushSensorCallback());\n		sensorClient.connect(options);\n		return sensorClient;\n    }\n\n    public void receive(MqttClient client, String topic) throws MqttException {\n        int[] Qos = {MqttConfig.QOS};\n        String[] topics = {topic};\n        client.subscribe(topics, Qos);\n    }\n\n    public void start(String topic, String userName, String password, String clientId) throws MqttException {\n        MqttClient client = connect(MqttConfig.MQTT_HOST, userName, password, clientId);\n        if (client != null) {\n            receive(client, topic);\n        }\n        log.info(\"连接EMQ:{}成功\", MqttConfig.MQTT_HOST);\n    }\n}\n```\nPushSensorCallback:\n```java\nimport com.alibaba.fastjson.JSON;\nimport com.pig4cloud.pigx.statis.api.entity.Sensor;\nimport com.pig4cloud.pigx.statis.config.MqttConfig;\nimport com.pig4cloud.pigx.statis.service.SensorService;\nimport com.pig4cloud.pigx.statis.task.MqttTask;\nimport com.pig4cloud.pigx.statis.util.SpringUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;\nimport org.eclipse.paho.client.mqttv3.MqttCallback;\nimport org.eclipse.paho.client.mqttv3.MqttMessage;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\nimport java.util.UUID;\n\n/**\n * 环境接收消息\n */\n@Component\n@Slf4j\npublic class PushSensorCallback implements MqttCallback {\n\n    @Override\n    public void connectionLost(Throwable throwable) {\n        /**\n         * 连接丢失后，一般在这里面进行重连\n         */\n        System.out.println(\"环境MQTT连接断开，开始重连\");\n       try{\n           log.info(\"重连环境MQTT\");\n           MqttTask mqttTask = SpringUtils.getBean(\"mqttTask\", MqttTask.class);\n           mqttTask.runMQTT(MqttConfig.MQTT_TOPIC, MqttConfig.MQTT_USER_NAME, MqttConfig.MQTT_PASSWORD, MqttConfig.MQTT_CLIENT_ID);\n       }catch (Exception e){\n           log.error(\"重连环境MQTT异常：{}\",e.getMessage());\n           log.info(\"继续重连环境MQTT\");\n           connectionLost(throwable);\n       }\n    }\n\n    @Override\n    public void messageArrived(String topic, MqttMessage message) throws Exception {\n        try {\n        	String msg = new String(message.getPayload());\n            log.info(\"接收环境MQTT消息：{}\", msg);\n			Sensor sensor = JSON.parseObject(msg, Sensor.class);\n			sensor.setId(UUID.randomUUID().toString());\n			sensor.setCreateTime(new Date().getTime());\n			MqttTask mqttTask = SpringUtils.getBean(\"mqttTask\", MqttTask.class);\n			mqttTask.save(sensor);\n			System.out.println(sensor.toString());\n		}catch (Exception e){\n            log.error(\"接收环境MQTT消息异常:{}\",e.toString());\n        }\n    }\n\n    @Override\n    public void deliveryComplete(IMqttDeliveryToken token) {\n        System.out.println(\"deliveryComplete---------\" + token.isComplete());\n    }\n}\n```\n', '魔镜的环境数据存储使用HBase进行存储，使用传感器获取环境数据，然后Python使用MQTT协议发送到后端进行接收存储', '2020-09-22 20:49:23', '2021-01-13 08:05:45'), (89, '1113', 24, '【Jenkins&Docker构建部署系列】一、环境安装', 'https://media.baby7blog.com/Fg2wCiZwVTY6QYAzaNjrTUFPI1ry', '> # 【Jenkins&Docker构建部署系列】一、环境安装\n### 环境\n系统：CenOS6\n内存：4G\n\n### JDK的安装(或交由Jenkins安装)\n我这里是安装的JDK11\n```shell\nsudo yum -y install java-11-openjdk-devel\n```\n\n### Maven的安装(或交由Jenkins安装)\n我在/home新建了maven文件夹放置maven，只需要解压，不需要配置环境变量\n```shelll\ncd /home/maven/\nwget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz\ntar vxf apache-maven-3.5.4-bin.tar.gz\n```\n\n### Git的安装(或交由Jenkins安装)\n```shell\nyum install git\n```\n\n### Jenkins的安装\n#### 主体安装\n```shelll\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n```\n#### 配置和启动Jenkins\n使用vim修改/etc/sysconfig/jenkins，配置权限为root\n```conf\n$JENKINS_USER=\"root\"\n```\n修改目录权限\n```shell\nchown -R root:root /var/lib/jenkins\nchown -R root:root /var/cache/jenkins\nchown -R root:root /var/log/jenkins\n```\n重新启动jenkins\n```shell\nservice jenkins restart\n//或者service jenkins start\n```\n使用浏览器访问jenkins【http://localhost:8080】,服务器的话localhost可以替换成你的公网ip\n然后会看见让你填写密码，使用cat查看密码\n```shell\ncat /var/lib/jenkins/secrets/initialAdminPassword\n```\n填写密码后继续，选择推荐的安装方式，等待安装\n安装完成后创建管理员用户，成功进入Jenkins\n#### 配置构建部署需要的插件和配置\n在 系统管理->插件管理->可选插件中安装Maven Integration plugin插件\n在 系统管理->全局工具配置->JDK中Name随便取一个，【JAVA_HOME】填【/usr/local/java/jdk-11.0.8】\n在 系统管理->全局工具配置->Git中Name随便取一个，【Path to Git executable】填【/usr/bin/git】\n在 系统管理->全局工具配置->Maven中Name随便取一个，【MAVEN_HOME】填【/home/maven/apache-maven-3.5.4】\n\n### Docker的安装\n```shell\nyum install https://get.docker.com/rpm/1.7.1/centos-6/RPMS/x86_64/docker-engine-1.7.1-1.el6.x86_64.rpm\nservice docker start\n```', '【Jenkins&Docker构建部署系列】是我在实践中走过的一条路，踩过一些坑，在这里记下，以防以后再犯哈哈哈哈', '2020-10-02 19:09:33', '2021-01-12 08:10:28'), (90, '1113', 18, '【Jenkins&Docker部署系列】二、数据库Docker的安装(Mysql、Redis)', 'https://media.baby7blog.com/Fg2wCiZwVTY6QYAzaNjrTUFPI1ry', '> # 【Jenkins&Docker部署系列】二、数据库Docker的安装(Mysql、Redis)\n\n### MySQL Docker\n首先拉取MySQL镜像：\n```shell\ndocker pull mysql\n```\n然后查看镜像是否安装成功：\n```shell\ndocker images\n```\n然后直接运行：\n```shell\ndocker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n```\n密码是123456，端口均为3306\n\n### Redis Docker\n首先拉取Redis镜像：\n```shell\ndocker pull redis\n```\n然后依旧查看镜像是否安装：\n```shell\ndocker images\n```\n然后就可以直接运行啦：\n```shell\ndocker run -p 6380:6379 -d redis:latest redis-server\n```\n这里-p开启映射，6380:6379的6380是对外的端口，6379是容器内部端口，因为我的6379被占用，一般来说外部还是开启6379', '【Jenkins&Docker构建部署系列】是我在实践中走过的一条路，踩过一些坑，在这里记下，以防以后再犯哈哈哈哈', '2020-10-02 19:10:22', '2021-01-12 08:10:32'), (91, '1113', 19, '【Jenkins&Docker部署系列】三、SpringBoot的构建的和部署', 'https://media.baby7blog.com/Fg2wCiZwVTY6QYAzaNjrTUFPI1ry', '> # 【Jenkins&Docker部署系列】三、SpringBoot的构建的和部署\n\n1.新建选择【构建一个Maven项目】\n2.Build的Root POM为\n```text\npom.xml\n```\nGoals and options为\n```shell\n-DskipTests=true clean package\n```\n3.Post Steps为\n```shell\ncd /home/cdss-server\nBUILD_ID=dontKillMe sh docker.sh\n```\n这里贴一下docker.sh的代码：\n```shell\nBASE_PATH=/home/test-server\n# 源jar路径  即jenkins构建后存放的路径（）\nSOURCE_PATH=/var/lib/jenkins/workspace\n#docker 镜像/容器名字或者jar名字 这里都命名为这个\nSERVER_NAME=test-server\n#容器id\nCID=$(docker ps | grep \"$SERVER_NAME\" | awk \'{print $1}\')\n#镜像id\nIID=$(docker images | grep \"$SERVER_NAME\" | awk \'{print $3}\')\n\necho \"最新构建代码 $SOURCE_PATH/$SERVER_NAME/target/test-server.jar 迁移至 $BASE_PATH ....\"\n#把项目从jenkins构建后的目录移动到我们的项目目录下同时重命名下\nmv -f $SOURCE_PATH/$SERVER_NAME/target/test-server.jar $BASE_PATH/test-server.jar\n# 备份\ndatename=$(date +%Y%m%d-%H%M%S)\ncp $BASE_PATH/test-server.jar $BASE_PATH/backup/test-server-$datename.jar\n#修改文件的权限\nchmod 777 /home/test-server/test-server.jar\necho \"迁移完成\"\n\n\n# 构建docker镜像\n        if [ -n \"$IID\" ]; then\n                echo \"存在$SERVER_NAME镜像，IID=$IID\"\n        else\n                echo \"不存在$SERVER_NAME镜像，开始构建镜像\"\n                        cd $BASE_PATH\n                docker build -t $SERVER_NAME .\n        fi\n# 停止docker容器\ndocker stop $SERVER_NAME\n# 删除docker容器\ndocker rm $SERVER_NAME\n# --name docker-test                 容器的名字为docker-test\n#   -d                                 容器后台运行\n#   -p 3636:3636                       指定容器映射的端口和主机对应的端口都为3636\n#   -v /home/test-server/:/home/test-server/   将主机的/home/test-server/目录挂载到容器的/home/test-server/ 目录中（不可少每次本地更新jar包重启容器即可，不用重新构建镜像\ndocker run --name $SERVER_NAME -v $BASE_PATH:$BASE_PATH -d -p 8090:8090  -e \"SPRING_PROFILES_ACTIVE=test\" $SERVER_NAME\necho \"$SERVER_NAME容器创建完成\"\n```\n注意一下，  -e \"SPRING_PROFILES_ACTIVE=test\"是用来选择环境的\n这里贴一下Dockerfile的内容\n```Dockerfile\nFROM openjdk:11.0.4\nWORKDIR /home/cdss-server\nEXPOSE 8090\nENTRYPOINT [\"java\",\"-jar\",\"test-server.jar\",\"-c\"]\n```', '【Jenkins&Docker构建部署系列】是我在实践中走过的一条路，踩过一些坑，在这里记下，以防以后再犯哈哈哈哈', '2020-10-02 19:10:52', '2021-01-11 02:37:59'), (92, '1113', 26, '【Jenkins&Docker部署系列】四、Vue的构建和部署(Nginx)', 'https://media.baby7blog.com/Fg2wCiZwVTY6QYAzaNjrTUFPI1ry', '> # 【Jenkins&Docker部署系列】四、Vue的构建和部署(Nginx)\n1.新建选择【构建一个自由风格的软件项目】\n2.构建-执行shell命令\n```shell\nnpm install\nnpm run build\n```\n3.构建-执行shell命令\n```shell\ncd /home/test-ui\nBUILD_ID=dontKillMe sh backup.sh\n```\n4.构建-执行shell命令\n```shell\ncd /home/jiap-ui \\\n && cp -r /var/lib/jenkins/workspace/test-ui/dist/ . \\\n && docker stop vuenginxapp || true \\\n && docker rm vuenginxapp || true \\\n && docker build  -t vuenginxapp  . \\\n && docker run -d -p 8091:80 --name vuenginxapp -v /home/jiap-ui/dist:/usr/share/nginx/html -v /home/test-ui/nginx.conf:/etc/nginx/nginx.conf vuenginxapp\n```\n这里贴一下backup.sh的内容\n```shell\n# 备份\nBASE_PATH=/home/test-ui\nnew_backup_file=dist-$(date +%Y%m%d-%H%M%S)\ncd $BASE_PATH/backup\nmkdir -p $new_backup_file && cd $_\ncp -r $BASE_PATH/dist/ .\nrm -r $BASE_PATH/dist/\n```\n还有Dockerfile内容\n```Dockerfile\nFROM nginx:1.8.1\nEXPOSE 80\n```\n最后是nginx.conf的内容\n```conf\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  \'$remote_addr - $remote_user [$time_local] \"$request\" \'\n                      \'$status $body_bytes_sent \"$http_referer\" \'\n                      \'\"$http_user_agent\" \"$http_x_forwarded_for\"\';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n    gzip_types text/plain application/javascript text/css;\n\n    # 虚拟主机server块\n    server {\n        # 端口\n        listen   80;\n        # 匹配请求中的host值\n        server_name  localhost;\n\n        # 监听请求路径\n        location / {\n            root   /usr/share/nginx/html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   /usr/share/nginx/html;\n        }\n\n    }\n\n    include /etc/nginx/conf.d/*.conf;\n}\n```', '【Jenkins&Docker构建部署系列】是我在实践中走过的一条路，踩过一些坑，在这里记下，以防以后再犯哈哈哈哈', '2020-10-02 19:11:22', '2021-01-13 06:06:18'), (93, '1113', 43, '服务器被meow攻击，Elasticsearch数据被删除', 'https://media.baby7blog.com/FlM9du_xXjyqPOkUep16KYdOABqs', '> # 服务器被meow攻击，Elasticsearch数据被删除\r\n\r\n记录一下\r\n\r\nElasticsearch这几个月的测试数据被删除，通过http://***/_cat/indices?v查看索引列表发现之前的数据均被删除，多出来了很多以-meow结尾的数据\r\n\r\n![cbbee178cc358185a0b4368ed932d3c.png](https://media.baby7blog.com/1602597160065242118)\r\n\r\n以此为关键词在google找到了有同样遭遇的博主[@CoderBaby](https://www.cnblogs.com/NaughtyCat/)，他找到了数据被删除的原因：Elasticsearch开放远程9200端口并且没有安全认证，meow应该是会下载你的数据转移到自己那里，然后删除你的索引，让你去付钱获取之前的数据（跟勒索病毒一样的套路），国外一个安全小哥twitter账号有挺多后续：[Bob Diachenko](https://twitter.com/MayhemDayOne)（好多被攻击的，很多数据被曝出来）\r\n\r\n详细可以去看这个博主写的这篇博客：[Meow攻击删除不安全的Elasticsearch索引，建一堆以Meow结尾的奇奇怪怪的索引](https://www.cnblogs.com/NaughtyCat/archive/2020/08/05/meow-attack-delete-unsafe-es-index.html)\r\n\r\n另：这个meow通过ProtonVPN等VPN进行操作，ProtonVPN表示将调查并封禁相关账户（好像没有什么用）', 'Elasticsearch这几个月的测试数据被删除，通过http://***/_cat/indices?v查看索引列表发现之前的数据均被删除，多出来了很多以-meow结尾的数据', '2020-10-13 21:51:28', '2021-01-12 07:05:07'), (94, '1113', 35, '博客自动更新sitemap文件', 'https://media.baby7blog.com/FuzZOs2yhLrXiwHKttaPZ9xXtCUe', '> # 博客自动更新sitemap文件\r\n\r\n### 流程\r\n我的博客之前的sitemap文件都是手动更新的，太麻烦了，现在改为定时更新，思路是使用python读取博客的文章信息并生成sitemap文件，然后使用华为DevCloud定时去执行\r\n生成的文件有两个，一个是sitemap.xml，还有个是google看的是sitemap-google.xml\r\n\r\n### python代码:\r\n```python\r\n# -*- coding:utf-8 -*-\r\nimport requests\r\nimport datetime\r\nimport json\r\nimport re\r\n\r\n\r\n# 域名\r\ndomain_name = \"https://www.baby7blog.com\"\r\n# 项目路径\r\nproject_path = \"/usr/share/nginx/blog-ui/\"\r\n# sitemap header格式\r\nbaidu_header = \'<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<urlset>\r\n\'\r\ngoogle_header = \'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\r\n\'\r\n# sitemap datetime格式\r\nbaidu_datetime = \'%Y-%m-%d\'\r\ngoogle_datetime = \'%Y-%m-%dT%H:%M:%S+00:00\'\r\n# 基本链接xml格式\r\nitem_url = \'\'\'\r\n  <url>\r\n    <loc>%s</loc>\r\n    <lastmod>%s</lastmod>\r\n    <changefreq>daily</changefreq>\r\n    <priority>1.0</priority>\r\n  </url>\r\n\r\n\'\'\'\r\n\r\n\r\n# 获取博客列表\r\ndef get_blog_list():\r\n    first_blog_list = [domain_name]\r\n    url = domain_name + \'/blog/blog/page?current=1&size=99999\'\r\n    response = requests.get(url=url)\r\n    blog_item_list = json.loads(response.text)[\'data\'][\'records\']\r\n    for blog in blog_item_list:\r\n        first_blog_list.append(domain_name + \'/myBlog?id=\' + str(blog[\'id\']))\r\n    return first_blog_list\r\n\r\n\r\n# 获取博客菜单列表\r\ndef get_blog_menu_list():\r\n    second_blog_list = []\r\n    blog_menu_list = [\r\n        {\"id\": \"1100\", \"title\": \"前端技术\"},\r\n        {\"id\": \"1101\", \"title\": \"后端技术\"},\r\n        {\"id\": \"1103\", \"title\": \"人工智能\"},\r\n        {\"id\": \"1104\", \"title\": \"爬虫相关\"},\r\n        {\"id\": \"1107\", \"title\": \"桌面技术\"},\r\n        {\"id\": \"1108\", \"title\": \"硬件相关\"},\r\n        {\"id\": \"1109\", \"title\": \"分享\"},\r\n        {\"id\": \"1113\", \"title\": \"服务器相关\"}\r\n    ]\r\n    for blog in blog_menu_list:\r\n        second_blog_list.append(\r\n            domain_name + \'/list?id=[1,1000,\' + str(blog[\'id\']) + \']&type=menu&title=\' + str(blog[\'title\']))\r\n    second_blog_list.append(domain_name + \'/list?id=[1,1114]&type=menu&title=魔镜\')\r\n    return second_blog_list\r\n\r\n\r\n# 获取博客标签列表\r\ndef get_blog_label_list():\r\n    third_blog_list = []\r\n    url = domain_name + \'/blog/label/page?current=1&size=99999\'\r\n    response = requests.get(url=url)\r\n    blog_label_list = json.loads(response.text)[\'data\'][\'records\']\r\n    for blog in blog_label_list:\r\n        third_blog_list.append(domain_name + \'/list?id=\' + str(blog[\'id\']) + \'&type=label&title=\' + str(blog[\'label\']))\r\n    return third_blog_list\r\n\r\n\r\n# 生成sitemap文件\r\ndef create_sitemap(url_list):\r\n    baidu_word_text = baidu_header\r\n    google_word_text = google_header\r\n    for url in url_list:\r\n        baidu_times = datetime.datetime.now().strftime(baidu_datetime)\r\n        google_times = datetime.datetime.now().strftime(google_datetime)\r\n        urls = re.sub(r\"&\", \"&amp;\", url)\r\n        baidu_word_text += item_url % (urls, baidu_times)\r\n        google_word_text += item_url % (urls, google_times)\r\n    baidu_word_text += \"</urlset>\"\r\n    google_word_text += \"</urlset>\"\r\n    file = open(project_path + \"sitemap.xml\", \'w\', encoding=\'utf-8\')\r\n    file.writelines(baidu_word_text)\r\n    file.close()\r\n    file = open(project_path + \"sitemap-google.xml\", \'w\', encoding=\'utf-8\')\r\n    file.writelines(google_word_text)\r\n    file.close()\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    blog_list = get_blog_list()\r\n    blog_list += get_blog_menu_list()\r\n    blog_list += get_blog_label_list()\r\n    create_sitemap(blog_list)\r\n```', '我的博客之前的sitemap文件都是手动更新的，太麻烦了，现在改为定时更新，思路是使用python读取博客的文章信息并生成sitemap文件，然后使用华为DevCloud定时去执行', '2020-10-21 12:48:19', '2021-01-13 08:25:23'), (95, '1101', 43, 'springboot集成Elasticsearch进行操作', 'https://media.baby7blog.com/FucNx592eoWc9OFfqRsOusSCkbYA', '> # springboot集成Elasticsearch进行操作\n## 使用SpringBootStarterDataElasticsearch进行操作\n### Maven引入\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-elasticsearch</artifactId>\n</dependency>\n```\n### 配置连接信息\n```yml\nspring:\n    elasticsearch:\n        rest:\n            # 地址\n            uris: http://*.*.*.*:host\n            # 用户名\n            username: *\n            # 密码\n            password: *\n```\n这里要说一下，9200/9300端口最好不要用，换成别的端口，然后用户名密码的限制一定要有，不然数据可能会被删除（详见另一篇博客：[服务器被meow攻击，Elasticsearch数据被删除](https://www.baby7blog.com/myBlog?id=93)）\nx-pake在elasticsearch的7.0.0没有免费开放，7.3.1是默认有的，中间几个版本没有试过\n\n### 实体类\n```java\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.elasticsearch.annotations.Document;\nimport org.springframework.data.elasticsearch.annotations.Field;\n\nimport java.util.List;\n\n@Data\n@NoArgsConstructor\n@Accessors(chain = true)\n@Document(indexName = \"test_index\", shards = 1, replicas = 0)\npublic class PatientRecipeInfo {\n\n    @Id\n    private String id;\n\n    @Field\n    private Object content;\n\n    @Field\n    private Long time;\n}\n```\n\n### 数据持久层\n```java\nimport org.springframework.data.elasticsearch.repository.ElasticsearchRepository;\npublic interface MyElasticRepository extends ElasticsearchRepository<DemoEntity, Long>  {\n}\n```\n\n### 服务层\n```java\npublic interface ESYPRelateDealService {\n\n    /**\n     * 根据名称查询排序\n     **/\n    Page<DemoEntity> sort(String test, Integer page, Integer size);\n\n    /**\n     * 保存数据\n     **/\n    boolean save(DemoEntity demoEntity);\n}\n```\n```java\n@Service\npublic class ESYPRelateDealServiceImpl implements ESYPRelateDealService {\n\n    @Autowired\n    private MyElasticRepository myElasticRepository;\n\n    /**\n     * 根据名称查询分页\n     **/\n    Page<DemoEntity> sort(String test, Integer page, Integer size){\n        Sort sort = Sort.by(Sort.Order.desc(test))\n        Pageable pageable = PageRequest.of(page, size, sort);\n        Page<DemoEntity> page = myElasticRepository.findAll(pageable);\n        return page;\n    }\n\n    /**\n     * 保存数据\n     **/\n    boolean save(DemoEntity demoEntity){\n        myElasticRepository.save(demoEntity);\n    }\n}\n```\n\n## 使用High Level Rest Client进行操作\n### 引入Maven\n```xml\n<dependency>\n	<groupId>org.elasticsearch.module</groupId>\n	<artifactId>reindex</artifactId>\n	<version>2.4.6</version>\n</dependency>\n```\n\n### 配置连接信息\n```yml\nspring:\n    elasticsearch:\n        rest:\n            # 地址\n            uris: http://*.*.*.*:host\n            # 用户名\n            username: *\n            # 密码\n            password: *\n```\n\n### 引入配置信息\n```java\nimport lombok.Data;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Configuration;\n\n@Data\n@Configuration\npublic class ESProperties {\n\n    @Value(\"${spring.elasticsearch.rest.uris}\")\n    private String uris;\n\n    @Value(\"${spring.elasticsearch.rest.username}\")\n    private String username;\n\n    @Value(\"${spring.elasticsearch.rest.password}\")\n    private String password;\n}\n```\n\n### 服务层\n```java\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.index.reindex.BulkByScrollResponse;\nimport org.elasticsearch.index.reindex.DeleteByQueryRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n@Service\npublic class ESDealServiceImpl {\n    @Autowired\n    ESProperties esProperties;\n\n    public RestHighLevelClient client;\n\n    //ESHighLevel初始化\n    @PostConstruct\n    public void init() {\n        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(esProperties.getUsername(), esProperties.getPassword()));\n        client = new RestHighLevelClient(\n                RestClient\n                .builder(HttpHost.create(esProperties.getUris()))\n                .setHttpClientConfigCallback(httpClientBuilder -> {\n                    httpClientBuilder.disableAuthCaching();\n                    return httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\n            })\n        );\n    }\n\n}\n```\n\n\n### 未完待续。。。', 'springboot集成Elasticsearch进行操作', '2020-10-21 13:06:17', '2021-01-13 04:03:52');
INSERT INTO `blog` VALUES (96, '1113', 63, '关于博客数据库的数据被勒索和数据恢复', 'https://media.baby7blog.com/FmgtE04iw5ITpg_A_MhYdPGJNQnf', '> # 关于博客数据库的数据被勒索和数据恢复\n\n### 事情开始\n我在浏览博客时发现后几页点不进去，请求直接报500\n没多想，直接搁DevCloud点了个流水线，重新构建重新部署，发现还是不行\n上服务器看Nacos，数据库好像出问题了，有点慌\n在本地用Navicat连接数据库连不上，上服务器看是好着的\n\n### 找到问题\n查了查数据库都是全的，但是除了数据库基本表其他都是WRINING，不知道什么情况\nmysql用户表里面我之前为了省事直接用的root，甚至密码也是root（以后再也不犯了。。。）\nroot用户的远程连接权限没了，成localhost了，我改成了开放远程连接\n用Navicat连接，发现数据库都在，但是业务数据库里面原先的表都没了\n每个数据库只有个WRINING表，我以为是数据库数据错误\n点击去发现事情并不简单，居然是个勒索病毒：\n您需要支付0.055比特币（BTC）才能恢复数据库：列出了我的数据库列表，然后给了个邮箱：如果您需要证明，请通过以下电子邮件与我们联系：database28@protonmail.com\n算了算价格（当然交钱是不可能的）大概是四千多\n\n### 处理过程\n前段时间使用mysqldump进行过数据库备份，但是最新的几个都没有备份，不过我有在CMS端写完博客去博客端看的习惯，我的博客会将单个博客的请求存到redis（反正不多嘛，我就存到redis了）\n查了查缓存的列表，以前的博客我备份都有，最新的有三个在备份中没有，但是缓存中有，直接在网页F12取得博客数据合成sql添加到备份里\n接下来就简单了，使用sql进行数据库还原，然后修改数据库密码，修改博客的配置文件，重新构建重新部署', '您需要支付0.055比特币（BTC）才能恢复数据库：列出了我的数据库列表，然后给了个邮箱：如果您需要证明，请通过以下电子邮件与我们联系：database28@protonmail.com，算了算价格（当然交钱是不可能的）大概是四千多', '2020-10-26 14:14:21', '2021-01-13 06:30:31');
COMMIT;

-- ----------------------------
-- Table structure for blog_label
-- ----------------------------
DROP TABLE IF EXISTS `blog_label`;
CREATE TABLE `blog_label`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `blog_id` int(11) NOT NULL COMMENT '博客ID',
  `label_id` int(11) NOT NULL COMMENT '标签ID',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 153 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '博客标签关联';

-- ----------------------------
-- Records of blog_label
-- ----------------------------
BEGIN;
INSERT INTO `blog_label` VALUES (38, 39, 1), (39, 41, 8), (40, 41, 12), (41, 43, 1), (42, 45, 1), (43, 47, 1), (44, 49, 2), (45, 53, 39), (46, 55, 12), (47, 59, 8), (48, 59, 39), (49, 61, 2), (50, 62, 1), (51, 63, 8), (52, 64, 8), (53, 64, 12), (54, 65, 8), (55, 66, 39), (56, 67, 9), (57, 67, 12), (58, 68, 12), (59, 70, 8), (60, 70, 10), (61, 70, 12), (62, 70, 15), (63, 70, 39), (64, 71, 10), (65, 72, 8), (66, 73, 8), (67, 74, 2), (68, 75, 15), (69, 76, 2), (70, 76, 8), (71, 76, 10), (72, 77, 8), (73, 77, 10), (74, 78, 2), (75, 79, 2), (76, 80, 2), (77, 81, 39), (78, 82, 2), (79, 82, 8), (80, 83, 12), (81, 85, 12), (82, 86, 12), (83, 87, 12), (84, 88, 8), (85, 88, 12), (86, 88, 39), (87, 89, 1), (88, 90, 1), (89, 91, 1), (90, 92, 1), (91, 93, 1), (92, 93, 39), (93, 94, 1), (94, 95, 12), (95, 95, 39), (109, 2, 16), (110, 2, 17), (111, 3, 12), (112, 3, 16), (113, 4, 17), (114, 5, 8), (115, 5, 15), (116, 5, 16), (117, 6, 8), (118, 6, 14), (119, 8, 1), (120, 8, 2), (121, 9, 2), (124, 12, 2), (125, 15, 3), (126, 15, 4), (127, 16, 1), (128, 17, 1), (130, 19, 8), (131, 20, 8), (132, 22, 10), (133, 24, 1), (134, 25, 9), (135, 26, 8), (136, 27, 8), (137, 11, 5), (138, 18, 1), (141, 10, 6), (142, 7, 1), (143, 23, 2), (144, 13, 12), (145, 13, 13), (149, 1, 12), (150, 1, 15), (151, 1, 18), (152, 96, 1);
COMMIT;

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `blog_id` int(11) NOT NULL COMMENT '博客ID，若为0则是留言板',
  `ancestor_id` int(11) NULL DEFAULT NULL COMMENT '回复的祖先评论id',
  `reply_id` int(11) NULL DEFAULT NULL COMMENT '直接回复的评论id',
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '昵称',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像地址',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '邮箱',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户地址',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '评论内容',
  `create_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '评论时间',
  `browser` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论用户的浏览器',
  `system` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论用户的系统',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 24 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '评论';

-- ----------------------------
-- Records of comment
-- ----------------------------
BEGIN;
INSERT INTO `comment` VALUES (22, 0, 0, 0, '七仔', 'https://media.baby7blog.com/1607743608103128122', '1160084407@qq.com', 'http://www.baby7blog.com', '### 快来留言吧\n支持markdow', '2020-12-12 03:26:49', 'chrome/87.0.4280.88', 'Windows 10'), (23, 0, 0, 0, '帅哥', 'https://media.baby7blog.com/1608035442953925471', '891448235@qq.com', 'http://47.93.148.181/', '前来狠狠的踩一脚师傅的博客', '2020-12-15 12:30:43', 'chrome/87.0.4280.88', 'Windows 10');
COMMIT;

-- ----------------------------
-- Table structure for label
-- ----------------------------
DROP TABLE IF EXISTS `label`;
CREATE TABLE `label`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `label` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标签',
  `create_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 41 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '标签';

-- ----------------------------
-- Records of label
-- ----------------------------
BEGIN;
INSERT INTO `label` VALUES (1, '建站', '2019-09-25 11:16:44', '2020-04-09 15:42:56'), (2, '插件', '2019-09-25 11:16:53', '2020-04-09 15:42:56'), (3, 'Redis', '2019-09-25 11:16:59', '2020-04-09 15:42:56'), (4, '高并发', '2019-09-25 11:17:10', '2020-04-09 15:42:57'), (5, '转载', '2019-09-25 11:17:17', '2020-04-09 15:42:57'), (6, '推荐', '2019-09-25 11:17:22', '2020-04-09 15:42:57'), (8, 'python', '2019-09-25 11:17:30', '2020-04-09 15:42:57'), (9, '微信小程序', '2019-10-02 21:54:37', '2020-04-09 15:42:57'), (10, '树莓派', '2019-10-02 21:54:37', '2020-04-09 15:42:57'), (12, 'Java', '2019-10-02 21:54:39', '2020-04-09 15:42:57'), (13, '设计模式', '2019-10-02 21:54:39', '2020-04-09 15:42:57'), (14, '网易云', '2019-10-02 21:54:50', '2020-04-09 15:42:58'), (15, '人工智能', '2019-10-02 21:54:51', '2020-04-09 15:42:58'), (16, '图像处理', '2019-10-02 21:54:51', '2020-04-09 15:42:58'), (17, 'C或C++', '2019-10-02 21:54:51', '2020-04-09 15:42:58'), (18, '神经网络', '2019-10-02 21:54:53', '2020-04-09 15:42:58'), (39, '大数据', '2020-02-26 12:29:23', '2020-04-09 15:42:58'), (40, '建站', '2019-09-25 03:16:44', '2020-04-09 07:42:56');
COMMIT;

-- ----------------------------
-- Table structure for link
-- ----------------------------
DROP TABLE IF EXISTS `link`;
CREATE TABLE `link`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `nickname` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '博主昵称',
  `email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '博主邮箱',
  `title` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '博客名字',
  `url` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '博客地址',
  `logo` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '博客图标',
  `create_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '友链';

-- ----------------------------
-- Records of link
-- ----------------------------
BEGIN;
INSERT INTO `link` VALUES (1, 'LJC', '', 'LJC Blog', 'https://www.ljcblog.top/', 'https://media.baby7blog.com/otherlogo/ljc_logo.png', '2020-11-02 14:48:44', '2020-11-02 14:48:44'), (2, '哈希豪', NULL, '哈希豪', 'http://39.106.39.30/', 'https://media.baby7blog.com/otherlogo/haxihao_logo.jpg', '2020-11-02 14:49:05', '2020-11-02 14:49:05'), (3, '温志怀', NULL, '温志怀的博客', 'http://www.wenzhihuai.com/index.html', 'https://media.baby7blog.com/otherlogo/wenzhihuai_log.png', '2020-11-02 14:49:25', '2020-11-02 14:49:25'), (4, '瀚思彼岸', NULL, '瀚思彼岸', 'https://bbs.hassbian.com/', 'https://media.baby7blog.com/otherlogo/hassbian.ico', '2020-12-25 08:59:20', '2020-12-25 08:59:20');
COMMIT;

-- ----------------------------
-- Table structure for menu
-- ----------------------------
DROP TABLE IF EXISTS `menu`;
CREATE TABLE `menu`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '名称',
  `sort` int(11) NULL DEFAULT NULL COMMENT '排序值',
  `create_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `update_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1115 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '菜单';

-- ----------------------------
-- Records of menu
-- ----------------------------
BEGIN;
INSERT INTO `menu` VALUES (1100, '前端技术', 1, '2019-09-24 14:47:27', '2020-04-09 15:43:02'), (1101, '后端技术', 2, '2019-10-03 10:55:40', '2020-04-09 15:43:02'), (1103, '人工智能', 3, '2019-10-03 10:56:50', '2020-04-09 15:43:02'), (1104, '爬虫相关', 4, '2019-10-03 10:57:28', '2020-04-09 15:43:02'), (1107, '桌面技术', 5, '2019-10-03 11:01:51', '2020-04-09 15:43:03'), (1108, '硬件相关', 6, '2019-10-03 11:02:27', '2020-04-09 15:43:03'), (1109, '分享', 8, '2019-10-03 11:07:02', '2020-04-09 15:43:03'), (1113, '服务器相关', 7, '2019-11-19 11:48:01', '2020-04-09 15:43:03'), (1114, '魔镜', 4, '2020-06-17 21:27:23', '2020-06-17 21:27:23');
COMMIT;

-- ----------------------------
-- Table structure for setting
-- ----------------------------
DROP TABLE IF EXISTS `setting`;
CREATE TABLE `setting`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `content` varchar(6000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'json格式博客数据',
  `blogger` varchar(10000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'markdown格式博主介绍',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '系统设置';

-- ----------------------------
-- Records of setting
-- ----------------------------
BEGIN;
INSERT INTO `setting` VALUES (1, '{\r\n    \"uploadFile\": {\r\n        \"qiniu\": {\r\n            \"bucket\": \"baby7-media\",\r\n            \"path\": \"https://media.baby7blog.com\",\r\n            \"secretKey\": \"yDdNmZWUEzs2zsk46O6O5-WbZ0x1lF2r3neJ7xbO\",\r\n            \"accessKey\": \"QHqjfdZsbHZaAvogeFGM8cTrurShs7UmN5LIu-iZ\",\r\n            \"name\": \"七牛云存储\",\r\n            \"state\": true,\r\n            \"local\": \"huanan\"\r\n        },\r\n        \"local\": {\r\n            \"name\": \"服务器上传\",\r\n            \"state\": false\r\n        }\r\n    },\r\n    \"recordNumber\": \"辽ICP备18000129号-3\",\r\n    \"recordUrl\": \"http://beian.miit.gov.cn\",\r\n    \"plugins\": {\r\n        \"starfield\": {\r\n            \"state\": false\r\n        },\r\n        \"live2dw\": {\r\n            \"vOffset\": \"-25\",\r\n            \"cdnPath\": \"https://cdn.baby7blog.com/\",\r\n            \"width\": \"225\",\r\n            \"state\": true,\r\n            \"position\": \"right\",\r\n            \"type\": \"rem\",\r\n            \"height\": \"450\",\r\n            \"hOffset\": 0\r\n        },\r\n        \"backToTop\": {\r\n            \"cdnPath\": \"https://cdn.baby7blog.com/gototop.png\",\r\n            \"state\": false\r\n        },\r\n        \"snow\": {\r\n            \"state\": true\r\n        },\r\n        \"flyingFish\": {\r\n            \"state\": false\r\n        },\r\n        \"rem\": {\r\n            \"cdnPath\": \"https://cdn.baby7blog.com/\",\r\n            \"state\": true\r\n        },\r\n        \"particles\": {\r\n            \"state\": false\r\n        }\r\n    },\r\n    \"icon\": \"https://media.baby7blog.com/img/blogger/head.jpg\",\r\n    \"updateTime\": \"2020-11-21 16:34:17\",\r\n    \"avatar\": \"https://media.baby7blog.com/1605947651576740195\",\r\n    \"title\": \"七仔的博客\",\r\n    \"push\": {\r\n        \"baidu\": {\r\n            \"state\": false\r\n        },\r\n        \"360\": {\r\n            \"state\": false,\r\n            \"value\": \"d182b3f28525f2db83acfaaf6e696dba\"\r\n        },\r\n        \"toutiao\": {\r\n            \"state\": false,\r\n            \"value\": \"9df3de8ae46c4ffa985fb6febc9c8a523315aac9f45899e861613b6864d981ae4fdd1ad98e0e625f215e79a7d64000a63e5cf22326fb5a5820cc8b0346c23f9a355ba0767d787406a81a8903ec7d59b5\"\r\n        },\r\n        \"baiduStatistics\": {\r\n            \"state\": false,\r\n            \"value\": \"1789cc1192f7ec5466d4a06ac4c0da82\"\r\n        }\r\n    },\r\n    \"socialAccounts\": [\r\n        {\r\n            \"qr\": \"https://media.baby7blog.com/img/blogger/weixin-qr.png\",\r\n            \"icon\": \"https://media.baby7blog.com/img/blogger/weixin.png\",\r\n            \"type\": \"微信\"\r\n        },\r\n        {\r\n            \"qr\": \"https://media.baby7blog.com/img/blogger/qq-qr.jpg\",\r\n            \"icon\": \"https://media.baby7blog.com/img/blogger/qq.png\",\r\n            \"type\": \"QQ\"\r\n        }\r\n    ],\r\n    \"defaultImg\": \"https://media.baby7blog.com/blog/img/defaultShortImg.png\",\r\n    \"backgroundImg\": \"https://media.baby7blog.com/theme/back.jpg\",\r\n    \"createTime\": \"2019-04-10 20:51:03\",\r\n    \"nickname\": \"七仔\",\r\n    \"describe\": \"主要记录自己在写程序过程中的发现、问题、成果\",\r\n    \"email\": {\r\n        \"host\": \"smtp.qq.com\",\r\n        \"username\": \"1160084407@qq.com\",\r\n        \"password\": \"waceojqucmhqgbac\",\r\n        \"url\": \"https://www.baby7blog.com\"\r\n    }\r\n}', '> # 关于博主\n\n七仔\n\n*Don\'t let your dreams be dreams.*\n\n> # 关于博客\n\n七仔的博客主要记录自己在写程序过程中的发现、问题、成果。\n\n> # 联系博主\n\n电子邮件： 1160084407@qq.com\n\n> # 版权声明\n\n本站博文原创内容，转载请务必注明作者七仔的博客以及原文出处链接。\n\n另外，本站博文未经授权不得用于任何商业目的\n\n相关侵权、举报、投诉及建议等，请发E-mail：1160084407@qq.com');
COMMIT;

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `username` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户名',
  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '密码',
  `avatar` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '头像地址',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '管理用户';

-- ----------------------------
-- Records of user
-- ----------------------------
BEGIN;
INSERT INTO `user` VALUES (1, '七仔', 'admin', '$2a$10$YA/JRUQt9J0XuJn2qSrrA.d90I1pAFcWjbwF9BUaSiVUT5PvlsDbi', 'https://media.baby7blog.com/img/blogger/head.jpg');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
